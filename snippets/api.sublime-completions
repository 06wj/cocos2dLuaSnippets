{
  "scope": "source.lua",

	"completions":
	[

		{ "trigger": "CCTransitionSlideInT_create(float_t,CCScene*_scene,)", "contents": "CCTransitionSlideInT:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCEaseInOut_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseInOut_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseInOut_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseInOut_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseInOut_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseInOut_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseInOut_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseInOut_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseInOut_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseInOut_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseInOut_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseInOut_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseInOut_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseInOut_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseInOut_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseInOut_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseInOut_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseInOut_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseInOut_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseInOut_create(CCActionInterval*_pAction,float_fRate,)", "contents": "CCEaseInOut:create(${1:CCActionInterval*_pAction},${2:float_fRate})" }
,


		{ "trigger": "CCActionManager_removeAllActions()", "contents": "removeAllActions()" }
,
		{ "trigger": "CCActionManager_retain()", "contents": "retain()" }
,
		{ "trigger": "CCActionManager_removeAllActionsFromTarget(CCObject_*pTarget,)", "contents": "removeAllActionsFromTarget(${1:CCObject_*pTarget})" }
,
		{ "trigger": "CCActionManager_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCActionManager_resumeTargets(CCSet*_targetsToResume,)", "contents": "resumeTargets(${1:CCSet*_targetsToResume})" }
,
		{ "trigger": "CCActionManager_pauseTarget(CCObject_*pTarget,)", "contents": "pauseTarget(${1:CCObject_*pTarget})" }
,
		{ "trigger": "CCActionManager_removeActionByTag(unsigned_int_tag,CCObject_*pTarget,)", "contents": "removeActionByTag(${1:unsigned_int_tag},${2:CCObject_*pTarget})" }
,
		{ "trigger": "CCActionManager_copy()", "contents": "copy()" }
,
		{ "trigger": "CCActionManager_pauseAllRunningActions()", "contents": "pauseAllRunningActions()" }
,
		{ "trigger": "CCActionManager_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCActionManager_addAction(CCAction_*pAction,CCNode_*pTarget,bool_paused,)", "contents": "addAction(${1:CCAction_*pAction},${2:CCNode_*pTarget},${3:bool_paused})" }
,
		{ "trigger": "CCActionManager_resumeTarget(CCObject_*pTarget,)", "contents": "resumeTarget(${1:CCObject_*pTarget})" }
,
		{ "trigger": "CCActionManager_numberOfRunningActionsInTarget(CCObject_*pTarget,)", "contents": "numberOfRunningActionsInTarget(${1:CCObject_*pTarget})" }
,
		{ "trigger": "CCActionManager_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCActionManager_getActionByTag(unsigned_int_tag,CCObject_*pTarget,)", "contents": "getActionByTag(${1:unsigned_int_tag},${2:CCObject_*pTarget})" }
,
		{ "trigger": "CCActionManager_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCActionManager_removeAction(CCAction_*pAction,)", "contents": "removeAction(${1:CCAction_*pAction})" }
,
		{ "trigger": "CCActionManager_release()", "contents": "release()" }
,

		{ "trigger": "CCStopGrid_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCStopGrid_retain()", "contents": "retain()" }
,
		{ "trigger": "CCStopGrid_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCStopGrid_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCStopGrid_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCStopGrid_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCStopGrid_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCStopGrid_copy()", "contents": "copy()" }
,
		{ "trigger": "CCStopGrid_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCStopGrid_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCStopGrid_release()", "contents": "release()" }
,
		{ "trigger": "CCStopGrid_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCStopGrid_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCStopGrid_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCStopGrid_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCStopGrid_create()", "contents": "CCStopGrid:create()" }
,

		{ "trigger": "CCTextureCache_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTextureCache_dumpCachedTextureInfo()", "contents": "dumpCachedTextureInfo()" }
,
		{ "trigger": "CCTextureCache_addPVRImage(const_char*_filename,)", "contents": "addPVRImage(${1:const_char*_filename})" }
,
		{ "trigger": "CCTextureCache_removeTextureForKey(const_char_*textureKeyName,)", "contents": "removeTextureForKey(${1:const_char_*textureKeyName})" }
,
		{ "trigger": "CCTextureCache_addImage(const_char*_fileimage,)", "contents": "addImage(${1:const_char*_fileimage})" }
,
		{ "trigger": "CCTextureCache_removeAllTextures()", "contents": "removeAllTextures()" }
,
		{ "trigger": "CCTextureCache_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTextureCache_removeUnusedTextures()", "contents": "removeUnusedTextures()" }
,
		{ "trigger": "CCTextureCache_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTextureCache_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTextureCache_release()", "contents": "release()" }
,
		{ "trigger": "CCTextureCache_addUIImage(CCImage_*image,const_char_*key,)", "contents": "addUIImage(${1:CCImage_*image},${2:const_char_*key})" }
,
		{ "trigger": "CCTextureCache_textureForKey(const_char*_key,)", "contents": "textureForKey(${1:const_char*_key})" }
,
		{ "trigger": "CCTextureCache_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTextureCache_removeTexture(CCTexture2D*_texture,)", "contents": "removeTexture(${1:CCTexture2D*_texture})" }
,
		{ "trigger": "CCTextureCache_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTextureCache_purgeSharedTextureCache()", "contents": "CCTextureCache:purgeSharedTextureCache()" }
,
		{ "trigger": "CCTextureCache_reloadAllTextures()", "contents": "CCTextureCache:reloadAllTextures()" }
,
		{ "trigger": "CCTextureCache_sharedTextureCache()", "contents": "CCTextureCache:sharedTextureCache()" }
,

		{ "trigger": "CCUserDefault_flush()", "contents": "flush()" }
,
		{ "trigger": "CCUserDefault_setBoolForKey(const_char*_pKey,bool_value,)", "contents": "setBoolForKey(${1:const_char*_pKey},${2:bool_value})" }
,
		{ "trigger": "CCUserDefault_getFloatForKey(const_char*_pKey,)", "contents": "getFloatForKey(${1:const_char*_pKey})" }
,
		{ "trigger": "CCUserDefault_setDoubleForKey(const_char*_pKey,double_value,)", "contents": "setDoubleForKey(${1:const_char*_pKey},${2:double_value})" }
,
		{ "trigger": "CCUserDefault_setStringForKey(const_char*_pKey,std::string_value,)", "contents": "setStringForKey(${1:const_char*_pKey},${2:std::string_value})" }
,
		{ "trigger": "CCUserDefault_setIntegerForKey(const_char*_pKey,int_value,)", "contents": "setIntegerForKey(${1:const_char*_pKey},${2:int_value})" }
,
		{ "trigger": "CCUserDefault_getStringForKey(const_char*_pKey,)", "contents": "getStringForKey(${1:const_char*_pKey})" }
,
		{ "trigger": "CCUserDefault_getBoolForKey(const_char*_pKey,)", "contents": "getBoolForKey(${1:const_char*_pKey})" }
,
		{ "trigger": "CCUserDefault_getIntegerForKey(const_char*_pKey,)", "contents": "getIntegerForKey(${1:const_char*_pKey})" }
,
		{ "trigger": "CCUserDefault_getDoubleForKey(const_char*_pKey,)", "contents": "getDoubleForKey(${1:const_char*_pKey})" }
,
		{ "trigger": "CCUserDefault_getXMLFilePath()", "contents": "getXMLFilePath()" }
,
		{ "trigger": "CCUserDefault_setFloatForKey(const_char*_pKey,float_value,)", "contents": "setFloatForKey(${1:const_char*_pKey},${2:float_value})" }
,
		{ "trigger": "CCUserDefault_sharedUserDefault()", "contents": "CCUserDefault:sharedUserDefault()" }
,
		{ "trigger": "CCUserDefault_purgeSharedUserDefault()", "contents": "CCUserDefault:purgeSharedUserDefault()" }
,

		{ "trigger": "CCTMXTiledMap_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCTMXTiledMap_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTMXTiledMap_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCTMXTiledMap_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCTMXTiledMap_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCTMXTiledMap_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCTMXTiledMap_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTMXTiledMap_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCTMXTiledMap_transform()", "contents": "transform()" }
,
		{ "trigger": "CCTMXTiledMap_propertyNamed(const_char_*propertyName,)", "contents": "propertyNamed(${1:const_char_*propertyName})" }
,
		{ "trigger": "CCTMXTiledMap_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTMXTiledMap_layerNamed(const_char_*layerName,)", "contents": "layerNamed(${1:const_char_*layerName})" }
,
		{ "trigger": "CCTMXTiledMap_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCTMXTiledMap_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTMXTiledMap_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCTMXTiledMap_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTMXTiledMap_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCTMXTiledMap_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCTMXTiledMap_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTMXTiledMap_draw()", "contents": "draw()" }
,
		{ "trigger": "CCTMXTiledMap_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCTMXTiledMap_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCTMXTiledMap_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCTMXTiledMap_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCTMXTiledMap_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCTMXTiledMap_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTMXTiledMap_getMapSize()", "contents": "getMapSize()" }
,
		{ "trigger": "CCTMXTiledMap_setTileSize(CCSize_sz,)", "contents": "setTileSize(${1:CCSize_sz})" }
,
		{ "trigger": "CCTMXTiledMap_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCTMXTiledMap_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCTMXTiledMap_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCTMXTiledMap_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCTMXTiledMap_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCTMXTiledMap_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCTMXTiledMap_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCTMXTiledMap_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCTMXTiledMap_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCTMXTiledMap_objectGroupNamed(const_char_*groupName,)", "contents": "objectGroupNamed(${1:const_char_*groupName})" }
,
		{ "trigger": "CCTMXTiledMap_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTMXTiledMap_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCTMXTiledMap_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCTMXTiledMap_setProperties(CCDictionary*_pval,)", "contents": "setProperties(${1:CCDictionary*_pval})" }
,
		{ "trigger": "CCTMXTiledMap_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCTMXTiledMap_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCTMXTiledMap_visit()", "contents": "visit()" }
,
		{ "trigger": "CCTMXTiledMap_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTMXTiledMap_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCTMXTiledMap_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCTMXTiledMap_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCTMXTiledMap_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCTMXTiledMap_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTMXTiledMap_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCTMXTiledMap_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCTMXTiledMap_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCTMXTiledMap_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCTMXTiledMap_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCTMXTiledMap_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCTMXTiledMap_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCTMXTiledMap_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTMXTiledMap_getTileSize()", "contents": "getTileSize()" }
,
		{ "trigger": "CCTMXTiledMap_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTMXTiledMap_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTMXTiledMap_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCTMXTiledMap_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCTMXTiledMap_setMapSize(CCSize_sz,)", "contents": "setMapSize(${1:CCSize_sz})" }
,
		{ "trigger": "CCTMXTiledMap_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTMXTiledMap_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCTMXTiledMap_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTMXTiledMap_getObjectGroups()", "contents": "getObjectGroups()" }
,
		{ "trigger": "CCTMXTiledMap_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCTMXTiledMap_getProperties()", "contents": "getProperties()" }
,
		{ "trigger": "CCTMXTiledMap_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTMXTiledMap_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCTMXTiledMap_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTMXTiledMap_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCTMXTiledMap_setMapOrientation(int_val,)", "contents": "setMapOrientation(${1:int_val})" }
,
		{ "trigger": "CCTMXTiledMap_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTMXTiledMap_description()", "contents": "description()" }
,
		{ "trigger": "CCTMXTiledMap_propertiesForGID(int_GID,)", "contents": "propertiesForGID(${1:int_GID})" }
,
		{ "trigger": "CCTMXTiledMap_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCTMXTiledMap_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTMXTiledMap_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCTMXTiledMap_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCTMXTiledMap_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTMXTiledMap_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCTMXTiledMap_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCTMXTiledMap_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTMXTiledMap_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCTMXTiledMap_release()", "contents": "release()" }
,
		{ "trigger": "CCTMXTiledMap_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCTMXTiledMap_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTMXTiledMap_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCTMXTiledMap_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCTMXTiledMap_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCTMXTiledMap_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTMXTiledMap_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCTMXTiledMap_setObjectGroups(CCArray*_pval,)", "contents": "setObjectGroups(${1:CCArray*_pval})" }
,
		{ "trigger": "CCTMXTiledMap_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCTMXTiledMap_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCTMXTiledMap_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCTMXTiledMap_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTMXTiledMap_getMapOrientation()", "contents": "getMapOrientation()" }
,
		{ "trigger": "CCTMXTiledMap_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCTMXTiledMap_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTMXTiledMap_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTMXTiledMap_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTMXTiledMap_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCTMXTiledMap_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCTMXTiledMap_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCTMXTiledMap_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCTMXTiledMap_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCTMXTiledMap_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCTMXTiledMap_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCTMXTiledMap_createWithXML(const_char*_tmxString,const_char*_resourcePath,)", "contents": "CCTMXTiledMap:createWithXML(${1:const_char*_tmxString},${2:const_char*_resourcePath})" }
,
		{ "trigger": "CCTMXTiledMap_create(const_char_*tmxFile,)", "contents": "CCTMXTiledMap:create(${1:const_char_*tmxFile})" }
,

		{ "trigger": "CCCatmullRomBy_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCCatmullRomBy_getPoints()", "contents": "getPoints()" }
,
		{ "trigger": "CCCatmullRomBy_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCCatmullRomBy_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCCatmullRomBy_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCCatmullRomBy_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCCatmullRomBy_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCCatmullRomBy_retain()", "contents": "retain()" }
,
		{ "trigger": "CCCatmullRomBy_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCCatmullRomBy_copy()", "contents": "copy()" }
,
		{ "trigger": "CCCatmullRomBy_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCCatmullRomBy_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCCatmullRomBy_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCCatmullRomBy_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCCatmullRomBy_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCCatmullRomBy_setPoints(CCPointArray*_points,)", "contents": "setPoints(${1:CCPointArray*_points})" }
,
		{ "trigger": "CCCatmullRomBy_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCCatmullRomBy_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCCatmullRomBy_release()", "contents": "release()" }
,
		{ "trigger": "CCCatmullRomBy_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCCatmullRomBy_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCCatmullRomBy_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCCatmullRomBy_create(float_dt,CCPointArray*_points,)", "contents": "CCCatmullRomBy:create(${1:float_dt},${2:CCPointArray*_points})" }
,

		{ "trigger": "CCAnimationCache_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCAnimationCache_copy()", "contents": "copy()" }
,
		{ "trigger": "CCAnimationCache_addAnimationsWithDictionary(CCDictionary*_dictionary,)", "contents": "addAnimationsWithDictionary(${1:CCDictionary*_dictionary})" }
,
		{ "trigger": "CCAnimationCache_addAnimationsWithFile(const_char*_plist,)", "contents": "addAnimationsWithFile(${1:const_char*_plist})" }
,
		{ "trigger": "CCAnimationCache_retain()", "contents": "retain()" }
,
		{ "trigger": "CCAnimationCache_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCAnimationCache_release()", "contents": "release()" }
,
		{ "trigger": "CCAnimationCache_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCAnimationCache_addAnimation(CCAnimation_*animation,const_char_*_name,)", "contents": "addAnimation(${1:CCAnimation_*animation},${2:const_char_*_name})" }
,
		{ "trigger": "CCAnimationCache_animationByName(const_char*_name,)", "contents": "animationByName(${1:const_char*_name})" }
,
		{ "trigger": "CCAnimationCache_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCAnimationCache_removeAnimationByName(const_char*_name,)", "contents": "removeAnimationByName(${1:const_char*_name})" }
,
		{ "trigger": "CCAnimationCache_purgeSharedAnimationCache()", "contents": "CCAnimationCache:purgeSharedAnimationCache()" }
,
		{ "trigger": "CCAnimationCache_sharedAnimationCache()", "contents": "CCAnimationCache:sharedAnimationCache()" }
,

		{ "trigger": "CCLiquid_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCLiquid_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCLiquid_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCLiquid_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCLiquid_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCLiquid_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCLiquid_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCLiquid_retain()", "contents": "retain()" }
,
		{ "trigger": "CCLiquid_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCLiquid_release()", "contents": "release()" }
,
		{ "trigger": "CCLiquid_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCLiquid_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCLiquid_originalVertex(const_CCPoint&_pos,)", "contents": "originalVertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCLiquid_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCLiquid_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCLiquid_vertex(const_CCPoint&_pos,)", "contents": "vertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCLiquid_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCLiquid_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCLiquid_setAmplitudeRate(float_fAmplitudeRate,)", "contents": "setAmplitudeRate(${1:float_fAmplitudeRate})" }
,
		{ "trigger": "CCLiquid_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCLiquid_getAmplitude()", "contents": "getAmplitude()" }
,
		{ "trigger": "CCLiquid_copy()", "contents": "copy()" }
,
		{ "trigger": "CCLiquid_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCLiquid_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCLiquid_setVertex(const_CCPoint&_pos,const_ccVertex3F&_vertex,)", "contents": "setVertex(${1:const_CCPoint&_pos},${2:const_ccVertex3F&_vertex})" }
,
		{ "trigger": "CCLiquid_setAmplitude(float_fAmplitude,)", "contents": "setAmplitude(${1:float_fAmplitude})" }
,
		{ "trigger": "CCLiquid_create(float_duration,CCSize_gridSize,unsigned_int_waves,float_amplitude,)", "contents": "CCLiquid:create(${1:float_duration},${2:CCSize_gridSize},${3:unsigned_int_waves},${4:float_amplitude})" }
,

		{ "trigger": "CCMenuItemFont_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCMenuItemFont_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCMenuItemFont_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCMenuItemFont_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCMenuItemFont_fontSize()", "contents": "fontSize()" }
,
		{ "trigger": "CCMenuItemFont_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCMenuItemFont_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCMenuItemFont_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCMenuItemFont_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCMenuItemFont_transform()", "contents": "transform()" }
,
		{ "trigger": "CCMenuItemFont_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCMenuItemFont_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCMenuItemFont_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCMenuItemFont_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemFont_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCMenuItemFont_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCMenuItemFont_activate()", "contents": "activate()" }
,
		{ "trigger": "CCMenuItemFont_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCMenuItemFont_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCMenuItemFont_fontSizeObj()", "contents": "fontSizeObj()" }
,
		{ "trigger": "CCMenuItemFont_setColor(ccColor3B_color,)", "contents": "setColor(${1:ccColor3B_color})" }
,
		{ "trigger": "CCMenuItemFont_draw()", "contents": "draw()" }
,
		{ "trigger": "CCMenuItemFont_getLabel()", "contents": "getLabel()" }
,
		{ "trigger": "CCMenuItemFont_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCMenuItemFont_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCMenuItemFont_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCMenuItemFont_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCMenuItemFont_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCMenuItemFont_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCMenuItemFont_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCMenuItemFont_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCMenuItemFont_setString(const_char*_label,)", "contents": "setString(${1:const_char*_label})" }
,
		{ "trigger": "CCMenuItemFont_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCMenuItemFont_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemFont_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCMenuItemFont_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCMenuItemFont_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCMenuItemFont_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCMenuItemFont_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCMenuItemFont_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCMenuItemFont_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCMenuItemFont_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCMenuItemFont_setDisabledColor(const_ccColor3B_&_color,)", "contents": "setDisabledColor(${1:const_ccColor3B_&_color})" }
,
		{ "trigger": "CCMenuItemFont_isSelected()", "contents": "isSelected()" }
,
		{ "trigger": "CCMenuItemFont_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCMenuItemFont_description()", "contents": "description()" }
,
		{ "trigger": "CCMenuItemFont_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCMenuItemFont_fontNameObj()", "contents": "fontNameObj()" }
,
		{ "trigger": "CCMenuItemFont_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCMenuItemFont_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCMenuItemFont_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCMenuItemFont_visit()", "contents": "visit()" }
,
		{ "trigger": "CCMenuItemFont_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemFont_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCMenuItemFont_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCMenuItemFont_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCMenuItemFont_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCMenuItemFont_registerScriptTapHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptTapHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCMenuItemFont_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCMenuItemFont_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCMenuItemFont_fontName()", "contents": "fontName()" }
,
		{ "trigger": "CCMenuItemFont_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCMenuItemFont_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCMenuItemFont_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCMenuItemFont_selected()", "contents": "selected()" }
,
		{ "trigger": "CCMenuItemFont_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCMenuItemFont_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCMenuItemFont_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCMenuItemFont_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItemFont_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCMenuItemFont_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCMenuItemFont_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCMenuItemFont_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCMenuItemFont_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItemFont_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCMenuItemFont_setEnabled(bool_enabled,)", "contents": "setEnabled(${1:bool_enabled})" }
,
		{ "trigger": "CCMenuItemFont_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCMenuItemFont_getDisabledColor()", "contents": "getDisabledColor()" }
,
		{ "trigger": "CCMenuItemFont_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCMenuItemFont_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCMenuItemFont_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCMenuItemFont_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCMenuItemFont_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCMenuItemFont_copy()", "contents": "copy()" }
,
		{ "trigger": "CCMenuItemFont_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCMenuItemFont_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCMenuItemFont_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItemFont_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCMenuItemFont_rect()", "contents": "rect()" }
,
		{ "trigger": "CCMenuItemFont_setFontNameObj(const_char*_name,)", "contents": "setFontNameObj(${1:const_char*_name})" }
,
		{ "trigger": "CCMenuItemFont_setFontSizeObj(unsigned_int_s,)", "contents": "setFontSizeObj(${1:unsigned_int_s})" }
,
		{ "trigger": "CCMenuItemFont_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemFont_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCMenuItemFont_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCMenuItemFont_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "CCMenuItemFont_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCMenuItemFont_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCMenuItemFont_setLabel(CCNode*_pLabel,)", "contents": "setLabel(${1:CCNode*_pLabel})" }
,
		{ "trigger": "CCMenuItemFont_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCMenuItemFont_retain()", "contents": "retain()" }
,
		{ "trigger": "CCMenuItemFont_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCMenuItemFont_release()", "contents": "release()" }
,
		{ "trigger": "CCMenuItemFont_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCMenuItemFont_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCMenuItemFont_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCMenuItemFont_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCMenuItemFont_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCMenuItemFont_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCMenuItemFont_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCMenuItemFont_unselected()", "contents": "unselected()" }
,
		{ "trigger": "CCMenuItemFont_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCMenuItemFont_unregisterScriptTapHandler()", "contents": "unregisterScriptTapHandler()" }
,
		{ "trigger": "CCMenuItemFont_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCMenuItemFont_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCMenuItemFont_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCMenuItemFont_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCMenuItemFont_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCMenuItemFont_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCMenuItemFont_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCMenuItemFont_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCMenuItemFont_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCMenuItemFont_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCMenuItemFont_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCMenuItemFont_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCMenuItemFont_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCMenuItemFont_setFontSize(int_s,)", "contents": "CCMenuItemFont:setFontSize(${1:int_s})" }
,
		{ "trigger": "CCMenuItemFont_create(const_char*_value,)", "contents": "CCMenuItemFont:create(${1:const_char*_value})" }
,
		{ "trigger": "CCMenuItemFont_setFontName(const_char*_name,)", "contents": "CCMenuItemFont:setFontName(${1:const_char*_name})" }
,

		{ "trigger": "CCEaseSineIn_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseSineIn_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseSineIn_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseSineIn_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseSineIn_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseSineIn_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseSineIn_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseSineIn_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseSineIn_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseSineIn_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseSineIn_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseSineIn_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseSineIn_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseSineIn_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseSineIn_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseSineIn_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseSineIn_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseSineIn_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseSineIn_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseSineIn_create(CCActionInterval*_pAction,)", "contents": "CCEaseSineIn:create(${1:CCActionInterval*_pAction})" }
,

		{ "trigger": "CCMenuItemAtlasFont_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCMenuItemAtlasFont_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCMenuItemAtlasFont_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCMenuItemAtlasFont_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCMenuItemAtlasFont_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCMenuItemAtlasFont_transform()", "contents": "transform()" }
,
		{ "trigger": "CCMenuItemAtlasFont_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCMenuItemAtlasFont_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCMenuItemAtlasFont_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCMenuItemAtlasFont_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemAtlasFont_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCMenuItemAtlasFont_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCMenuItemAtlasFont_activate()", "contents": "activate()" }
,
		{ "trigger": "CCMenuItemAtlasFont_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setColor(ccColor3B_color,)", "contents": "setColor(${1:ccColor3B_color})" }
,
		{ "trigger": "CCMenuItemAtlasFont_draw()", "contents": "draw()" }
,
		{ "trigger": "CCMenuItemAtlasFont_getLabel()", "contents": "getLabel()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCMenuItemAtlasFont_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCMenuItemAtlasFont_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCMenuItemAtlasFont_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCMenuItemAtlasFont_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCMenuItemAtlasFont_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setString(const_char*_label,)", "contents": "setString(${1:const_char*_label})" }
,
		{ "trigger": "CCMenuItemAtlasFont_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCMenuItemAtlasFont_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemAtlasFont_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCMenuItemAtlasFont_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCMenuItemAtlasFont_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCMenuItemAtlasFont_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCMenuItemAtlasFont_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setDisabledColor(const_ccColor3B_&_color,)", "contents": "setDisabledColor(${1:const_ccColor3B_&_color})" }
,
		{ "trigger": "CCMenuItemAtlasFont_isSelected()", "contents": "isSelected()" }
,
		{ "trigger": "CCMenuItemAtlasFont_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCMenuItemAtlasFont_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCMenuItemAtlasFont_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCMenuItemAtlasFont_visit()", "contents": "visit()" }
,
		{ "trigger": "CCMenuItemAtlasFont_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCMenuItemAtlasFont_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCMenuItemAtlasFont_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCMenuItemAtlasFont_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCMenuItemAtlasFont_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCMenuItemAtlasFont_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCMenuItemAtlasFont_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCMenuItemAtlasFont_selected()", "contents": "selected()" }
,
		{ "trigger": "CCMenuItemAtlasFont_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCMenuItemAtlasFont_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCMenuItemAtlasFont_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCMenuItemAtlasFont_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCMenuItemAtlasFont_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCMenuItemAtlasFont_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setEnabled(bool_enabled,)", "contents": "setEnabled(${1:bool_enabled})" }
,
		{ "trigger": "CCMenuItemAtlasFont_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getDisabledColor()", "contents": "getDisabledColor()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCMenuItemAtlasFont_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCMenuItemAtlasFont_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCMenuItemAtlasFont_copy()", "contents": "copy()" }
,
		{ "trigger": "CCMenuItemAtlasFont_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCMenuItemAtlasFont_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCMenuItemAtlasFont_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItemAtlasFont_setLabel(CCNode*_pLabel,)", "contents": "setLabel(${1:CCNode*_pLabel})" }
,
		{ "trigger": "CCMenuItemAtlasFont_rect()", "contents": "rect()" }
,
		{ "trigger": "CCMenuItemAtlasFont_description()", "contents": "description()" }
,
		{ "trigger": "CCMenuItemAtlasFont_registerScriptTapHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptTapHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCMenuItemAtlasFont_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemAtlasFont_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCMenuItemAtlasFont_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCMenuItemAtlasFont_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "CCMenuItemAtlasFont_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCMenuItemAtlasFont_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCMenuItemAtlasFont_retain()", "contents": "retain()" }
,
		{ "trigger": "CCMenuItemAtlasFont_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCMenuItemAtlasFont_release()", "contents": "release()" }
,
		{ "trigger": "CCMenuItemAtlasFont_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCMenuItemAtlasFont_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCMenuItemAtlasFont_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCMenuItemAtlasFont_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCMenuItemAtlasFont_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCMenuItemAtlasFont_unselected()", "contents": "unselected()" }
,
		{ "trigger": "CCMenuItemAtlasFont_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCMenuItemAtlasFont_unregisterScriptTapHandler()", "contents": "unregisterScriptTapHandler()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCMenuItemAtlasFont_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCMenuItemAtlasFont_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCMenuItemAtlasFont_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCMenuItemAtlasFont_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCMenuItemAtlasFont_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCMenuItemAtlasFont_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCMenuItemAtlasFont_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCMenuItemAtlasFont_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCMenuItemAtlasFont_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCMenuItemAtlasFont_create(const_char*_value,const_char*_charMapFile,int_itemWidth,int_itemHeight,char_startCharMap,)", "contents": "CCMenuItemAtlasFont:create(${1:const_char*_value},${2:const_char*_charMapFile},${3:int_itemWidth},${4:int_itemHeight},${5:char_startCharMap})" }
,

		{ "trigger": "CCToggleVisibility_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCToggleVisibility_retain()", "contents": "retain()" }
,
		{ "trigger": "CCToggleVisibility_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCToggleVisibility_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCToggleVisibility_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCToggleVisibility_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCToggleVisibility_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCToggleVisibility_copy()", "contents": "copy()" }
,
		{ "trigger": "CCToggleVisibility_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCToggleVisibility_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCToggleVisibility_release()", "contents": "release()" }
,
		{ "trigger": "CCToggleVisibility_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCToggleVisibility_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCToggleVisibility_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCToggleVisibility_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCToggleVisibility_create()", "contents": "CCToggleVisibility:create()" }
,

		{ "trigger": "CCCardinalSplineBy_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCCardinalSplineBy_getPoints()", "contents": "getPoints()" }
,
		{ "trigger": "CCCardinalSplineBy_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCCardinalSplineBy_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCCardinalSplineBy_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCCardinalSplineBy_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCCardinalSplineBy_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCCardinalSplineBy_retain()", "contents": "retain()" }
,
		{ "trigger": "CCCardinalSplineBy_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCCardinalSplineBy_copy()", "contents": "copy()" }
,
		{ "trigger": "CCCardinalSplineBy_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCCardinalSplineBy_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCCardinalSplineBy_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCCardinalSplineBy_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCCardinalSplineBy_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCCardinalSplineBy_setPoints(CCPointArray*_points,)", "contents": "setPoints(${1:CCPointArray*_points})" }
,
		{ "trigger": "CCCardinalSplineBy_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCCardinalSplineBy_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCCardinalSplineBy_release()", "contents": "release()" }
,
		{ "trigger": "CCCardinalSplineBy_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCCardinalSplineBy_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCCardinalSplineBy_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCCardinalSplineBy_create(float_duration,CCPointArray*_points,float_tension,)", "contents": "CCCardinalSplineBy:create(${1:float_duration},${2:CCPointArray*_points},${3:float_tension})" }
,

		{ "trigger": "CCApplication_getCurrentLanguage()", "contents": "getCurrentLanguage()" }
,
		{ "trigger": "CCApplication_getTargetPlatform()", "contents": "getTargetPlatform()" }
,
		{ "trigger": "CCApplication_sharedApplication()", "contents": "CCApplication:sharedApplication()" }
,


		{ "trigger": "CCAnimate_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCAnimate_retain()", "contents": "retain()" }
,
		{ "trigger": "CCAnimate_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCAnimate_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCAnimate_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCAnimate_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCAnimate_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCAnimate_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCAnimate_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCAnimate_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCAnimate_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCAnimate_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCAnimate_setAnimation(CCAnimation_*pAnimation,)", "contents": "setAnimation(${1:CCAnimation_*pAnimation})" }
,
		{ "trigger": "CCAnimate_getAnimation()", "contents": "getAnimation()" }
,
		{ "trigger": "CCAnimate_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCAnimate_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCAnimate_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCAnimate_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCAnimate_copy()", "contents": "copy()" }
,
		{ "trigger": "CCAnimate_release()", "contents": "release()" }
,
		{ "trigger": "CCAnimate_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCAnimate_create(CCAnimation_*pAnimation,)", "contents": "CCAnimate:create(${1:CCAnimation_*pAnimation})" }
,

		{ "trigger": "CCAction_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCAction_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCAction_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCAction_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCAction_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCAction_copy()", "contents": "copy()" }
,
		{ "trigger": "CCAction_retain()", "contents": "retain()" }
,
		{ "trigger": "CCAction_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCAction_release()", "contents": "release()" }
,
		{ "trigger": "CCAction_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCAction_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCAction_getTarget()", "contents": "getTarget()" }
,

		{ "trigger": "CCGrid3DAction_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCGrid3DAction_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCGrid3DAction_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCGrid3DAction_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCGrid3DAction_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCGrid3DAction_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCGrid3DAction_retain()", "contents": "retain()" }
,
		{ "trigger": "CCGrid3DAction_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCGrid3DAction_copy()", "contents": "copy()" }
,
		{ "trigger": "CCGrid3DAction_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCGrid3DAction_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCGrid3DAction_originalVertex(const_CCPoint&_pos,)", "contents": "originalVertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCGrid3DAction_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCGrid3DAction_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCGrid3DAction_vertex(const_CCPoint&_pos,)", "contents": "vertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCGrid3DAction_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCGrid3DAction_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCGrid3DAction_setVertex(const_CCPoint&_pos,const_ccVertex3F&_vertex,)", "contents": "setVertex(${1:const_CCPoint&_pos},${2:const_ccVertex3F&_vertex})" }
,
		{ "trigger": "CCGrid3DAction_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCGrid3DAction_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCGrid3DAction_release()", "contents": "release()" }
,
		{ "trigger": "CCGrid3DAction_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCGrid3DAction_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,

		{ "trigger": "CCCallFuncN_create(LUA_FUNCTION_funcID,)", "contents": "CCCallFuncN:create(${1:LUA_FUNCTION_funcID})" }
,

		{ "trigger": "CCAccelAmplitude_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCAccelAmplitude_copy()", "contents": "copy()" }
,
		{ "trigger": "CCAccelAmplitude_retain()", "contents": "retain()" }
,
		{ "trigger": "CCAccelAmplitude_setRate(float_fRate,)", "contents": "setRate(${1:float_fRate})" }
,
		{ "trigger": "CCAccelAmplitude_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCAccelAmplitude_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCAccelAmplitude_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCAccelAmplitude_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCAccelAmplitude_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCAccelAmplitude_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCAccelAmplitude_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCAccelAmplitude_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCAccelAmplitude_release()", "contents": "release()" }
,
		{ "trigger": "CCAccelAmplitude_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCAccelAmplitude_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCAccelAmplitude_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCAccelAmplitude_getRate()", "contents": "getRate()" }
,
		{ "trigger": "CCAccelAmplitude_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCAccelAmplitude_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCAccelAmplitude_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCAccelAmplitude_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCAccelAmplitude_create(CCAction_*pAction,float_duration,)", "contents": "CCAccelAmplitude:create(${1:CCAction_*pAction},${2:float_duration})" }
,

		{ "trigger": "CCOrbitCamera_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCOrbitCamera_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCOrbitCamera_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCOrbitCamera_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCOrbitCamera_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCOrbitCamera_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCOrbitCamera_retain()", "contents": "retain()" }
,
		{ "trigger": "CCOrbitCamera_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCOrbitCamera_copy()", "contents": "copy()" }
,
		{ "trigger": "CCOrbitCamera_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCOrbitCamera_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCOrbitCamera_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCOrbitCamera_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCOrbitCamera_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCOrbitCamera_sphericalRadius(float_*r,float_*zenith,float_*azimuth,)", "contents": "sphericalRadius(${1:float_*r},${2:float_*zenith},${3:float_*azimuth})" }
,
		{ "trigger": "CCOrbitCamera_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCOrbitCamera_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCOrbitCamera_release()", "contents": "release()" }
,
		{ "trigger": "CCOrbitCamera_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCOrbitCamera_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCOrbitCamera_startWithTarget(CCNode_*pTarget,)", "contents": "startWithTarget(${1:CCNode_*pTarget})" }
,
		{ "trigger": "CCOrbitCamera_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCOrbitCamera_create(float_t,float_radius,float_deltaRadius,float_angleZ,float_deltaAngleZ,float_angleX,float_deltaAngleX,)", "contents": "CCOrbitCamera:create(${1:float_t},${2:float_radius},${3:float_deltaRadius},${4:float_angleZ},${5:float_deltaAngleZ},${6:float_angleX},${7:float_deltaAngleX})" }
,

		{ "trigger": "CCBlink_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCBlink_retain()", "contents": "retain()" }
,
		{ "trigger": "CCBlink_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCBlink_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCBlink_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCBlink_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCBlink_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCBlink_copy()", "contents": "copy()" }
,
		{ "trigger": "CCBlink_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCBlink_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCBlink_release()", "contents": "release()" }
,
		{ "trigger": "CCBlink_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCBlink_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCBlink_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCBlink_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCBlink_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCBlink_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCBlink_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCBlink_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCBlink_create(float_duration,unsigned_int_uBlinks,)", "contents": "CCBlink:create(${1:float_duration},${2:unsigned_int_uBlinks})" }
,

		{ "trigger": "CCAtlasNode_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCAtlasNode_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCAtlasNode_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCAtlasNode_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCAtlasNode_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCAtlasNode_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCAtlasNode_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCAtlasNode_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCAtlasNode_transform()", "contents": "transform()" }
,
		{ "trigger": "CCAtlasNode_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCAtlasNode_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCAtlasNode_updateAtlasValues()", "contents": "updateAtlasValues()" }
,
		{ "trigger": "CCAtlasNode_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCAtlasNode_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCAtlasNode_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCAtlasNode_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCAtlasNode_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCAtlasNode_setTexture(CCTexture2D_*texture,)", "contents": "setTexture(${1:CCTexture2D_*texture})" }
,
		{ "trigger": "CCAtlasNode_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCAtlasNode_draw()", "contents": "draw()" }
,
		{ "trigger": "CCAtlasNode_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCAtlasNode_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCAtlasNode_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCAtlasNode_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCAtlasNode_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCAtlasNode_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCAtlasNode_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCAtlasNode_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCAtlasNode_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCAtlasNode_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCAtlasNode_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCAtlasNode_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCAtlasNode_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCAtlasNode_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCAtlasNode_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCAtlasNode_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCAtlasNode_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCAtlasNode_setQuadsToDraw(unsigned_int_quadsToDraw,)", "contents": "setQuadsToDraw(${1:unsigned_int_quadsToDraw})" }
,
		{ "trigger": "CCAtlasNode_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCAtlasNode_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCAtlasNode_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCAtlasNode_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCAtlasNode_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCAtlasNode_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCAtlasNode_visit()", "contents": "visit()" }
,
		{ "trigger": "CCAtlasNode_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCAtlasNode_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCAtlasNode_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCAtlasNode_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCAtlasNode_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCAtlasNode_setOpacityModifyRGB(bool_isOpacityModifyRGB,)", "contents": "setOpacityModifyRGB(${1:bool_isOpacityModifyRGB})" }
,
		{ "trigger": "CCAtlasNode_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCAtlasNode_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCAtlasNode_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCAtlasNode_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCAtlasNode_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCAtlasNode_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCAtlasNode_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCAtlasNode_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCAtlasNode_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCAtlasNode_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCAtlasNode_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCAtlasNode_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCAtlasNode_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCAtlasNode_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCAtlasNode_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCAtlasNode_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCAtlasNode_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCAtlasNode_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCAtlasNode_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCAtlasNode_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCAtlasNode_getTextureAtlas()", "contents": "getTextureAtlas()" }
,
		{ "trigger": "CCAtlasNode_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCAtlasNode_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCAtlasNode_copy()", "contents": "copy()" }
,
		{ "trigger": "CCAtlasNode_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCAtlasNode_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCAtlasNode_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCAtlasNode_getQuadsToDraw()", "contents": "getQuadsToDraw()" }
,
		{ "trigger": "CCAtlasNode_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCAtlasNode_description()", "contents": "description()" }
,
		{ "trigger": "CCAtlasNode_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCAtlasNode_setTextureAtlas(CCTextureAtlas*_atlas,)", "contents": "setTextureAtlas(${1:CCTextureAtlas*_atlas})" }
,
		{ "trigger": "CCAtlasNode_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCAtlasNode_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCAtlasNode_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCAtlasNode_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCAtlasNode_retain()", "contents": "retain()" }
,
		{ "trigger": "CCAtlasNode_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCAtlasNode_release()", "contents": "release()" }
,
		{ "trigger": "CCAtlasNode_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCAtlasNode_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCAtlasNode_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCAtlasNode_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCAtlasNode_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCAtlasNode_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCAtlasNode_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCAtlasNode_setColor(ccColor3B_color,)", "contents": "setColor(${1:ccColor3B_color})" }
,
		{ "trigger": "CCAtlasNode_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCAtlasNode_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCAtlasNode_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCAtlasNode_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCAtlasNode_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCAtlasNode_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCAtlasNode_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCAtlasNode_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCAtlasNode_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCAtlasNode_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCAtlasNode_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCAtlasNode_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCAtlasNode_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCAtlasNode_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCAtlasNode_create(const_char*_tile,unsigned_int_tileWidth,unsigned_int_tileHeight,unsigned_int_itemsToRender,)", "contents": "CCAtlasNode:create(${1:const_char*_tile},${2:unsigned_int_tileWidth},${3:unsigned_int_tileHeight},${4:unsigned_int_itemsToRender})" }
,

		{ "trigger": "CCTransitionProgressRadialCW_create(float_t,CCScene*_scene,)", "contents": "CCTransitionProgressRadialCW:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCEaseElasticInOut_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseElasticInOut_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseElasticInOut_setPeriod(float_fPeriod,)", "contents": "setPeriod(${1:float_fPeriod})" }
,
		{ "trigger": "CCEaseElasticInOut_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseElasticInOut_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseElasticInOut_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseElasticInOut_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseElasticInOut_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseElasticInOut_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseElasticInOut_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseElasticInOut_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseElasticInOut_getPeriod()", "contents": "getPeriod()" }
,
		{ "trigger": "CCEaseElasticInOut_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseElasticInOut_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseElasticInOut_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseElasticInOut_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseElasticInOut_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseElasticInOut_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseElasticInOut_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseElasticInOut_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseElasticInOut_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseElasticInOut_create(CCActionInterval_*pAction,float_fPeriod_=_0.3,)", "contents": "CCEaseElasticInOut:create(${1:CCActionInterval_*pAction},${2:float_fPeriod_=_0.3})" }
,

		{ "trigger": "CCTransitionMoveInL_create(float_t,CCScene*_scene,)", "contents": "CCTransitionMoveInL:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCFadeOutBLTiles_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCFadeOutBLTiles_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCFadeOutBLTiles_tile(CCPoint_pos,)", "contents": "tile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCFadeOutBLTiles_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCFadeOutBLTiles_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCFadeOutBLTiles_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCFadeOutBLTiles_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCFadeOutBLTiles_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCFadeOutBLTiles_retain()", "contents": "retain()" }
,
		{ "trigger": "CCFadeOutBLTiles_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCFadeOutBLTiles_release()", "contents": "release()" }
,
		{ "trigger": "CCFadeOutBLTiles_setTile(CCPoint_pos,ccQuad3_coords,)", "contents": "setTile(${1:CCPoint_pos},${2:ccQuad3_coords})" }
,
		{ "trigger": "CCFadeOutBLTiles_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCFadeOutBLTiles_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCFadeOutBLTiles_originalTile(CCPoint_pos,)", "contents": "originalTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCFadeOutBLTiles_turnOnTile(CCPoint_pos,)", "contents": "turnOnTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCFadeOutBLTiles_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCFadeOutBLTiles_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCFadeOutBLTiles_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCFadeOutBLTiles_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCFadeOutBLTiles_copy()", "contents": "copy()" }
,
		{ "trigger": "CCFadeOutBLTiles_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCFadeOutBLTiles_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCFadeOutBLTiles_transformTile(CCPoint_pos,float_distance,)", "contents": "transformTile(${1:CCPoint_pos},${2:float_distance})" }
,
		{ "trigger": "CCFadeOutBLTiles_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCFadeOutBLTiles_turnOffTile(CCPoint_pos,)", "contents": "turnOffTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCFadeOutBLTiles_create(float_duration,CCSize_gridSize,)", "contents": "CCFadeOutBLTiles:create(${1:float_duration},${2:CCSize_gridSize})" }
,

		{ "trigger": "CCParticleExplosion_setEndColor(const_ccColor4F_var,)", "contents": "setEndColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleExplosion_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleExplosion_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCParticleExplosion_setRotatePerSecondVar(float_degrees,)", "contents": "setRotatePerSecondVar(${1:float_degrees})" }
,
		{ "trigger": "CCParticleExplosion_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCParticleExplosion_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCParticleExplosion_transform()", "contents": "transform()" }
,
		{ "trigger": "CCParticleExplosion_getRotatePerSecond()", "contents": "getRotatePerSecond()" }
,
		{ "trigger": "CCParticleExplosion_setTextureWithRect(CCTexture2D_*texture,const_CCRect&_rect,)", "contents": "setTextureWithRect(${1:CCTexture2D_*texture},${2:const_CCRect&_rect})" }
,
		{ "trigger": "CCParticleExplosion_getAngleVar()", "contents": "getAngleVar()" }
,
		{ "trigger": "CCParticleExplosion_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleExplosion_isAutoRemoveOnFinish()", "contents": "isAutoRemoveOnFinish()" }
,
		{ "trigger": "CCParticleExplosion_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleExplosion_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCParticleExplosion_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCParticleExplosion_setTangentialAccel(float_t,)", "contents": "setTangentialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleExplosion_getStartSpin()", "contents": "getStartSpin()" }
,
		{ "trigger": "CCParticleExplosion_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCParticleExplosion_getStartColor()", "contents": "getStartColor()" }
,
		{ "trigger": "CCParticleExplosion_setStartSpinVar(float_var,)", "contents": "setStartSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleExplosion_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCParticleExplosion_setStartRadius(float_startRadius,)", "contents": "setStartRadius(${1:float_startRadius})" }
,
		{ "trigger": "CCParticleExplosion_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCParticleExplosion_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCParticleExplosion_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCParticleExplosion_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCParticleExplosion_getPosVar()", "contents": "getPosVar()" }
,
		{ "trigger": "CCParticleExplosion_isFull()", "contents": "isFull()" }
,
		{ "trigger": "CCParticleExplosion_setStartRadiusVar(float_startRadiusVar,)", "contents": "setStartRadiusVar(${1:float_startRadiusVar})" }
,
		{ "trigger": "CCParticleExplosion_getStartSpinVar()", "contents": "getStartSpinVar()" }
,
		{ "trigger": "CCParticleExplosion_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCParticleExplosion_setDisplayFrame(CCSpriteFrame*_spriteFrame,)", "contents": "setDisplayFrame(${1:CCSpriteFrame*_spriteFrame})" }
,
		{ "trigger": "CCParticleExplosion_setBatchNode(CCParticleBatchNode*_node,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_node})" }
,
		{ "trigger": "CCParticleExplosion_isBlendAdditive()", "contents": "isBlendAdditive()" }
,
		{ "trigger": "CCParticleExplosion_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCParticleExplosion_getEndRadius()", "contents": "getEndRadius()" }
,
		{ "trigger": "CCParticleExplosion_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCParticleExplosion_visit()", "contents": "visit()" }
,
		{ "trigger": "CCParticleExplosion_getEmissionRate()", "contents": "getEmissionRate()" }
,
		{ "trigger": "CCParticleExplosion_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCParticleExplosion_setEndRadiusVar(float_endRadiusVar,)", "contents": "setEndRadiusVar(${1:float_endRadiusVar})" }
,
		{ "trigger": "CCParticleExplosion_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleExplosion_getEmitterMode()", "contents": "getEmitterMode()" }
,
		{ "trigger": "CCParticleExplosion_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCParticleExplosion_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCParticleExplosion_postStep()", "contents": "postStep()" }
,
		{ "trigger": "CCParticleExplosion_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCParticleExplosion_setBlendAdditive(bool_value,)", "contents": "setBlendAdditive(${1:bool_value})" }
,
		{ "trigger": "CCParticleExplosion_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleExplosion_setEndSpin(float_var,)", "contents": "setEndSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleExplosion_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCParticleExplosion_setBatchNode(CCParticleBatchNode*_batchNode,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_batchNode})" }
,
		{ "trigger": "CCParticleExplosion_getRadialAccel()", "contents": "getRadialAccel()" }
,
		{ "trigger": "CCParticleExplosion_getStartSize()", "contents": "getStartSize()" }
,
		{ "trigger": "CCParticleExplosion_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCParticleExplosion_getStartSizeVar()", "contents": "getStartSizeVar()" }
,
		{ "trigger": "CCParticleExplosion_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleExplosion_setGravity(const_CCPoint&_g,)", "contents": "setGravity(${1:const_CCPoint&_g})" }
,
		{ "trigger": "CCParticleExplosion_getSourcePosition()", "contents": "getSourcePosition()" }
,
		{ "trigger": "CCParticleExplosion_setRotatePerSecond(float_degrees,)", "contents": "setRotatePerSecond(${1:float_degrees})" }
,
		{ "trigger": "CCParticleExplosion_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCParticleExplosion_getTangentialAccelVar()", "contents": "getTangentialAccelVar()" }
,
		{ "trigger": "CCParticleExplosion_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleExplosion_getEndSpinVar()", "contents": "getEndSpinVar()" }
,
		{ "trigger": "CCParticleExplosion_setAutoRemoveOnFinish(bool_var,)", "contents": "setAutoRemoveOnFinish(${1:bool_var})" }
,
		{ "trigger": "CCParticleExplosion_setPosVar(CCPoint_pos,)", "contents": "setPosVar(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleExplosion_setEmissionRate(float_rate,)", "contents": "setEmissionRate(${1:float_rate})" }
,
		{ "trigger": "CCParticleExplosion_getEndColorVar()", "contents": "getEndColorVar()" }
,
		{ "trigger": "CCParticleExplosion_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleExplosion_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCParticleExplosion_getRadialAccelVar()", "contents": "getRadialAccelVar()" }
,
		{ "trigger": "CCParticleExplosion_getStartRadius()", "contents": "getStartRadius()" }
,
		{ "trigger": "CCParticleExplosion_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleExplosion_setStartColorVar(const_ccColor4F_var,)", "contents": "setStartColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleExplosion_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCParticleExplosion_initWithFile(const_char*_plistFile,)", "contents": "initWithFile(${1:const_char*_plistFile})" }
,
		{ "trigger": "CCParticleExplosion_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCParticleExplosion_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCParticleExplosion_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCParticleExplosion_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCParticleExplosion_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCParticleExplosion_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCParticleExplosion_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleExplosion_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCParticleExplosion_getEndSize()", "contents": "getEndSize()" }
,
		{ "trigger": "CCParticleExplosion_setSourcePosition(CCPoint_pos,)", "contents": "setSourcePosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleExplosion_initParticle(tCCParticle*_particle,)", "contents": "initParticle(${1:tCCParticle*_particle})" }
,
		{ "trigger": "CCParticleExplosion_isActive()", "contents": "isActive()" }
,
		{ "trigger": "CCParticleExplosion_getSpeedVar()", "contents": "getSpeedVar()" }
,
		{ "trigger": "CCParticleExplosion_updateQuadWithParticle(tCCParticle*_particle,const_CCPoint&_newPosition,)", "contents": "updateQuadWithParticle(${1:tCCParticle*_particle},${2:const_CCPoint&_newPosition})" }
,
		{ "trigger": "CCParticleExplosion_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCParticleExplosion_getEndColor()", "contents": "getEndColor()" }
,
		{ "trigger": "CCParticleExplosion_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleExplosion_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCParticleExplosion_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCParticleExplosion_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCParticleExplosion_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCParticleExplosion_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCParticleExplosion_setStartSizeVar(float_size,)", "contents": "setStartSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleExplosion_setStartSpin(float_var,)", "contents": "setStartSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleExplosion_getLife()", "contents": "getLife()" }
,
		{ "trigger": "CCParticleExplosion_setBlendFunc(ccBlendFunc_var,)", "contents": "setBlendFunc(${1:ccBlendFunc_var})" }
,
		{ "trigger": "CCParticleExplosion_getAngle()", "contents": "getAngle()" }
,
		{ "trigger": "CCParticleExplosion_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCParticleExplosion_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCParticleExplosion_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleExplosion_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCParticleExplosion_getTangentialAccel()", "contents": "getTangentialAccel()" }
,
		{ "trigger": "CCParticleExplosion_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCParticleExplosion_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCParticleExplosion_setTexture(CCTexture2D*_var,)", "contents": "setTexture(${1:CCTexture2D*_var})" }
,
		{ "trigger": "CCParticleExplosion_getGravity()", "contents": "getGravity()" }
,
		{ "trigger": "CCParticleExplosion_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "CCParticleExplosion_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCParticleExplosion_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleExplosion_setScale(float_s,)", "contents": "setScale(${1:float_s})" }
,
		{ "trigger": "CCParticleExplosion_draw()", "contents": "draw()" }
,
		{ "trigger": "CCParticleExplosion_setEndSpinVar(float_var,)", "contents": "setEndSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleExplosion_setSpeed(float_speed,)", "contents": "setSpeed(${1:float_speed})" }
,
		{ "trigger": "CCParticleExplosion_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCParticleExplosion_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCParticleExplosion_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCParticleExplosion_setStartSize(float_size,)", "contents": "setStartSize(${1:float_size})" }
,
		{ "trigger": "CCParticleExplosion_getStartRadiusVar()", "contents": "getStartRadiusVar()" }
,
		{ "trigger": "CCParticleExplosion_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleExplosion_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCParticleExplosion_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCParticleExplosion_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCParticleExplosion_getSpeed()", "contents": "getSpeed()" }
,
		{ "trigger": "CCParticleExplosion_setTotalParticles(unsigned_int_tp,)", "contents": "setTotalParticles(${1:unsigned_int_tp})" }
,
		{ "trigger": "CCParticleExplosion_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCParticleExplosion_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCParticleExplosion_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCParticleExplosion_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCParticleExplosion_setEmitterMode(int_mode,)", "contents": "setEmitterMode(${1:int_mode})" }
,
		{ "trigger": "CCParticleExplosion_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCParticleExplosion_getEndRadiusVar()", "contents": "getEndRadiusVar()" }
,
		{ "trigger": "CCParticleExplosion_getParticleCount()", "contents": "getParticleCount()" }
,
		{ "trigger": "CCParticleExplosion_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCParticleExplosion_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCParticleExplosion_getEndSizeVar()", "contents": "getEndSizeVar()" }
,
		{ "trigger": "CCParticleExplosion_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleExplosion_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCParticleExplosion_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCParticleExplosion_setTangentialAccelVar(float_t,)", "contents": "setTangentialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleExplosion_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCParticleExplosion_setSpeedVar(float_speed,)", "contents": "setSpeedVar(${1:float_speed})" }
,
		{ "trigger": "CCParticleExplosion_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCParticleExplosion_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCParticleExplosion_setEndSizeVar(float_size,)", "contents": "setEndSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleExplosion_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCParticleExplosion_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCParticleExplosion_setPositionType(tCCPositionType_type,)", "contents": "setPositionType(${1:tCCPositionType_type})" }
,
		{ "trigger": "CCParticleExplosion_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCParticleExplosion_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleExplosion_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCParticleExplosion_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCParticleExplosion_getBatchNode()", "contents": "getBatchNode()" }
,
		{ "trigger": "CCParticleExplosion_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleExplosion_initWithTotalParticles(unsigned_int_number,)", "contents": "initWithTotalParticles(${1:unsigned_int_number})" }
,
		{ "trigger": "CCParticleExplosion_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleExplosion_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCParticleExplosion_setDuration(float_d,)", "contents": "setDuration(${1:float_d})" }
,
		{ "trigger": "CCParticleExplosion_setRadialAccel(float_t,)", "contents": "setRadialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleExplosion_resetSystem()", "contents": "resetSystem()" }
,
		{ "trigger": "CCParticleExplosion_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCParticleExplosion_setStartColor(const_ccColor4F_var,)", "contents": "setStartColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleExplosion_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCParticleExplosion_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCParticleExplosion_copy()", "contents": "copy()" }
,
		{ "trigger": "CCParticleExplosion_setEndSize(float_size,)", "contents": "setEndSize(${1:float_size})" }
,
		{ "trigger": "CCParticleExplosion_setAngleVar(float_angle,)", "contents": "setAngleVar(${1:float_angle})" }
,
		{ "trigger": "CCParticleExplosion_getTotalParticles()", "contents": "getTotalParticles()" }
,
		{ "trigger": "CCParticleExplosion_description()", "contents": "description()" }
,
		{ "trigger": "CCParticleExplosion_addParticle()", "contents": "addParticle()" }
,
		{ "trigger": "CCParticleExplosion_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleExplosion_setRadialAccelVar(float_t,)", "contents": "setRadialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleExplosion_setLifeVar(float_lifeVar,)", "contents": "setLifeVar(${1:float_lifeVar})" }
,
		{ "trigger": "CCParticleExplosion_setEndRadius(float_endRadius,)", "contents": "setEndRadius(${1:float_endRadius})" }
,
		{ "trigger": "CCParticleExplosion_getEndSpin()", "contents": "getEndSpin()" }
,
		{ "trigger": "CCParticleExplosion_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCParticleExplosion_setAngle(float_angle,)", "contents": "setAngle(${1:float_angle})" }
,
		{ "trigger": "CCParticleExplosion_retain()", "contents": "retain()" }
,
		{ "trigger": "CCParticleExplosion_release()", "contents": "release()" }
,
		{ "trigger": "CCParticleExplosion_getRotatePerSecondVar()", "contents": "getRotatePerSecondVar()" }
,
		{ "trigger": "CCParticleExplosion_setLife(float_life,)", "contents": "setLife(${1:float_life})" }
,
		{ "trigger": "CCParticleExplosion_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleExplosion_stopSystem()", "contents": "stopSystem()" }
,
		{ "trigger": "CCParticleExplosion_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCParticleExplosion_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCParticleExplosion_getLifeVar()", "contents": "getLifeVar()" }
,
		{ "trigger": "CCParticleExplosion_setTexture(CCTexture2D*_texture,)", "contents": "setTexture(${1:CCTexture2D*_texture})" }
,
		{ "trigger": "CCParticleExplosion_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCParticleExplosion_setEndColorVar(const_ccColor4F_var,)", "contents": "setEndColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleExplosion_getStartColorVar()", "contents": "getStartColorVar()" }
,
		{ "trigger": "CCParticleExplosion_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCParticleExplosion_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCParticleExplosion_create()", "contents": "CCParticleExplosion:create()" }
,

		{ "trigger": "CCActionInterval_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCActionInterval_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCActionInterval_retain()", "contents": "retain()" }
,
		{ "trigger": "CCActionInterval_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCActionInterval_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCActionInterval_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCActionInterval_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCActionInterval_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCActionInterval_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCActionInterval_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCActionInterval_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCActionInterval_copy()", "contents": "copy()" }
,
		{ "trigger": "CCActionInterval_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCActionInterval_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCActionInterval_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCActionInterval_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCActionInterval_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCActionInterval_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCActionInterval_release()", "contents": "release()" }
,

		{ "trigger": "CCString_floatValue()", "contents": "floatValue()" }
,
		{ "trigger": "CCString_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCString_getCString()", "contents": "getCString()" }
,
		{ "trigger": "CCString_compare(const_char*_str,)", "contents": "compare(${1:const_char*_str})" }
,
		{ "trigger": "CCString_intValue()", "contents": "intValue()" }
,
		{ "trigger": "CCString_doubleValue()", "contents": "doubleValue()" }
,
		{ "trigger": "CCString_uintValue()", "contents": "uintValue()" }
,
		{ "trigger": "CCString_copy()", "contents": "copy()" }
,
		{ "trigger": "CCString_retain()", "contents": "retain()" }
,
		{ "trigger": "CCString_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCString_release()", "contents": "release()" }
,
		{ "trigger": "CCString_boolValue()", "contents": "boolValue()" }
,
		{ "trigger": "CCString_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCString_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCString_length()", "contents": "length()" }
,
		{ "trigger": "CCString_createWithContentsOfFile(const_char*_pszFileName,)", "contents": "CCString:createWithContentsOfFile(${1:const_char*_pszFileName})" }
,
		{ "trigger": "CCString_createWithData(unsigned_char*_pData,unsigned_long_nLen,)", "contents": "CCString:createWithData(${1:unsigned_char*_pData},${2:unsigned_long_nLen})" }
,
		{ "trigger": "CCString_create(const_char*_pStr,)", "contents": "CCString:create(${1:const_char*_pStr})" }
,

		{ "trigger": "CCMoveTo_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCMoveTo_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCMoveTo_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCMoveTo_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCMoveTo_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCMoveTo_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCMoveTo_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCMoveTo_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCMoveTo_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCMoveTo_retain()", "contents": "retain()" }
,
		{ "trigger": "CCMoveTo_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCMoveTo_copy()", "contents": "copy()" }
,
		{ "trigger": "CCMoveTo_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCMoveTo_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCMoveTo_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCMoveTo_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCMoveTo_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCMoveTo_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCMoveTo_release()", "contents": "release()" }
,
		{ "trigger": "CCMoveTo_create(float_duration,CCPoint_position,)", "contents": "CCMoveTo:create(${1:float_duration},${2:CCPoint_position})" }
,

		{ "trigger": "CCParticleBatchNode_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCParticleBatchNode_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleBatchNode_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCParticleBatchNode_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCParticleBatchNode_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCParticleBatchNode_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCParticleBatchNode_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleBatchNode_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCParticleBatchNode_transform()", "contents": "transform()" }
,
		{ "trigger": "CCParticleBatchNode_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCParticleBatchNode_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCParticleBatchNode_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCParticleBatchNode_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleBatchNode_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCParticleBatchNode_disableParticle(unsigned_int_particleIndex,)", "contents": "disableParticle(${1:unsigned_int_particleIndex})" }
,
		{ "trigger": "CCParticleBatchNode_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleBatchNode_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCParticleBatchNode_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCParticleBatchNode_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCParticleBatchNode_setTexture(CCTexture2D_*texture,)", "contents": "setTexture(${1:CCTexture2D_*texture})" }
,
		{ "trigger": "CCParticleBatchNode_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleBatchNode_draw()", "contents": "draw()" }
,
		{ "trigger": "CCParticleBatchNode_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCParticleBatchNode_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCParticleBatchNode_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCParticleBatchNode_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCParticleBatchNode_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCParticleBatchNode_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCParticleBatchNode_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCParticleBatchNode_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleBatchNode_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCParticleBatchNode_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCParticleBatchNode_removeChildAtIndex(unsigned_int_index,bool_doCleanup,)", "contents": "removeChildAtIndex(${1:unsigned_int_index},${2:bool_doCleanup})" }
,
		{ "trigger": "CCParticleBatchNode_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCParticleBatchNode_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCParticleBatchNode_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCParticleBatchNode_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCParticleBatchNode_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCParticleBatchNode_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCParticleBatchNode_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCParticleBatchNode_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCParticleBatchNode_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCParticleBatchNode_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCParticleBatchNode_visit()", "contents": "visit()" }
,
		{ "trigger": "CCParticleBatchNode_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleBatchNode_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCParticleBatchNode_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCParticleBatchNode_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCParticleBatchNode_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCParticleBatchNode_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleBatchNode_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCParticleBatchNode_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCParticleBatchNode_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCParticleBatchNode_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCParticleBatchNode_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCParticleBatchNode_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCParticleBatchNode_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCParticleBatchNode_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleBatchNode_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCParticleBatchNode_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCParticleBatchNode_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCParticleBatchNode_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleBatchNode_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCParticleBatchNode_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleBatchNode_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCParticleBatchNode_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleBatchNode_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCParticleBatchNode_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCParticleBatchNode_removeAllChildrenWithCleanup(bool_doCleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_doCleanup})" }
,
		{ "trigger": "CCParticleBatchNode_copy()", "contents": "copy()" }
,
		{ "trigger": "CCParticleBatchNode_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleBatchNode_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCParticleBatchNode_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleBatchNode_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCParticleBatchNode_description()", "contents": "description()" }
,
		{ "trigger": "CCParticleBatchNode_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleBatchNode_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleBatchNode_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleBatchNode_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCParticleBatchNode_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleBatchNode_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCParticleBatchNode_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCParticleBatchNode_retain()", "contents": "retain()" }
,
		{ "trigger": "CCParticleBatchNode_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCParticleBatchNode_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCParticleBatchNode_release()", "contents": "release()" }
,
		{ "trigger": "CCParticleBatchNode_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCParticleBatchNode_setBlendFunc(ccBlendFunc_blendFunc,)", "contents": "setBlendFunc(${1:ccBlendFunc_blendFunc})" }
,
		{ "trigger": "CCParticleBatchNode_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCParticleBatchNode_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCParticleBatchNode_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleBatchNode_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCParticleBatchNode_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCParticleBatchNode_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCParticleBatchNode_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCParticleBatchNode_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCParticleBatchNode_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCParticleBatchNode_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCParticleBatchNode_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleBatchNode_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCParticleBatchNode_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCParticleBatchNode_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCParticleBatchNode_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCParticleBatchNode_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCParticleBatchNode_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCParticleBatchNode_insertChild(CCParticleSystem*_pSystem,unsigned_int_index,)", "contents": "insertChild(${1:CCParticleSystem*_pSystem},${2:unsigned_int_index})" }
,
		{ "trigger": "CCParticleBatchNode_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCParticleBatchNode_create(const_char*_fileImage,unsigned_int_capacity_=_kCCParticleDefaultCapacity,)", "contents": "CCParticleBatchNode:create(${1:const_char*_fileImage},${2:unsigned_int_capacity_=_kCCParticleDefaultCapacity})" }
,
		{ "trigger": "CCParticleBatchNode_createWithTexture(CCTexture2D_*tex,unsigned_int_capacity_=_kCCParticleDefaultCapacity,)", "contents": "CCParticleBatchNode:createWithTexture(${1:CCTexture2D_*tex},${2:unsigned_int_capacity_=_kCCParticleDefaultCapacity})" }
,

		{ "trigger": "CCSet_removeAllObjects()", "contents": "removeAllObjects()" }
,
		{ "trigger": "CCSet_retain()", "contents": "retain()" }
,
		{ "trigger": "CCSet_containsObject(CCObject_*pObject,)", "contents": "containsObject(${1:CCObject_*pObject})" }
,
		{ "trigger": "CCSet_anyObject()", "contents": "anyObject()" }
,
		{ "trigger": "CCSet_copy()", "contents": "copy()" }
,
		{ "trigger": "CCSet_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCSet_removeObject(CCObject_*pObject,)", "contents": "removeObject(${1:CCObject_*pObject})" }
,
		{ "trigger": "CCSet_release()", "contents": "release()" }
,
		{ "trigger": "CCSet_addObject(CCObject_*pObject,)", "contents": "addObject(${1:CCObject_*pObject})" }
,
		{ "trigger": "CCSet_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCSet_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCSet_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCSet_count()", "contents": "count()" }
,

		{ "trigger": "CCTransitionProgressInOut_create(float_t,CCScene*_scene,)", "contents": "CCTransitionProgressInOut:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCShuffleTiles_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCShuffleTiles_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCShuffleTiles_tile(CCPoint_pos,)", "contents": "tile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCShuffleTiles_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCShuffleTiles_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCShuffleTiles_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCShuffleTiles_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCShuffleTiles_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCShuffleTiles_retain()", "contents": "retain()" }
,
		{ "trigger": "CCShuffleTiles_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCShuffleTiles_release()", "contents": "release()" }
,
		{ "trigger": "CCShuffleTiles_setTile(CCPoint_pos,ccQuad3_coords,)", "contents": "setTile(${1:CCPoint_pos},${2:ccQuad3_coords})" }
,
		{ "trigger": "CCShuffleTiles_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCShuffleTiles_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCShuffleTiles_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCShuffleTiles_originalTile(CCPoint_pos,)", "contents": "originalTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCShuffleTiles_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCShuffleTiles_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCShuffleTiles_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCShuffleTiles_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCShuffleTiles_shuffle(unsigned_int_*pArray,int_nLen,)", "contents": "shuffle(${1:unsigned_int_*pArray},${2:int_nLen})" }
,
		{ "trigger": "CCShuffleTiles_getDelta(CCSize_pos,)", "contents": "getDelta(${1:CCSize_pos})" }
,
		{ "trigger": "CCShuffleTiles_copy()", "contents": "copy()" }
,
		{ "trigger": "CCShuffleTiles_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCShuffleTiles_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCShuffleTiles_placeTile(CCPoint_pos,Tile_*t,)", "contents": "placeTile(${1:CCPoint_pos},${2:Tile_*t})" }
,
		{ "trigger": "CCShuffleTiles_create(float_duration,CCSize_gridSize,unsigned_int_seed,)", "contents": "CCShuffleTiles:create(${1:float_duration},${2:CCSize_gridSize},${3:unsigned_int_seed})" }
,

		{ "trigger": "CCTransitionMoveInT_create(float_t,CCScene*_scene,)", "contents": "CCTransitionMoveInT:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCTransitionMoveInR_create(float_t,CCScene*_scene,)", "contents": "CCTransitionMoveInR:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCObject_retain()", "contents": "retain()" }
,
		{ "trigger": "CCObject_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCObject_release()", "contents": "release()" }
,
		{ "trigger": "CCObject_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCObject_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCObject_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCObject_copy()", "contents": "copy()" }
,

		{ "trigger": "CCEaseElasticIn_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseElasticIn_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseElasticIn_setPeriod(float_fPeriod,)", "contents": "setPeriod(${1:float_fPeriod})" }
,
		{ "trigger": "CCEaseElasticIn_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseElasticIn_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseElasticIn_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseElasticIn_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseElasticIn_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseElasticIn_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseElasticIn_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseElasticIn_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseElasticIn_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseElasticIn_getPeriod()", "contents": "getPeriod()" }
,
		{ "trigger": "CCEaseElasticIn_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseElasticIn_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseElasticIn_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseElasticIn_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseElasticIn_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseElasticIn_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseElasticIn_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseElasticIn_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseElasticIn_create(CCActionInterval_*pAction,float_fPeriod_=_0.3,)", "contents": "CCEaseElasticIn:create(${1:CCActionInterval_*pAction},${2:float_fPeriod_=_0.3})" }
,

		{ "trigger": "CCTransitionRotoZoom_create(float_t,CCScene*_scene,)", "contents": "CCTransitionRotoZoom:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCLabelBMFont_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCLabelBMFont_setOpacityModifyRGB(bool_isOpacityModifyRGB,)", "contents": "setOpacityModifyRGB(${1:bool_isOpacityModifyRGB})" }
,
		{ "trigger": "CCLabelBMFont_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCLabelBMFont_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCLabelBMFont_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCLabelBMFont_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCLabelBMFont_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCLabelBMFont_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCLabelBMFont_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCLabelBMFont_transform()", "contents": "transform()" }
,
		{ "trigger": "CCLabelBMFont_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCLabelBMFont_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCLabelBMFont_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCLabelBMFont_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCLabelBMFont_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCLabelBMFont_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCLabelBMFont_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCLabelBMFont_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCLabelBMFont_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCLabelBMFont_draw()", "contents": "draw()" }
,
		{ "trigger": "CCLabelBMFont_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCLabelBMFont_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCLabelBMFont_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCLabelBMFont_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCLabelBMFont_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCLabelBMFont_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCLabelBMFont_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCLabelBMFont_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCLabelBMFont_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCLabelBMFont_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCLabelBMFont_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCLabelBMFont_setScaleY(float_scaleY,)", "contents": "setScaleY(${1:float_scaleY})" }
,
		{ "trigger": "CCLabelBMFont_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCLabelBMFont_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCLabelBMFont_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCLabelBMFont_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCLabelBMFont_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCLabelBMFont_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCLabelBMFont_setString(const_char_*label,bool_fromUpdate,)", "contents": "setString(${1:const_char_*label},${2:bool_fromUpdate})" }
,
		{ "trigger": "CCLabelBMFont_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCLabelBMFont_getFntFile()", "contents": "getFntFile()" }
,
		{ "trigger": "CCLabelBMFont_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCLabelBMFont_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCLabelBMFont_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCLabelBMFont_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCLabelBMFont_visit()", "contents": "visit()" }
,
		{ "trigger": "CCLabelBMFont_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCLabelBMFont_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCLabelBMFont_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCLabelBMFont_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCLabelBMFont_setAlignment(CCTextAlignment_alignment,)", "contents": "setAlignment(${1:CCTextAlignment_alignment})" }
,
		{ "trigger": "CCLabelBMFont_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCLabelBMFont_setAnchorPoint(const_CCPoint_&_var,)", "contents": "setAnchorPoint(${1:const_CCPoint_&_var})" }
,
		{ "trigger": "CCLabelBMFont_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCLabelBMFont_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCLabelBMFont_setScaleX(float_scaleX,)", "contents": "setScaleX(${1:float_scaleX})" }
,
		{ "trigger": "CCLabelBMFont_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCLabelBMFont_getString()", "contents": "getString()" }
,
		{ "trigger": "CCLabelBMFont_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCLabelBMFont_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCLabelBMFont_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCLabelBMFont_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCLabelBMFont_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCLabelBMFont_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCLabelBMFont_setFntFile(const_char*_fntFile,)", "contents": "setFntFile(${1:const_char*_fntFile})" }
,
		{ "trigger": "CCLabelBMFont_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCLabelBMFont_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCLabelBMFont_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCLabelBMFont_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCLabelBMFont_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCLabelBMFont_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCLabelBMFont_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCLabelBMFont_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCLabelBMFont_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCLabelBMFont_copy()", "contents": "copy()" }
,
		{ "trigger": "CCLabelBMFont_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCLabelBMFont_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCLabelBMFont_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCLabelBMFont_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCLabelBMFont_setCString(const_char_*label,)", "contents": "setCString(${1:const_char_*label})" }
,
		{ "trigger": "CCLabelBMFont_description()", "contents": "description()" }
,
		{ "trigger": "CCLabelBMFont_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCLabelBMFont_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCLabelBMFont_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCLabelBMFont_setWidth(float_width,)", "contents": "setWidth(${1:float_width})" }
,
		{ "trigger": "CCLabelBMFont_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCLabelBMFont_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCLabelBMFont_setString(const_char_*label,)", "contents": "setString(${1:const_char_*label})" }
,
		{ "trigger": "CCLabelBMFont_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCLabelBMFont_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCLabelBMFont_retain()", "contents": "retain()" }
,
		{ "trigger": "CCLabelBMFont_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCLabelBMFont_release()", "contents": "release()" }
,
		{ "trigger": "CCLabelBMFont_setLineBreakWithoutSpace(bool_breakWithoutSpace,)", "contents": "setLineBreakWithoutSpace(${1:bool_breakWithoutSpace})" }
,
		{ "trigger": "CCLabelBMFont_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCLabelBMFont_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCLabelBMFont_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCLabelBMFont_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCLabelBMFont_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCLabelBMFont_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCLabelBMFont_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCLabelBMFont_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCLabelBMFont_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCLabelBMFont_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCLabelBMFont_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCLabelBMFont_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCLabelBMFont_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCLabelBMFont_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCLabelBMFont_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCLabelBMFont_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCLabelBMFont_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCLabelBMFont_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCLabelBMFont_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCLabelBMFont_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCLabelBMFont_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCLabelBMFont_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCLabelBMFont_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCLabelBMFont_purgeCachedData()", "contents": "CCLabelBMFont:purgeCachedData()" }
,
		{ "trigger": "CCLabelBMFont_create()", "contents": "CCLabelBMFont:create()" }
,
		{ "trigger": "CCLabelBMFont_create(const_char_*str,const_char_*fntFile,float_width_=_kCCLabelAutomaticWidth,CCTextAlignment_alignment_=_kCCTextAlignmentLeft,CCPoint_imageOffset_=_CCPointMake(0,0,)", "contents": "CCLabelBMFont:create(${1:const_char_*str},${2:const_char_*fntFile},${3:float_width_=_kCCLabelAutomaticWidth},${4:CCTextAlignment_alignment_=_kCCTextAlignmentLeft},${5:CCPoint_imageOffset_=_CCPointMake(0},${6:0})" }
,

		{ "trigger": "CCRect_intersectsRect(const_CCRect_&_rect,)", "contents": "intersectsRect(${1:const_CCRect_&_rect})" }
,
		{ "trigger": "CCRect_getMaxY()", "contents": "getMaxY()" }
,
		{ "trigger": "CCRect_getMaxX()", "contents": "getMaxX()" }
,
		{ "trigger": "CCRect_containsPoint(const_CCPoint_&_point,)", "contents": "containsPoint(${1:const_CCPoint_&_point})" }
,
		{ "trigger": "CCRect_getMidY()", "contents": "getMidY()" }
,
		{ "trigger": "CCRect_getMidX()", "contents": "getMidX()" }
,
		{ "trigger": "CCRect_equals(const_CCRect_&_rect,)", "contents": "equals(${1:const_CCRect_&_rect})" }
,
		{ "trigger": "CCRect_getMinY()", "contents": "getMinY()" }
,
		{ "trigger": "CCRect_getMinX()", "contents": "getMinX()" }
,



		{ "trigger": "CCActionEase_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCActionEase_retain()", "contents": "retain()" }
,
		{ "trigger": "CCActionEase_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCActionEase_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCActionEase_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCActionEase_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCActionEase_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCActionEase_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCActionEase_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCActionEase_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCActionEase_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCActionEase_copy()", "contents": "copy()" }
,
		{ "trigger": "CCActionEase_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCActionEase_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCActionEase_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCActionEase_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCActionEase_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCActionEase_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCActionEase_release()", "contents": "release()" }
,
		{ "trigger": "CCActionEase_create(CCActionInterval_*pAction,)", "contents": "CCActionEase:create(${1:CCActionInterval_*pAction})" }
,

		{ "trigger": "CCCamera_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCCamera_copy()", "contents": "copy()" }
,
		{ "trigger": "CCCamera_setDirty(bool_bValue,)", "contents": "setDirty(${1:bool_bValue})" }
,
		{ "trigger": "CCCamera_getCenterXYZ(float_*pCenterX,float_*pCenterY,float_*pCenterZ,)", "contents": "getCenterXYZ(${1:float_*pCenterX},${2:float_*pCenterY},${3:float_*pCenterZ})" }
,
		{ "trigger": "CCCamera_init()", "contents": "init()" }
,
		{ "trigger": "CCCamera_setUpXYZ(float_fUpX,float_fUpY,float_fUpZ,)", "contents": "setUpXYZ(${1:float_fUpX},${2:float_fUpY},${3:float_fUpZ})" }
,
		{ "trigger": "CCCamera_isDirty()", "contents": "isDirty()" }
,
		{ "trigger": "CCCamera_getEyeXYZ(float_*pEyeX,float_*pEyeY,float_*pEyeZ,)", "contents": "getEyeXYZ(${1:float_*pEyeX},${2:float_*pEyeY},${3:float_*pEyeZ})" }
,
		{ "trigger": "CCCamera_retain()", "contents": "retain()" }
,
		{ "trigger": "CCCamera_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCCamera_setCenterXYZ(float_fCenterX,float_fCenterY,float_fCenterZ,)", "contents": "setCenterXYZ(${1:float_fCenterX},${2:float_fCenterY},${3:float_fCenterZ})" }
,
		{ "trigger": "CCCamera_release()", "contents": "release()" }
,
		{ "trigger": "CCCamera_restore()", "contents": "restore()" }
,
		{ "trigger": "CCCamera_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCCamera_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCCamera_getUpXYZ(float_*pUpX,float_*pUpY,float_*pUpZ,)", "contents": "getUpXYZ(${1:float_*pUpX},${2:float_*pUpY},${3:float_*pUpZ})" }
,
		{ "trigger": "CCCamera_description()", "contents": "description()" }
,
		{ "trigger": "CCCamera_setEyeXYZ(float_fEyeX,float_fEyeY,float_fEyeZ,)", "contents": "setEyeXYZ(${1:float_fEyeX},${2:float_fEyeY},${3:float_fEyeZ})" }
,
		{ "trigger": "CCCamera_locate()", "contents": "locate()" }
,
		{ "trigger": "CCCamera_getZEye()", "contents": "CCCamera:getZEye()" }
,

		{ "trigger": "CCMenuItem_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCMenuItem_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCMenuItem_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCMenuItem_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCMenuItem_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCMenuItem_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCMenuItem_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCMenuItem_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCMenuItem_transform()", "contents": "transform()" }
,
		{ "trigger": "CCMenuItem_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCMenuItem_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCMenuItem_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCMenuItem_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCMenuItem_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCMenuItem_rect()", "contents": "rect()" }
,
		{ "trigger": "CCMenuItem_activate()", "contents": "activate()" }
,
		{ "trigger": "CCMenuItem_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCMenuItem_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCMenuItem_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCMenuItem_draw()", "contents": "draw()" }
,
		{ "trigger": "CCMenuItem_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCMenuItem_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCMenuItem_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCMenuItem_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCMenuItem_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCMenuItem_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCMenuItem_setEnabled(bool_enabled,)", "contents": "setEnabled(${1:bool_enabled})" }
,
		{ "trigger": "CCMenuItem_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCMenuItem_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCMenuItem_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCMenuItem_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCMenuItem_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCMenuItem_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCMenuItem_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCMenuItem_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCMenuItem_retain()", "contents": "retain()" }
,
		{ "trigger": "CCMenuItem_isSelected()", "contents": "isSelected()" }
,
		{ "trigger": "CCMenuItem_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCMenuItem_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCMenuItem_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCMenuItem_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCMenuItem_visit()", "contents": "visit()" }
,
		{ "trigger": "CCMenuItem_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCMenuItem_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCMenuItem_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCMenuItem_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCMenuItem_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCMenuItem_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCMenuItem_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCMenuItem_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCMenuItem_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCMenuItem_selected()", "contents": "selected()" }
,
		{ "trigger": "CCMenuItem_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCMenuItem_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCMenuItem_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCMenuItem_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItem_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCMenuItem_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCMenuItem_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCMenuItem_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItem_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCMenuItem_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCMenuItem_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCMenuItem_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCMenuItem_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCMenuItem_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCMenuItem_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCMenuItem_copy()", "contents": "copy()" }
,
		{ "trigger": "CCMenuItem_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCMenuItem_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCMenuItem_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItem_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCMenuItem_description()", "contents": "description()" }
,
		{ "trigger": "CCMenuItem_registerScriptTapHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptTapHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCMenuItem_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCMenuItem_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCMenuItem_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCMenuItem_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "CCMenuItem_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCMenuItem_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCMenuItem_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCMenuItem_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCMenuItem_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCMenuItem_release()", "contents": "release()" }
,
		{ "trigger": "CCMenuItem_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCMenuItem_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCMenuItem_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCMenuItem_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCMenuItem_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCMenuItem_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCMenuItem_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCMenuItem_unselected()", "contents": "unselected()" }
,
		{ "trigger": "CCMenuItem_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCMenuItem_unregisterScriptTapHandler()", "contents": "unregisterScriptTapHandler()" }
,
		{ "trigger": "CCMenuItem_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCMenuItem_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCMenuItem_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCMenuItem_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCMenuItem_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCMenuItem_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCMenuItem_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCMenuItem_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCMenuItem_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCMenuItem_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCMenuItem_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCMenuItem_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCMenuItem_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCMenuItem_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,

		{ "trigger": "CCAccelDeccelAmplitude_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCAccelDeccelAmplitude_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCAccelDeccelAmplitude_retain()", "contents": "retain()" }
,
		{ "trigger": "CCAccelDeccelAmplitude_setRate(float_fRate,)", "contents": "setRate(${1:float_fRate})" }
,
		{ "trigger": "CCAccelDeccelAmplitude_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCAccelDeccelAmplitude_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCAccelDeccelAmplitude_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCAccelDeccelAmplitude_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCAccelDeccelAmplitude_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCAccelDeccelAmplitude_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCAccelDeccelAmplitude_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCAccelDeccelAmplitude_copy()", "contents": "copy()" }
,
		{ "trigger": "CCAccelDeccelAmplitude_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCAccelDeccelAmplitude_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCAccelDeccelAmplitude_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCAccelDeccelAmplitude_getRate()", "contents": "getRate()" }
,
		{ "trigger": "CCAccelDeccelAmplitude_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCAccelDeccelAmplitude_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCAccelDeccelAmplitude_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCAccelDeccelAmplitude_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCAccelDeccelAmplitude_release()", "contents": "release()" }
,
		{ "trigger": "CCAccelDeccelAmplitude_create(CCAction_*pAction,float_duration,)", "contents": "CCAccelDeccelAmplitude:create(${1:CCAction_*pAction},${2:float_duration})" }
,

		{ "trigger": "CCLayerColor_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCLayerColor_setKeypadEnabled(bool_bValue,)", "contents": "setKeypadEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCLayerColor_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCLayerColor_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCLayerColor_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCLayerColor_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCLayerColor_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCLayerColor_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCLayerColor_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCLayerColor_transform()", "contents": "transform()" }
,
		{ "trigger": "CCLayerColor_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCLayerColor_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCLayerColor_isTouchEnabled()", "contents": "isTouchEnabled()" }
,
		{ "trigger": "CCLayerColor_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCLayerColor_changeWidthAndHeight(GLfloat_w_,GLfloat_h,)", "contents": "changeWidthAndHeight(${1:GLfloat_w_},${2:GLfloat_h})" }
,
		{ "trigger": "CCLayerColor_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCLayerColor_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCLayerColor_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCLayerColor_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCLayerColor_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCLayerColor_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCLayerColor_draw()", "contents": "draw()" }
,
		{ "trigger": "CCLayerColor_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCLayerColor_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCLayerColor_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCLayerColor_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCLayerColor_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCLayerColor_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCLayerColor_unregisterScriptAccelerateHandler()", "contents": "unregisterScriptAccelerateHandler()" }
,
		{ "trigger": "CCLayerColor_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCLayerColor_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCLayerColor_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCLayerColor_setBlendFunc(ccBlendFunc_Value,)", "contents": "setBlendFunc(${1:ccBlendFunc_Value})" }
,
		{ "trigger": "CCLayerColor_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCLayerColor_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCLayerColor_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCLayerColor_registerScriptKeypadHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptKeypadHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCLayerColor_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCLayerColor_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCLayerColor_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCLayerColor_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCLayerColor_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCLayerColor_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCLayerColor_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCLayerColor_setColor(ccColor3B_Value,)", "contents": "setColor(${1:ccColor3B_Value})" }
,
		{ "trigger": "CCLayerColor_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCLayerColor_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCLayerColor_unregisterScriptTouchHandler()", "contents": "unregisterScriptTouchHandler()" }
,
		{ "trigger": "CCLayerColor_visit()", "contents": "visit()" }
,
		{ "trigger": "CCLayerColor_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCLayerColor_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCLayerColor_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCLayerColor_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCLayerColor_isKeypadEnabled()", "contents": "isKeypadEnabled()" }
,
		{ "trigger": "CCLayerColor_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCLayerColor_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCLayerColor_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCLayerColor_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCLayerColor_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCLayerColor_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCLayerColor_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCLayerColor_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCLayerColor_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCLayerColor_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCLayerColor_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCLayerColor_setAccelerometerEnabled(bool_bValue,)", "contents": "setAccelerometerEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCLayerColor_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCLayerColor_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCLayerColor_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCLayerColor_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCLayerColor_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCLayerColor_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCLayerColor_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCLayerColor_setContentSize(const_CCSize_&_var,)", "contents": "setContentSize(${1:const_CCSize_&_var})" }
,
		{ "trigger": "CCLayerColor_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCLayerColor_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCLayerColor_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCLayerColor_copy()", "contents": "copy()" }
,
		{ "trigger": "CCLayerColor_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCLayerColor_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCLayerColor_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCLayerColor_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCLayerColor_description()", "contents": "description()" }
,
		{ "trigger": "CCLayerColor_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCLayerColor_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCLayerColor_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCLayerColor_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCLayerColor_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCLayerColor_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCLayerColor_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCLayerColor_setOpacity(GLubyte_var,)", "contents": "setOpacity(${1:GLubyte_var})" }
,
		{ "trigger": "CCLayerColor_retain()", "contents": "retain()" }
,
		{ "trigger": "CCLayerColor_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCLayerColor_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCLayerColor_release()", "contents": "release()" }
,
		{ "trigger": "CCLayerColor_setTouchEnabled(bool_bValue,)", "contents": "setTouchEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCLayerColor_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCLayerColor_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCLayerColor_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCLayerColor_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCLayerColor_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCLayerColor_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCLayerColor_changeHeight(GLfloat_h,)", "contents": "changeHeight(${1:GLfloat_h})" }
,
		{ "trigger": "CCLayerColor_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCLayerColor_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCLayerColor_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCLayerColor_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCLayerColor_isAccelerometerEnabled()", "contents": "isAccelerometerEnabled()" }
,
		{ "trigger": "CCLayerColor_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCLayerColor_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCLayerColor_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCLayerColor_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCLayerColor_registerScriptAccelerateHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptAccelerateHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCLayerColor_changeWidth(GLfloat_w,)", "contents": "changeWidth(${1:GLfloat_w})" }
,
		{ "trigger": "CCLayerColor_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCLayerColor_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCLayerColor_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCLayerColor_registerScriptTouchHandler(LUA_FUNCTION_nHandler,bool_bIsMultiTouches_=_false,int_nPriority_=_0,bool_bSwallowsTouches_=_false,)", "contents": "registerScriptTouchHandler(${1:LUA_FUNCTION_nHandler},${2:bool_bIsMultiTouches_=_false},${3:int_nPriority_=_0},${4:bool_bSwallowsTouches_=_false})" }
,
		{ "trigger": "CCLayerColor_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCLayerColor_unregisterScriptKeypadHandler()", "contents": "unregisterScriptKeypadHandler()" }
,
		{ "trigger": "CCLayerColor_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCLayerColor_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCLayerColor_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCLayerColor_create(ccColor4B_color,GLfloat_width,GLfloat_height,)", "contents": "CCLayerColor:create(${1:ccColor4B_color},${2:GLfloat_width},${3:GLfloat_height})" }
,
		{ "trigger": "CCLayerColor_create(ccColor4B_color,)", "contents": "CCLayerColor:create(${1:ccColor4B_color})" }
,

		{ "trigger": "CCTMXLayer_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCTMXLayer_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTMXLayer_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCTMXLayer_insertChild(CCSprite_*child,unsigned_int_index,)", "contents": "insertChild(${1:CCSprite_*child},${2:unsigned_int_index})" }
,
		{ "trigger": "CCTMXLayer_getTiles()", "contents": "getTiles()" }
,
		{ "trigger": "CCTMXLayer_removeSpriteFromAtlas(CCSprite_*sprite,)", "contents": "removeSpriteFromAtlas(${1:CCSprite_*sprite})" }
,
		{ "trigger": "CCTMXLayer_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCTMXLayer_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCTMXLayer_rebuildIndexInOrder(CCSprite_*parent,unsigned_int_index,)", "contents": "rebuildIndexInOrder(${1:CCSprite_*parent},${2:unsigned_int_index})" }
,
		{ "trigger": "CCTMXLayer_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTMXLayer_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCTMXLayer_transform()", "contents": "transform()" }
,
		{ "trigger": "CCTMXLayer_propertyNamed(const_char_*propertyName,)", "contents": "propertyNamed(${1:const_char_*propertyName})" }
,
		{ "trigger": "CCTMXLayer_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTMXLayer_appendChild(CCSprite_*child,)", "contents": "appendChild(${1:CCSprite_*child})" }
,
		{ "trigger": "CCTMXLayer_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTMXLayer_getTileSet()", "contents": "getTileSet()" }
,
		{ "trigger": "CCTMXLayer_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTMXLayer_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCTMXLayer_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTMXLayer_setTileGID(unsigned_int_gid,const_CCPoint&_tileCoordinate,)", "contents": "setTileGID(${1:unsigned_int_gid},${2:const_CCPoint&_tileCoordinate})" }
,
		{ "trigger": "CCTMXLayer_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCTMXLayer_lowestAtlasIndexInChild(CCSprite_*sprite,)", "contents": "lowestAtlasIndexInChild(${1:CCSprite_*sprite})" }
,
		{ "trigger": "CCTMXLayer_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCTMXLayer_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCTMXLayer_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTMXLayer_draw()", "contents": "draw()" }
,
		{ "trigger": "CCTMXLayer_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCTMXLayer_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCTMXLayer_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCTMXLayer_setTiles(unsigned_int*_pval,)", "contents": "setTiles(${1:unsigned_int*_pval})" }
,
		{ "trigger": "CCTMXLayer_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCTMXLayer_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCTMXLayer_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTMXLayer_highestAtlasIndexInChild(CCSprite_*sprite,)", "contents": "highestAtlasIndexInChild(${1:CCSprite_*sprite})" }
,
		{ "trigger": "CCTMXLayer_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCTMXLayer_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTMXLayer_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCTMXLayer_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCTMXLayer_setupTiles()", "contents": "setupTiles()" }
,
		{ "trigger": "CCTMXLayer_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCTMXLayer_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCTMXLayer_removeChildAtIndex(unsigned_int_index,bool_doCleanup,)", "contents": "removeChildAtIndex(${1:unsigned_int_index},${2:bool_doCleanup})" }
,
		{ "trigger": "CCTMXLayer_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCTMXLayer_getTextureAtlas()", "contents": "getTextureAtlas()" }
,
		{ "trigger": "CCTMXLayer_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCTMXLayer_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCTMXLayer_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCTMXLayer_getLayerOrientation()", "contents": "getLayerOrientation()" }
,
		{ "trigger": "CCTMXLayer_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCTMXLayer_sortAllChildren()", "contents": "sortAllChildren()" }
,
		{ "trigger": "CCTMXLayer_setTextureAtlas(CCTextureAtlas*_textureAtlas,)", "contents": "setTextureAtlas(${1:CCTextureAtlas*_textureAtlas})" }
,
		{ "trigger": "CCTMXLayer_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCTMXLayer_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCTMXLayer_removeTileAt(CCPoint_tileCoordinate,)", "contents": "removeTileAt(${1:CCPoint_tileCoordinate})" }
,
		{ "trigger": "CCTMXLayer_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCTMXLayer_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCTMXLayer_visit()", "contents": "visit()" }
,
		{ "trigger": "CCTMXLayer_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTMXLayer_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCTMXLayer_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCTMXLayer_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCTMXLayer_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCTMXLayer_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTMXLayer_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCTMXLayer_setProperties(CCDictionary*_pval,)", "contents": "setProperties(${1:CCDictionary*_pval})" }
,
		{ "trigger": "CCTMXLayer_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCTMXLayer_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCTMXLayer_setTileSet(CCTMXTilesetInfo*_pval,)", "contents": "setTileSet(${1:CCTMXTilesetInfo*_pval})" }
,
		{ "trigger": "CCTMXLayer_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCTMXLayer_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCTMXLayer_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCTMXLayer_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCTMXLayer_tileAt(CCPoint_tileCoordinate,)", "contents": "tileAt(${1:CCPoint_tileCoordinate})" }
,
		{ "trigger": "CCTMXLayer_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTMXLayer_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTMXLayer_increaseAtlasCapacity()", "contents": "increaseAtlasCapacity()" }
,
		{ "trigger": "CCTMXLayer_getDescendants()", "contents": "getDescendants()" }
,
		{ "trigger": "CCTMXLayer_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTMXLayer_getLayerName()", "contents": "getLayerName()" }
,
		{ "trigger": "CCTMXLayer_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCTMXLayer_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCTMXLayer_setLayerOrientation(unsigned_int_val,)", "contents": "setLayerOrientation(${1:unsigned_int_val})" }
,
		{ "trigger": "CCTMXLayer_setMapTileSize(CCSize_val,)", "contents": "setMapTileSize(${1:CCSize_val})" }
,
		{ "trigger": "CCTMXLayer_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTMXLayer_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCTMXLayer_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTMXLayer_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCTMXLayer_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCTMXLayer_getProperties()", "contents": "getProperties()" }
,
		{ "trigger": "CCTMXLayer_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTMXLayer_setTexture(CCTexture2D_*texture,)", "contents": "setTexture(${1:CCTexture2D_*texture})" }
,
		{ "trigger": "CCTMXLayer_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTMXLayer_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCTMXLayer_setBlendFunc(ccBlendFunc_blendFunc,)", "contents": "setBlendFunc(${1:ccBlendFunc_blendFunc})" }
,
		{ "trigger": "CCTMXLayer_getLayerSize()", "contents": "getLayerSize()" }
,
		{ "trigger": "CCTMXLayer_setLayerName(const_char_*layerName,)", "contents": "setLayerName(${1:const_char_*layerName})" }
,
		{ "trigger": "CCTMXLayer_getMapTileSize()", "contents": "getMapTileSize()" }
,
		{ "trigger": "CCTMXLayer_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCTMXLayer_description()", "contents": "description()" }
,
		{ "trigger": "CCTMXLayer_positionAt(CCPoint_tileCoordinate,)", "contents": "positionAt(${1:CCPoint_tileCoordinate})" }
,
		{ "trigger": "CCTMXLayer_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCTMXLayer_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTMXLayer_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCTMXLayer_reorderBatch(bool_reorder,)", "contents": "reorderBatch(${1:bool_reorder})" }
,
		{ "trigger": "CCTMXLayer_setTileGID(unsigned_int_gid,const_CCPoint&_tileCoordinate,ccTMXTileFlags_flags,)", "contents": "setTileGID(${1:unsigned_int_gid},${2:const_CCPoint&_tileCoordinate},${3:ccTMXTileFlags_flags})" }
,
		{ "trigger": "CCTMXLayer_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTMXLayer_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCTMXLayer_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTMXLayer_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCTMXLayer_tileGIDAt(const_CCPoint&_tileCoordinate,)", "contents": "tileGIDAt(${1:const_CCPoint&_tileCoordinate})" }
,
		{ "trigger": "CCTMXLayer_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTMXLayer_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTMXLayer_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCTMXLayer_release()", "contents": "release()" }
,
		{ "trigger": "CCTMXLayer_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCTMXLayer_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTMXLayer_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCTMXLayer_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCTMXLayer_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCTMXLayer_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCTMXLayer_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTMXLayer_setLayerSize(CCSize_val,)", "contents": "setLayerSize(${1:CCSize_val})" }
,
		{ "trigger": "CCTMXLayer_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCTMXLayer_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCTMXLayer_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCTMXLayer_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCTMXLayer_releaseMap()", "contents": "releaseMap()" }
,
		{ "trigger": "CCTMXLayer_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCTMXLayer_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTMXLayer_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTMXLayer_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCTMXLayer_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCTMXLayer_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCTMXLayer_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCTMXLayer_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCTMXLayer_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCTMXLayer_atlasIndexForChild(CCSprite_*sprite,int_z,)", "contents": "atlasIndexForChild(${1:CCSprite_*sprite},${2:int_z})" }
,
		{ "trigger": "CCTMXLayer_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCTMXLayer_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCTMXLayer_create(CCTMXTilesetInfo_*tilesetInfo,CCTMXLayerInfo_*layerInfo,CCTMXMapInfo_*mapInfo,)", "contents": "CCTMXLayer:create(${1:CCTMXTilesetInfo_*tilesetInfo},${2:CCTMXLayerInfo_*layerInfo},${3:CCTMXMapInfo_*mapInfo})" }
,


		{ "trigger": "CCActionCamera_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCActionCamera_retain()", "contents": "retain()" }
,
		{ "trigger": "CCActionCamera_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCActionCamera_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCActionCamera_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCActionCamera_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCActionCamera_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCActionCamera_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCActionCamera_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCActionCamera_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCActionCamera_startWithTarget(CCNode_*pTarget,)", "contents": "startWithTarget(${1:CCNode_*pTarget})" }
,
		{ "trigger": "CCActionCamera_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCActionCamera_copy()", "contents": "copy()" }
,
		{ "trigger": "CCActionCamera_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCActionCamera_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCActionCamera_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCActionCamera_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCActionCamera_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCActionCamera_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCActionCamera_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCActionCamera_release()", "contents": "release()" }
,

		{ "trigger": "CCShakyTiles3D_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCShakyTiles3D_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCShakyTiles3D_tile(CCPoint_pos,)", "contents": "tile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCShakyTiles3D_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCShakyTiles3D_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCShakyTiles3D_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCShakyTiles3D_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCShakyTiles3D_retain()", "contents": "retain()" }
,
		{ "trigger": "CCShakyTiles3D_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCShakyTiles3D_copy()", "contents": "copy()" }
,
		{ "trigger": "CCShakyTiles3D_setTile(CCPoint_pos,ccQuad3_coords,)", "contents": "setTile(${1:CCPoint_pos},${2:ccQuad3_coords})" }
,
		{ "trigger": "CCShakyTiles3D_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCShakyTiles3D_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCShakyTiles3D_originalTile(CCPoint_pos,)", "contents": "originalTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCShakyTiles3D_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCShakyTiles3D_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCShakyTiles3D_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCShakyTiles3D_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCShakyTiles3D_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCShakyTiles3D_release()", "contents": "release()" }
,
		{ "trigger": "CCShakyTiles3D_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCShakyTiles3D_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCShakyTiles3D_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCShakyTiles3D_create(float_duration,CCSize_gridSize,int_nRange,bool_bShakeZ,)", "contents": "CCShakyTiles3D:create(${1:float_duration},${2:CCSize_gridSize},${3:int_nRange},${4:bool_bShakeZ})" }
,

		{ "trigger": "CCJumpBy_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCJumpBy_retain()", "contents": "retain()" }
,
		{ "trigger": "CCJumpBy_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCJumpBy_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCJumpBy_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCJumpBy_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCJumpBy_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCJumpBy_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCJumpBy_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCJumpBy_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCJumpBy_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCJumpBy_copy()", "contents": "copy()" }
,
		{ "trigger": "CCJumpBy_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCJumpBy_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCJumpBy_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCJumpBy_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCJumpBy_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCJumpBy_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCJumpBy_release()", "contents": "release()" }
,
		{ "trigger": "CCJumpBy_create(float_duration,CCPoint_position,float_height,int_jumps,)", "contents": "CCJumpBy:create(${1:float_duration},${2:CCPoint_position},${3:float_height},${4:int_jumps})" }
,

		{ "trigger": "CCSpriteBatchNode_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCSpriteBatchNode_insertChild(CCSprite_*child,unsigned_int_index,)", "contents": "insertChild(${1:CCSprite_*child},${2:unsigned_int_index})" }
,
		{ "trigger": "CCSpriteBatchNode_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCSpriteBatchNode_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCSpriteBatchNode_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCSpriteBatchNode_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCSpriteBatchNode_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCSpriteBatchNode_rebuildIndexInOrder(CCSprite_*parent,unsigned_int_index,)", "contents": "rebuildIndexInOrder(${1:CCSprite_*parent},${2:unsigned_int_index})" }
,
		{ "trigger": "CCSpriteBatchNode_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCSpriteBatchNode_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCSpriteBatchNode_transform()", "contents": "transform()" }
,
		{ "trigger": "CCSpriteBatchNode_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCSpriteBatchNode_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCSpriteBatchNode_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCSpriteBatchNode_increaseAtlasCapacity()", "contents": "increaseAtlasCapacity()" }
,
		{ "trigger": "CCSpriteBatchNode_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCSpriteBatchNode_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCSpriteBatchNode_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCSpriteBatchNode_atlasIndexForChild(CCSprite_*sprite,int_z,)", "contents": "atlasIndexForChild(${1:CCSprite_*sprite},${2:int_z})" }
,
		{ "trigger": "CCSpriteBatchNode_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCSpriteBatchNode_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCSpriteBatchNode_setTexture(CCTexture2D_*texture,)", "contents": "setTexture(${1:CCTexture2D_*texture})" }
,
		{ "trigger": "CCSpriteBatchNode_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCSpriteBatchNode_draw()", "contents": "draw()" }
,
		{ "trigger": "CCSpriteBatchNode_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCSpriteBatchNode_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCSpriteBatchNode_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCSpriteBatchNode_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCSpriteBatchNode_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCSpriteBatchNode_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCSpriteBatchNode_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCSpriteBatchNode_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCSpriteBatchNode_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCSpriteBatchNode_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCSpriteBatchNode_removeChildAtIndex(unsigned_int_index,bool_doCleanup,)", "contents": "removeChildAtIndex(${1:unsigned_int_index},${2:bool_doCleanup})" }
,
		{ "trigger": "CCSpriteBatchNode_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCSpriteBatchNode_getTextureAtlas()", "contents": "getTextureAtlas()" }
,
		{ "trigger": "CCSpriteBatchNode_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCSpriteBatchNode_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCSpriteBatchNode_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCSpriteBatchNode_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCSpriteBatchNode_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCSpriteBatchNode_sortAllChildren()", "contents": "sortAllChildren()" }
,
		{ "trigger": "CCSpriteBatchNode_setTextureAtlas(CCTextureAtlas*_textureAtlas,)", "contents": "setTextureAtlas(${1:CCTextureAtlas*_textureAtlas})" }
,
		{ "trigger": "CCSpriteBatchNode_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCSpriteBatchNode_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCSpriteBatchNode_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCSpriteBatchNode_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCSpriteBatchNode_visit()", "contents": "visit()" }
,
		{ "trigger": "CCSpriteBatchNode_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCSpriteBatchNode_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCSpriteBatchNode_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCSpriteBatchNode_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCSpriteBatchNode_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCSpriteBatchNode_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCSpriteBatchNode_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCSpriteBatchNode_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCSpriteBatchNode_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCSpriteBatchNode_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCSpriteBatchNode_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCSpriteBatchNode_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCSpriteBatchNode_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCSpriteBatchNode_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCSpriteBatchNode_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCSpriteBatchNode_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCSpriteBatchNode_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCSpriteBatchNode_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCSpriteBatchNode_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCSpriteBatchNode_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCSpriteBatchNode_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCSpriteBatchNode_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCSpriteBatchNode_removeSpriteFromAtlas(CCSprite_*sprite,)", "contents": "removeSpriteFromAtlas(${1:CCSprite_*sprite})" }
,
		{ "trigger": "CCSpriteBatchNode_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCSpriteBatchNode_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCSpriteBatchNode_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCSpriteBatchNode_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCSpriteBatchNode_copy()", "contents": "copy()" }
,
		{ "trigger": "CCSpriteBatchNode_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCSpriteBatchNode_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCSpriteBatchNode_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCSpriteBatchNode_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCSpriteBatchNode_description()", "contents": "description()" }
,
		{ "trigger": "CCSpriteBatchNode_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCSpriteBatchNode_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCSpriteBatchNode_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCSpriteBatchNode_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCSpriteBatchNode_reorderBatch(bool_reorder,)", "contents": "reorderBatch(${1:bool_reorder})" }
,
		{ "trigger": "CCSpriteBatchNode_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCSpriteBatchNode_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCSpriteBatchNode_getDescendants()", "contents": "getDescendants()" }
,
		{ "trigger": "CCSpriteBatchNode_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCSpriteBatchNode_retain()", "contents": "retain()" }
,
		{ "trigger": "CCSpriteBatchNode_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCSpriteBatchNode_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCSpriteBatchNode_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCSpriteBatchNode_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCSpriteBatchNode_appendChild(CCSprite_*child,)", "contents": "appendChild(${1:CCSprite_*child})" }
,
		{ "trigger": "CCSpriteBatchNode_setBlendFunc(ccBlendFunc_blendFunc,)", "contents": "setBlendFunc(${1:ccBlendFunc_blendFunc})" }
,
		{ "trigger": "CCSpriteBatchNode_lowestAtlasIndexInChild(CCSprite_*sprite,)", "contents": "lowestAtlasIndexInChild(${1:CCSprite_*sprite})" }
,
		{ "trigger": "CCSpriteBatchNode_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCSpriteBatchNode_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCSpriteBatchNode_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCSpriteBatchNode_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCSpriteBatchNode_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCSpriteBatchNode_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCSpriteBatchNode_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCSpriteBatchNode_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCSpriteBatchNode_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCSpriteBatchNode_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCSpriteBatchNode_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCSpriteBatchNode_release()", "contents": "release()" }
,
		{ "trigger": "CCSpriteBatchNode_highestAtlasIndexInChild(CCSprite_*sprite,)", "contents": "highestAtlasIndexInChild(${1:CCSprite_*sprite})" }
,
		{ "trigger": "CCSpriteBatchNode_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCSpriteBatchNode_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCSpriteBatchNode_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCSpriteBatchNode_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCSpriteBatchNode_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCSpriteBatchNode_createWithTexture(CCTexture2D*_tex,unsigned_int_capacity,)", "contents": "CCSpriteBatchNode:createWithTexture(${1:CCTexture2D*_tex},${2:unsigned_int_capacity})" }
,
		{ "trigger": "CCSpriteBatchNode_createWithTexture(CCTexture2D_*tex,)", "contents": "CCSpriteBatchNode:createWithTexture(${1:CCTexture2D_*tex})" }
,
		{ "trigger": "CCSpriteBatchNode_create(const_char*_fileImage,)", "contents": "CCSpriteBatchNode:create(${1:const_char*_fileImage})" }
,
		{ "trigger": "CCSpriteBatchNode_create(const_char*_fileImage,unsigned_int_capacity,)", "contents": "CCSpriteBatchNode:create(${1:const_char*_fileImage},${2:unsigned_int_capacity})" }
,

		{ "trigger": "CCEaseBackInOut_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseBackInOut_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseBackInOut_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseBackInOut_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseBackInOut_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseBackInOut_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseBackInOut_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseBackInOut_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseBackInOut_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseBackInOut_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseBackInOut_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseBackInOut_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseBackInOut_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseBackInOut_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseBackInOut_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseBackInOut_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseBackInOut_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseBackInOut_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseBackInOut_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseBackInOut_create(CCActionInterval*_pAction,)", "contents": "CCEaseBackInOut:create(${1:CCActionInterval*_pAction})" }
,

		{ "trigger": "CCEGLView_getFrameSize()", "contents": "getFrameSize()" }
,
		{ "trigger": "CCEGLView_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCEGLView_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCEGLView_getDesignResolutionSize()", "contents": "getDesignResolutionSize()" }
,
		{ "trigger": "CCEGLView_getViewPortRect()", "contents": "getViewPortRect()" }
,
		{ "trigger": "CCEGLView_setDesignResolutionSize(float_width,float_height,ResolutionPolicy_resolutionPolicy,)", "contents": "setDesignResolutionSize(${1:float_width},${2:float_height},${3:ResolutionPolicy_resolutionPolicy})" }
,
		{ "trigger": "CCEGLView_getVisibleOrigin()", "contents": "getVisibleOrigin()" }
,
		{ "trigger": "CCEGLView_setFrameSize(float_width,float_height,)", "contents": "setFrameSize(${1:float_width},${2:float_height})" }
,
		{ "trigger": "CCEGLView_setScissorInPoints(float_x_,float_y_,float_w_,float_h,)", "contents": "setScissorInPoints(${1:float_x_},${2:float_y_},${3:float_w_},${4:float_h})" }
,
		{ "trigger": "CCEGLView_getVisibleSize()", "contents": "getVisibleSize()" }
,
		{ "trigger": "CCEGLView_setViewPortInPoints(float_x_,float_y_,float_w_,float_h,)", "contents": "setViewPortInPoints(${1:float_x_},${2:float_y_},${3:float_w_},${4:float_h})" }
,
		{ "trigger": "CCEGLView_setTouchDelegate(EGLTouchDelegate_*_pDelegate,)", "contents": "setTouchDelegate(${1:EGLTouchDelegate_*_pDelegate})" }
,
		{ "trigger": "CCEGLView_sharedOpenGLView()", "contents": "CCEGLView:sharedOpenGLView()" }
,

		{ "trigger": "CCPageTurn3D_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCPageTurn3D_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCPageTurn3D_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCPageTurn3D_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCPageTurn3D_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCPageTurn3D_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCPageTurn3D_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCPageTurn3D_retain()", "contents": "retain()" }
,
		{ "trigger": "CCPageTurn3D_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCPageTurn3D_release()", "contents": "release()" }
,
		{ "trigger": "CCPageTurn3D_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCPageTurn3D_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCPageTurn3D_originalVertex(const_CCPoint&_pos,)", "contents": "originalVertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCPageTurn3D_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCPageTurn3D_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCPageTurn3D_vertex(const_CCPoint&_pos,)", "contents": "vertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCPageTurn3D_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCPageTurn3D_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCPageTurn3D_setVertex(const_CCPoint&_pos,const_ccVertex3F&_vertex,)", "contents": "setVertex(${1:const_CCPoint&_pos},${2:const_ccVertex3F&_vertex})" }
,
		{ "trigger": "CCPageTurn3D_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCPageTurn3D_copy()", "contents": "copy()" }
,
		{ "trigger": "CCPageTurn3D_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCPageTurn3D_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCPageTurn3D_create(float_duration,CCSize_gridSize,)", "contents": "CCPageTurn3D:create(${1:float_duration},${2:CCSize_gridSize})" }
,

		{ "trigger": "CCNode_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCNode_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCNode_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCNode_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCNode_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCNode_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCNode_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCNode_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCNode_transform()", "contents": "transform()" }
,
		{ "trigger": "CCNode_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCNode_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCNode_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCNode_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCNode_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCNode_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCNode_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCNode_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCNode_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCNode_draw()", "contents": "draw()" }
,
		{ "trigger": "CCNode_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCNode_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCNode_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCNode_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCNode_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCNode_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCNode_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCNode_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCNode_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCNode_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCNode_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCNode_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCNode_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCNode_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCNode_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCNode_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCNode_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCNode_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCNode_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCNode_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCNode_visit()", "contents": "visit()" }
,
		{ "trigger": "CCNode_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCNode_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCNode_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCNode_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCNode_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCNode_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCNode_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCNode_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCNode_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCNode_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCNode_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCNode_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCNode_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCNode_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCNode_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCNode_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCNode_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCNode_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCNode_release()", "contents": "release()" }
,
		{ "trigger": "CCNode_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCNode_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCNode_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCNode_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCNode_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCNode_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCNode_copy()", "contents": "copy()" }
,
		{ "trigger": "CCNode_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCNode_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCNode_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCNode_description()", "contents": "description()" }
,
		{ "trigger": "CCNode_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCNode_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCNode_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCNode_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCNode_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCNode_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCNode_retain()", "contents": "retain()" }
,
		{ "trigger": "CCNode_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCNode_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCNode_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCNode_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCNode_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCNode_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCNode_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCNode_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCNode_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCNode_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCNode_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCNode_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCNode_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCNode_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCNode_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCNode_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCNode_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCNode_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCNode_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCNode_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCNode_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCNode_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCNode_create()", "contents": "CCNode:create()" }
,

		{ "trigger": "CCMenuItemToggle_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCMenuItemToggle_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCMenuItemToggle_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCMenuItemToggle_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCMenuItemToggle_setSelectedIndex(unsigned_int_index,)", "contents": "setSelectedIndex(${1:unsigned_int_index})" }
,
		{ "trigger": "CCMenuItemToggle_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCMenuItemToggle_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCMenuItemToggle_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCMenuItemToggle_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCMenuItemToggle_transform()", "contents": "transform()" }
,
		{ "trigger": "CCMenuItemToggle_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCMenuItemToggle_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCMenuItemToggle_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCMenuItemToggle_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemToggle_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCMenuItemToggle_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCMenuItemToggle_activate()", "contents": "activate()" }
,
		{ "trigger": "CCMenuItemToggle_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCMenuItemToggle_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCMenuItemToggle_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCMenuItemToggle_draw()", "contents": "draw()" }
,
		{ "trigger": "CCMenuItemToggle_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCMenuItemToggle_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCMenuItemToggle_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCMenuItemToggle_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCMenuItemToggle_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCMenuItemToggle_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCMenuItemToggle_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCMenuItemToggle_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCMenuItemToggle_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCMenuItemToggle_addSubItem(CCMenuItem_*item,)", "contents": "addSubItem(${1:CCMenuItem_*item})" }
,
		{ "trigger": "CCMenuItemToggle_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemToggle_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCMenuItemToggle_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCMenuItemToggle_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCMenuItemToggle_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCMenuItemToggle_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCMenuItemToggle_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCMenuItemToggle_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCMenuItemToggle_isSelected()", "contents": "isSelected()" }
,
		{ "trigger": "CCMenuItemToggle_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCMenuItemToggle_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCMenuItemToggle_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCMenuItemToggle_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCMenuItemToggle_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCMenuItemToggle_unselected()", "contents": "unselected()" }
,
		{ "trigger": "CCMenuItemToggle_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemToggle_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCMenuItemToggle_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCMenuItemToggle_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCMenuItemToggle_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCMenuItemToggle_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCMenuItemToggle_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCMenuItemToggle_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCMenuItemToggle_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCMenuItemToggle_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCMenuItemToggle_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCMenuItemToggle_selected()", "contents": "selected()" }
,
		{ "trigger": "CCMenuItemToggle_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCMenuItemToggle_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCMenuItemToggle_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCMenuItemToggle_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItemToggle_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCMenuItemToggle_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCMenuItemToggle_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCMenuItemToggle_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCMenuItemToggle_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItemToggle_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCMenuItemToggle_setEnabled(bool_enabled,)", "contents": "setEnabled(${1:bool_enabled})" }
,
		{ "trigger": "CCMenuItemToggle_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCMenuItemToggle_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCMenuItemToggle_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCMenuItemToggle_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCMenuItemToggle_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCMenuItemToggle_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCMenuItemToggle_copy()", "contents": "copy()" }
,
		{ "trigger": "CCMenuItemToggle_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCMenuItemToggle_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCMenuItemToggle_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItemToggle_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCMenuItemToggle_rect()", "contents": "rect()" }
,
		{ "trigger": "CCMenuItemToggle_description()", "contents": "description()" }
,
		{ "trigger": "CCMenuItemToggle_registerScriptTapHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptTapHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCMenuItemToggle_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemToggle_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCMenuItemToggle_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCMenuItemToggle_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "CCMenuItemToggle_setSubItems(CCArray*_pArrayOfItems,)", "contents": "setSubItems(${1:CCArray*_pArrayOfItems})" }
,
		{ "trigger": "CCMenuItemToggle_getSubItems()", "contents": "getSubItems()" }
,
		{ "trigger": "CCMenuItemToggle_visit()", "contents": "visit()" }
,
		{ "trigger": "CCMenuItemToggle_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCMenuItemToggle_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCMenuItemToggle_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCMenuItemToggle_retain()", "contents": "retain()" }
,
		{ "trigger": "CCMenuItemToggle_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCMenuItemToggle_release()", "contents": "release()" }
,
		{ "trigger": "CCMenuItemToggle_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCMenuItemToggle_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCMenuItemToggle_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCMenuItemToggle_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCMenuItemToggle_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCMenuItemToggle_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCMenuItemToggle_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCMenuItemToggle_setColor(ccColor3B_color,)", "contents": "setColor(${1:ccColor3B_color})" }
,
		{ "trigger": "CCMenuItemToggle_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCMenuItemToggle_unregisterScriptTapHandler()", "contents": "unregisterScriptTapHandler()" }
,
		{ "trigger": "CCMenuItemToggle_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCMenuItemToggle_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCMenuItemToggle_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCMenuItemToggle_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCMenuItemToggle_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCMenuItemToggle_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCMenuItemToggle_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCMenuItemToggle_setEnabled(bool_var,)", "contents": "setEnabled(${1:bool_var})" }
,
		{ "trigger": "CCMenuItemToggle_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCMenuItemToggle_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCMenuItemToggle_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCMenuItemToggle_selectedItem()", "contents": "selectedItem()" }
,
		{ "trigger": "CCMenuItemToggle_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCMenuItemToggle_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCMenuItemToggle_getSelectedIndex()", "contents": "getSelectedIndex()" }
,
		{ "trigger": "CCMenuItemToggle_create(CCMenuItem_*item,)", "contents": "CCMenuItemToggle:create(${1:CCMenuItem_*item})" }
,

		{ "trigger": "CCSpriteFrameCache_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCSpriteFrameCache_retain()", "contents": "retain()" }
,
		{ "trigger": "CCSpriteFrameCache_spriteFrameByName(const_char_*pszName,)", "contents": "spriteFrameByName(${1:const_char_*pszName})" }
,
		{ "trigger": "CCSpriteFrameCache_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCSpriteFrameCache_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCSpriteFrameCache_removeUnusedSpriteFrames()", "contents": "removeUnusedSpriteFrames()" }
,
		{ "trigger": "CCSpriteFrameCache_addSpriteFrame(CCSpriteFrame_*pobFrame,const_char_*pszFrameName,)", "contents": "addSpriteFrame(${1:CCSpriteFrame_*pobFrame},${2:const_char_*pszFrameName})" }
,
		{ "trigger": "CCSpriteFrameCache_copy()", "contents": "copy()" }
,
		{ "trigger": "CCSpriteFrameCache_removeSpriteFrameByName(const_char_*pszName,)", "contents": "removeSpriteFrameByName(${1:const_char_*pszName})" }
,
		{ "trigger": "CCSpriteFrameCache_removeSpriteFramesFromTexture(CCTexture2D*_texture,)", "contents": "removeSpriteFramesFromTexture(${1:CCTexture2D*_texture})" }
,
		{ "trigger": "CCSpriteFrameCache_removeSpriteFrames()", "contents": "removeSpriteFrames()" }
,
		{ "trigger": "CCSpriteFrameCache_release()", "contents": "release()" }
,
		{ "trigger": "CCSpriteFrameCache_removeSpriteFramesFromFile(const_char*_plist,)", "contents": "removeSpriteFramesFromFile(${1:const_char*_plist})" }
,
		{ "trigger": "CCSpriteFrameCache_addSpriteFramesWithFile(const_char*_plist,const_char*_textureFileName,)", "contents": "addSpriteFramesWithFile(${1:const_char*_plist},${2:const_char*_textureFileName})" }
,
		{ "trigger": "CCSpriteFrameCache_addSpriteFramesWithFile(const_char_*pszPlist,CCTexture2D_*pobTexture,)", "contents": "addSpriteFramesWithFile(${1:const_char_*pszPlist},${2:CCTexture2D_*pobTexture})" }
,
		{ "trigger": "CCSpriteFrameCache_addSpriteFramesWithFile(const_char_*pszPlist,)", "contents": "addSpriteFramesWithFile(${1:const_char_*pszPlist})" }
,
		{ "trigger": "CCSpriteFrameCache_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCSpriteFrameCache_purgeSharedSpriteFrameCache()", "contents": "CCSpriteFrameCache:purgeSharedSpriteFrameCache()" }
,
		{ "trigger": "CCSpriteFrameCache_sharedSpriteFrameCache()", "contents": "CCSpriteFrameCache:sharedSpriteFrameCache()" }
,

		{ "trigger": "CCFadeOutTRTiles_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCFadeOutTRTiles_setTile(CCPoint_pos,ccQuad3_coords,)", "contents": "setTile(${1:CCPoint_pos},${2:ccQuad3_coords})" }
,
		{ "trigger": "CCFadeOutTRTiles_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCFadeOutTRTiles_tile(CCPoint_pos,)", "contents": "tile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCFadeOutTRTiles_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCFadeOutTRTiles_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCFadeOutTRTiles_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCFadeOutTRTiles_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCFadeOutTRTiles_retain()", "contents": "retain()" }
,
		{ "trigger": "CCFadeOutTRTiles_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCFadeOutTRTiles_copy()", "contents": "copy()" }
,
		{ "trigger": "CCFadeOutTRTiles_turnOffTile(CCPoint_pos,)", "contents": "turnOffTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCFadeOutTRTiles_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCFadeOutTRTiles_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCFadeOutTRTiles_originalTile(CCPoint_pos,)", "contents": "originalTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCFadeOutTRTiles_turnOnTile(CCPoint_pos,)", "contents": "turnOnTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCFadeOutTRTiles_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCFadeOutTRTiles_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCFadeOutTRTiles_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCFadeOutTRTiles_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCFadeOutTRTiles_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCFadeOutTRTiles_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCFadeOutTRTiles_release()", "contents": "release()" }
,
		{ "trigger": "CCFadeOutTRTiles_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCFadeOutTRTiles_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCFadeOutTRTiles_transformTile(CCPoint_pos,float_distance,)", "contents": "transformTile(${1:CCPoint_pos},${2:float_distance})" }
,
		{ "trigger": "CCFadeOutTRTiles_create(float_duration,CCSize_gridSize,)", "contents": "CCFadeOutTRTiles:create(${1:float_duration},${2:CCSize_gridSize})" }
,

		{ "trigger": "CCParticleSystemQuad_setEndColor(const_ccColor4F_var,)", "contents": "setEndColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSystemQuad_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleSystemQuad_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCParticleSystemQuad_setRotatePerSecondVar(float_degrees,)", "contents": "setRotatePerSecondVar(${1:float_degrees})" }
,
		{ "trigger": "CCParticleSystemQuad_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCParticleSystemQuad_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCParticleSystemQuad_transform()", "contents": "transform()" }
,
		{ "trigger": "CCParticleSystemQuad_getRotatePerSecond()", "contents": "getRotatePerSecond()" }
,
		{ "trigger": "CCParticleSystemQuad_setTextureWithRect(CCTexture2D_*texture,const_CCRect&_rect,)", "contents": "setTextureWithRect(${1:CCTexture2D_*texture},${2:const_CCRect&_rect})" }
,
		{ "trigger": "CCParticleSystemQuad_getAngleVar()", "contents": "getAngleVar()" }
,
		{ "trigger": "CCParticleSystemQuad_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleSystemQuad_isAutoRemoveOnFinish()", "contents": "isAutoRemoveOnFinish()" }
,
		{ "trigger": "CCParticleSystemQuad_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleSystemQuad_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCParticleSystemQuad_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCParticleSystemQuad_setTangentialAccel(float_t,)", "contents": "setTangentialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleSystemQuad_getStartSpin()", "contents": "getStartSpin()" }
,
		{ "trigger": "CCParticleSystemQuad_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCParticleSystemQuad_getStartColor()", "contents": "getStartColor()" }
,
		{ "trigger": "CCParticleSystemQuad_setStartSpinVar(float_var,)", "contents": "setStartSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleSystemQuad_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCParticleSystemQuad_setStartRadius(float_startRadius,)", "contents": "setStartRadius(${1:float_startRadius})" }
,
		{ "trigger": "CCParticleSystemQuad_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCParticleSystemQuad_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCParticleSystemQuad_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCParticleSystemQuad_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCParticleSystemQuad_getPosVar()", "contents": "getPosVar()" }
,
		{ "trigger": "CCParticleSystemQuad_isFull()", "contents": "isFull()" }
,
		{ "trigger": "CCParticleSystemQuad_setStartRadiusVar(float_startRadiusVar,)", "contents": "setStartRadiusVar(${1:float_startRadiusVar})" }
,
		{ "trigger": "CCParticleSystemQuad_getStartSpinVar()", "contents": "getStartSpinVar()" }
,
		{ "trigger": "CCParticleSystemQuad_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCParticleSystemQuad_getStartSize()", "contents": "getStartSize()" }
,
		{ "trigger": "CCParticleSystemQuad_setDisplayFrame(CCSpriteFrame*_spriteFrame,)", "contents": "setDisplayFrame(${1:CCSpriteFrame*_spriteFrame})" }
,
		{ "trigger": "CCParticleSystemQuad_setBatchNode(CCParticleBatchNode*_node,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_node})" }
,
		{ "trigger": "CCParticleSystemQuad_isBlendAdditive()", "contents": "isBlendAdditive()" }
,
		{ "trigger": "CCParticleSystemQuad_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCParticleSystemQuad_getEndRadius()", "contents": "getEndRadius()" }
,
		{ "trigger": "CCParticleSystemQuad_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCParticleSystemQuad_visit()", "contents": "visit()" }
,
		{ "trigger": "CCParticleSystemQuad_getEmissionRate()", "contents": "getEmissionRate()" }
,
		{ "trigger": "CCParticleSystemQuad_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCParticleSystemQuad_setEndRadiusVar(float_endRadiusVar,)", "contents": "setEndRadiusVar(${1:float_endRadiusVar})" }
,
		{ "trigger": "CCParticleSystemQuad_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleSystemQuad_getEmitterMode()", "contents": "getEmitterMode()" }
,
		{ "trigger": "CCParticleSystemQuad_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCParticleSystemQuad_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCParticleSystemQuad_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCParticleSystemQuad_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCParticleSystemQuad_setBlendAdditive(bool_value,)", "contents": "setBlendAdditive(${1:bool_value})" }
,
		{ "trigger": "CCParticleSystemQuad_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleSystemQuad_setEndSpin(float_var,)", "contents": "setEndSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleSystemQuad_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCParticleSystemQuad_getRadialAccel()", "contents": "getRadialAccel()" }
,
		{ "trigger": "CCParticleSystemQuad_setRadialAccelVar(float_t,)", "contents": "setRadialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleSystemQuad_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCParticleSystemQuad_getEndSpin()", "contents": "getEndSpin()" }
,
		{ "trigger": "CCParticleSystemQuad_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleSystemQuad_setGravity(const_CCPoint&_g,)", "contents": "setGravity(${1:const_CCPoint&_g})" }
,
		{ "trigger": "CCParticleSystemQuad_getSourcePosition()", "contents": "getSourcePosition()" }
,
		{ "trigger": "CCParticleSystemQuad_setRotatePerSecond(float_degrees,)", "contents": "setRotatePerSecond(${1:float_degrees})" }
,
		{ "trigger": "CCParticleSystemQuad_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCParticleSystemQuad_getTangentialAccelVar()", "contents": "getTangentialAccelVar()" }
,
		{ "trigger": "CCParticleSystemQuad_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleSystemQuad_getEndSpinVar()", "contents": "getEndSpinVar()" }
,
		{ "trigger": "CCParticleSystemQuad_setAutoRemoveOnFinish(bool_var,)", "contents": "setAutoRemoveOnFinish(${1:bool_var})" }
,
		{ "trigger": "CCParticleSystemQuad_setPosVar(CCPoint_pos,)", "contents": "setPosVar(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleSystemQuad_setEmissionRate(float_rate,)", "contents": "setEmissionRate(${1:float_rate})" }
,
		{ "trigger": "CCParticleSystemQuad_getEndColorVar()", "contents": "getEndColorVar()" }
,
		{ "trigger": "CCParticleSystemQuad_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleSystemQuad_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCParticleSystemQuad_getRadialAccelVar()", "contents": "getRadialAccelVar()" }
,
		{ "trigger": "CCParticleSystemQuad_getStartRadius()", "contents": "getStartRadius()" }
,
		{ "trigger": "CCParticleSystemQuad_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleSystemQuad_setStartColorVar(const_ccColor4F_var,)", "contents": "setStartColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSystemQuad_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCParticleSystemQuad_initWithFile(const_char*_plistFile,)", "contents": "initWithFile(${1:const_char*_plistFile})" }
,
		{ "trigger": "CCParticleSystemQuad_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCParticleSystemQuad_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCParticleSystemQuad_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCParticleSystemQuad_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCParticleSystemQuad_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCParticleSystemQuad_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCParticleSystemQuad_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleSystemQuad_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCParticleSystemQuad_getEndSize()", "contents": "getEndSize()" }
,
		{ "trigger": "CCParticleSystemQuad_setSourcePosition(CCPoint_pos,)", "contents": "setSourcePosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleSystemQuad_initParticle(tCCParticle*_particle,)", "contents": "initParticle(${1:tCCParticle*_particle})" }
,
		{ "trigger": "CCParticleSystemQuad_isActive()", "contents": "isActive()" }
,
		{ "trigger": "CCParticleSystemQuad_getSpeedVar()", "contents": "getSpeedVar()" }
,
		{ "trigger": "CCParticleSystemQuad_updateQuadWithParticle(tCCParticle*_particle,const_CCPoint&_newPosition,)", "contents": "updateQuadWithParticle(${1:tCCParticle*_particle},${2:const_CCPoint&_newPosition})" }
,
		{ "trigger": "CCParticleSystemQuad_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCParticleSystemQuad_getEndColor()", "contents": "getEndColor()" }
,
		{ "trigger": "CCParticleSystemQuad_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleSystemQuad_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCParticleSystemQuad_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCParticleSystemQuad_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCParticleSystemQuad_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCParticleSystemQuad_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCParticleSystemQuad_setStartSizeVar(float_size,)", "contents": "setStartSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleSystemQuad_setStartSpin(float_var,)", "contents": "setStartSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleSystemQuad_getLife()", "contents": "getLife()" }
,
		{ "trigger": "CCParticleSystemQuad_setBlendFunc(ccBlendFunc_var,)", "contents": "setBlendFunc(${1:ccBlendFunc_var})" }
,
		{ "trigger": "CCParticleSystemQuad_getAngle()", "contents": "getAngle()" }
,
		{ "trigger": "CCParticleSystemQuad_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCParticleSystemQuad_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCParticleSystemQuad_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleSystemQuad_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCParticleSystemQuad_getTangentialAccel()", "contents": "getTangentialAccel()" }
,
		{ "trigger": "CCParticleSystemQuad_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCParticleSystemQuad_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCParticleSystemQuad_setTexture(CCTexture2D*_var,)", "contents": "setTexture(${1:CCTexture2D*_var})" }
,
		{ "trigger": "CCParticleSystemQuad_getGravity()", "contents": "getGravity()" }
,
		{ "trigger": "CCParticleSystemQuad_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "CCParticleSystemQuad_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCParticleSystemQuad_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleSystemQuad_setScale(float_s,)", "contents": "setScale(${1:float_s})" }
,
		{ "trigger": "CCParticleSystemQuad_draw()", "contents": "draw()" }
,
		{ "trigger": "CCParticleSystemQuad_setEndSpinVar(float_var,)", "contents": "setEndSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleSystemQuad_setSpeed(float_speed,)", "contents": "setSpeed(${1:float_speed})" }
,
		{ "trigger": "CCParticleSystemQuad_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCParticleSystemQuad_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCParticleSystemQuad_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCParticleSystemQuad_setStartSize(float_size,)", "contents": "setStartSize(${1:float_size})" }
,
		{ "trigger": "CCParticleSystemQuad_getStartRadiusVar()", "contents": "getStartRadiusVar()" }
,
		{ "trigger": "CCParticleSystemQuad_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleSystemQuad_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCParticleSystemQuad_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCParticleSystemQuad_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCParticleSystemQuad_getSpeed()", "contents": "getSpeed()" }
,
		{ "trigger": "CCParticleSystemQuad_setTotalParticles(unsigned_int_tp,)", "contents": "setTotalParticles(${1:unsigned_int_tp})" }
,
		{ "trigger": "CCParticleSystemQuad_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCParticleSystemQuad_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCParticleSystemQuad_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCParticleSystemQuad_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCParticleSystemQuad_setEmitterMode(int_mode,)", "contents": "setEmitterMode(${1:int_mode})" }
,
		{ "trigger": "CCParticleSystemQuad_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCParticleSystemQuad_getEndRadiusVar()", "contents": "getEndRadiusVar()" }
,
		{ "trigger": "CCParticleSystemQuad_getParticleCount()", "contents": "getParticleCount()" }
,
		{ "trigger": "CCParticleSystemQuad_postStep()", "contents": "postStep()" }
,
		{ "trigger": "CCParticleSystemQuad_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCParticleSystemQuad_getEndSizeVar()", "contents": "getEndSizeVar()" }
,
		{ "trigger": "CCParticleSystemQuad_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleSystemQuad_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCParticleSystemQuad_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCParticleSystemQuad_setTangentialAccelVar(float_t,)", "contents": "setTangentialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleSystemQuad_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCParticleSystemQuad_setSpeedVar(float_speed,)", "contents": "setSpeedVar(${1:float_speed})" }
,
		{ "trigger": "CCParticleSystemQuad_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCParticleSystemQuad_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCParticleSystemQuad_setEndSizeVar(float_size,)", "contents": "setEndSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleSystemQuad_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCParticleSystemQuad_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCParticleSystemQuad_setPositionType(tCCPositionType_type,)", "contents": "setPositionType(${1:tCCPositionType_type})" }
,
		{ "trigger": "CCParticleSystemQuad_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCParticleSystemQuad_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleSystemQuad_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCParticleSystemQuad_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCParticleSystemQuad_getBatchNode()", "contents": "getBatchNode()" }
,
		{ "trigger": "CCParticleSystemQuad_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleSystemQuad_initWithTotalParticles(unsigned_int_number,)", "contents": "initWithTotalParticles(${1:unsigned_int_number})" }
,
		{ "trigger": "CCParticleSystemQuad_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleSystemQuad_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCParticleSystemQuad_setDuration(float_d,)", "contents": "setDuration(${1:float_d})" }
,
		{ "trigger": "CCParticleSystemQuad_setRadialAccel(float_t,)", "contents": "setRadialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleSystemQuad_resetSystem()", "contents": "resetSystem()" }
,
		{ "trigger": "CCParticleSystemQuad_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCParticleSystemQuad_setStartColor(const_ccColor4F_var,)", "contents": "setStartColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSystemQuad_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCParticleSystemQuad_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCParticleSystemQuad_copy()", "contents": "copy()" }
,
		{ "trigger": "CCParticleSystemQuad_setEndSize(float_size,)", "contents": "setEndSize(${1:float_size})" }
,
		{ "trigger": "CCParticleSystemQuad_setAngleVar(float_angle,)", "contents": "setAngleVar(${1:float_angle})" }
,
		{ "trigger": "CCParticleSystemQuad_getTotalParticles()", "contents": "getTotalParticles()" }
,
		{ "trigger": "CCParticleSystemQuad_description()", "contents": "description()" }
,
		{ "trigger": "CCParticleSystemQuad_addParticle()", "contents": "addParticle()" }
,
		{ "trigger": "CCParticleSystemQuad_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleSystemQuad_setBatchNode(CCParticleBatchNode*_batchNode,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_batchNode})" }
,
		{ "trigger": "CCParticleSystemQuad_setLifeVar(float_lifeVar,)", "contents": "setLifeVar(${1:float_lifeVar})" }
,
		{ "trigger": "CCParticleSystemQuad_setEndRadius(float_endRadius,)", "contents": "setEndRadius(${1:float_endRadius})" }
,
		{ "trigger": "CCParticleSystemQuad_getStartSizeVar()", "contents": "getStartSizeVar()" }
,
		{ "trigger": "CCParticleSystemQuad_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCParticleSystemQuad_setAngle(float_angle,)", "contents": "setAngle(${1:float_angle})" }
,
		{ "trigger": "CCParticleSystemQuad_retain()", "contents": "retain()" }
,
		{ "trigger": "CCParticleSystemQuad_release()", "contents": "release()" }
,
		{ "trigger": "CCParticleSystemQuad_getRotatePerSecondVar()", "contents": "getRotatePerSecondVar()" }
,
		{ "trigger": "CCParticleSystemQuad_setLife(float_life,)", "contents": "setLife(${1:float_life})" }
,
		{ "trigger": "CCParticleSystemQuad_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleSystemQuad_stopSystem()", "contents": "stopSystem()" }
,
		{ "trigger": "CCParticleSystemQuad_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCParticleSystemQuad_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCParticleSystemQuad_getLifeVar()", "contents": "getLifeVar()" }
,
		{ "trigger": "CCParticleSystemQuad_setTexture(CCTexture2D*_texture,)", "contents": "setTexture(${1:CCTexture2D*_texture})" }
,
		{ "trigger": "CCParticleSystemQuad_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCParticleSystemQuad_setEndColorVar(const_ccColor4F_var,)", "contents": "setEndColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSystemQuad_getStartColorVar()", "contents": "getStartColorVar()" }
,
		{ "trigger": "CCParticleSystemQuad_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCParticleSystemQuad_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCParticleSystemQuad_create()", "contents": "CCParticleSystemQuad:create()" }
,
		{ "trigger": "CCParticleSystemQuad_create(const_char_*plistFile,)", "contents": "CCParticleSystemQuad:create(${1:const_char_*plistFile})" }
,

		{ "trigger": "CCEaseBounceInOut_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseBounceInOut_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseBounceInOut_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseBounceInOut_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseBounceInOut_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseBounceInOut_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseBounceInOut_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseBounceInOut_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseBounceInOut_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseBounceInOut_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseBounceInOut_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseBounceInOut_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseBounceInOut_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseBounceInOut_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseBounceInOut_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseBounceInOut_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseBounceInOut_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseBounceInOut_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseBounceInOut_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseBounceInOut_create(CCActionInterval*_pAction,)", "contents": "CCEaseBounceInOut:create(${1:CCActionInterval*_pAction})" }
,

		{ "trigger": "CCBezierTo_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCBezierTo_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCBezierTo_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCBezierTo_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCBezierTo_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCBezierTo_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCBezierTo_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCBezierTo_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCBezierTo_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCBezierTo_retain()", "contents": "retain()" }
,
		{ "trigger": "CCBezierTo_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCBezierTo_copy()", "contents": "copy()" }
,
		{ "trigger": "CCBezierTo_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCBezierTo_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCBezierTo_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCBezierTo_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCBezierTo_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCBezierTo_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCBezierTo_release()", "contents": "release()" }
,
		{ "trigger": "CCBezierTo_create(float_t,ccBezierConfig_c,)", "contents": "CCBezierTo:create(${1:float_t},${2:ccBezierConfig_c})" }
,

		{ "trigger": "CCTransitionProgressHorizontal_create(float_t,CCScene*_scene,)", "contents": "CCTransitionProgressHorizontal:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCRepeat_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCRepeat_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCRepeat_retain()", "contents": "retain()" }
,
		{ "trigger": "CCRepeat_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCRepeat_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCRepeat_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCRepeat_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCRepeat_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCRepeat_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCRepeat_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCRepeat_copy()", "contents": "copy()" }
,
		{ "trigger": "CCRepeat_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCRepeat_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCRepeat_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCRepeat_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCRepeat_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCRepeat_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCRepeat_release()", "contents": "release()" }
,
		{ "trigger": "CCRepeat_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCRepeat_create(CCFiniteTimeAction_*pAction,unsigned_int_times,)", "contents": "CCRepeat:create(${1:CCFiniteTimeAction_*pAction},${2:unsigned_int_times})" }
,


		{ "trigger": "CCTMXObjectGroup_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTMXObjectGroup_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTMXObjectGroup_setProperties(CCDictionary*_pval,)", "contents": "setProperties(${1:CCDictionary*_pval})" }
,
		{ "trigger": "CCTMXObjectGroup_getGroupName()", "contents": "getGroupName()" }
,
		{ "trigger": "CCTMXObjectGroup_propertyNamed(const_char*_propertyName,)", "contents": "propertyNamed(${1:const_char*_propertyName})" }
,
		{ "trigger": "CCTMXObjectGroup_setGroupName(const_char_*groupName,)", "contents": "setGroupName(${1:const_char_*groupName})" }
,
		{ "trigger": "CCTMXObjectGroup_setPositionOffset(CCPoint_pt,)", "contents": "setPositionOffset(${1:CCPoint_pt})" }
,
		{ "trigger": "CCTMXObjectGroup_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTMXObjectGroup_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTMXObjectGroup_release()", "contents": "release()" }
,
		{ "trigger": "CCTMXObjectGroup_setObjects(CCArray*_val,)", "contents": "setObjects(${1:CCArray*_val})" }
,
		{ "trigger": "CCTMXObjectGroup_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTMXObjectGroup_objectNamed(const_char_*objectName,)", "contents": "objectNamed(${1:const_char_*objectName})" }
,
		{ "trigger": "CCTMXObjectGroup_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTMXObjectGroup_getObjects()", "contents": "getObjects()" }
,
		{ "trigger": "CCTMXObjectGroup_getProperties()", "contents": "getProperties()" }
,
		{ "trigger": "CCTMXObjectGroup_getPositionOffset()", "contents": "getPositionOffset()" }
,

		{ "trigger": "CCShatteredTiles3D_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCShatteredTiles3D_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCShatteredTiles3D_tile(CCPoint_pos,)", "contents": "tile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCShatteredTiles3D_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCShatteredTiles3D_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCShatteredTiles3D_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCShatteredTiles3D_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCShatteredTiles3D_retain()", "contents": "retain()" }
,
		{ "trigger": "CCShatteredTiles3D_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCShatteredTiles3D_copy()", "contents": "copy()" }
,
		{ "trigger": "CCShatteredTiles3D_setTile(CCPoint_pos,ccQuad3_coords,)", "contents": "setTile(${1:CCPoint_pos},${2:ccQuad3_coords})" }
,
		{ "trigger": "CCShatteredTiles3D_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCShatteredTiles3D_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCShatteredTiles3D_originalTile(CCPoint_pos,)", "contents": "originalTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCShatteredTiles3D_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCShatteredTiles3D_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCShatteredTiles3D_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCShatteredTiles3D_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCShatteredTiles3D_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCShatteredTiles3D_release()", "contents": "release()" }
,
		{ "trigger": "CCShatteredTiles3D_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCShatteredTiles3D_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCShatteredTiles3D_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCShatteredTiles3D_create(float_duration,CCSize_gridSize,int_nRange,bool_bShatterZ,)", "contents": "CCShatteredTiles3D:create(${1:float_duration},${2:CCSize_gridSize},${3:int_nRange},${4:bool_bShatterZ})" }
,

		{ "trigger": "CCMenuItemLabel_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCMenuItemLabel_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCMenuItemLabel_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCMenuItemLabel_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCMenuItemLabel_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCMenuItemLabel_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCMenuItemLabel_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCMenuItemLabel_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCMenuItemLabel_transform()", "contents": "transform()" }
,
		{ "trigger": "CCMenuItemLabel_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCMenuItemLabel_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCMenuItemLabel_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCMenuItemLabel_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemLabel_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCMenuItemLabel_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCMenuItemLabel_activate()", "contents": "activate()" }
,
		{ "trigger": "CCMenuItemLabel_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCMenuItemLabel_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCMenuItemLabel_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCMenuItemLabel_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCMenuItemLabel_draw()", "contents": "draw()" }
,
		{ "trigger": "CCMenuItemLabel_getLabel()", "contents": "getLabel()" }
,
		{ "trigger": "CCMenuItemLabel_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCMenuItemLabel_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCMenuItemLabel_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCMenuItemLabel_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCMenuItemLabel_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCMenuItemLabel_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCMenuItemLabel_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCMenuItemLabel_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCMenuItemLabel_setString(const_char*_label,)", "contents": "setString(${1:const_char*_label})" }
,
		{ "trigger": "CCMenuItemLabel_setEnabled(bool_enabled,)", "contents": "setEnabled(${1:bool_enabled})" }
,
		{ "trigger": "CCMenuItemLabel_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCMenuItemLabel_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCMenuItemLabel_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCMenuItemLabel_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCMenuItemLabel_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCMenuItemLabel_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCMenuItemLabel_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCMenuItemLabel_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCMenuItemLabel_setDisabledColor(const_ccColor3B_&_color,)", "contents": "setDisabledColor(${1:const_ccColor3B_&_color})" }
,
		{ "trigger": "CCMenuItemLabel_isSelected()", "contents": "isSelected()" }
,
		{ "trigger": "CCMenuItemLabel_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCMenuItemLabel_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCMenuItemLabel_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCMenuItemLabel_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCMenuItemLabel_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCMenuItemLabel_unselected()", "contents": "unselected()" }
,
		{ "trigger": "CCMenuItemLabel_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemLabel_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCMenuItemLabel_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCMenuItemLabel_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCMenuItemLabel_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCMenuItemLabel_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCMenuItemLabel_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCMenuItemLabel_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCMenuItemLabel_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCMenuItemLabel_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCMenuItemLabel_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCMenuItemLabel_selected()", "contents": "selected()" }
,
		{ "trigger": "CCMenuItemLabel_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCMenuItemLabel_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCMenuItemLabel_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCMenuItemLabel_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItemLabel_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCMenuItemLabel_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCMenuItemLabel_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCMenuItemLabel_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCMenuItemLabel_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItemLabel_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCMenuItemLabel_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCMenuItemLabel_getDisabledColor()", "contents": "getDisabledColor()" }
,
		{ "trigger": "CCMenuItemLabel_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCMenuItemLabel_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCMenuItemLabel_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemLabel_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCMenuItemLabel_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCMenuItemLabel_copy()", "contents": "copy()" }
,
		{ "trigger": "CCMenuItemLabel_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCMenuItemLabel_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCMenuItemLabel_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItemLabel_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCMenuItemLabel_rect()", "contents": "rect()" }
,
		{ "trigger": "CCMenuItemLabel_description()", "contents": "description()" }
,
		{ "trigger": "CCMenuItemLabel_registerScriptTapHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptTapHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCMenuItemLabel_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemLabel_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCMenuItemLabel_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCMenuItemLabel_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "CCMenuItemLabel_visit()", "contents": "visit()" }
,
		{ "trigger": "CCMenuItemLabel_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCMenuItemLabel_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCMenuItemLabel_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCMenuItemLabel_retain()", "contents": "retain()" }
,
		{ "trigger": "CCMenuItemLabel_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCMenuItemLabel_release()", "contents": "release()" }
,
		{ "trigger": "CCMenuItemLabel_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCMenuItemLabel_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCMenuItemLabel_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCMenuItemLabel_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCMenuItemLabel_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCMenuItemLabel_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCMenuItemLabel_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCMenuItemLabel_setColor(ccColor3B_color,)", "contents": "setColor(${1:ccColor3B_color})" }
,
		{ "trigger": "CCMenuItemLabel_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCMenuItemLabel_unregisterScriptTapHandler()", "contents": "unregisterScriptTapHandler()" }
,
		{ "trigger": "CCMenuItemLabel_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCMenuItemLabel_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCMenuItemLabel_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCMenuItemLabel_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCMenuItemLabel_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCMenuItemLabel_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCMenuItemLabel_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCMenuItemLabel_setLabel(CCNode*_pLabel,)", "contents": "setLabel(${1:CCNode*_pLabel})" }
,
		{ "trigger": "CCMenuItemLabel_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCMenuItemLabel_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCMenuItemLabel_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCMenuItemLabel_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCMenuItemLabel_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCMenuItemLabel_create(CCNode*_label,)", "contents": "CCMenuItemLabel:create(${1:CCNode*_label})" }
,

		{ "trigger": "CCEvent_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEvent_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEvent_release()", "contents": "release()" }
,
		{ "trigger": "CCEvent_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEvent_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEvent_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEvent_copy()", "contents": "copy()" }
,

		{ "trigger": "CCLens3D_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCLens3D_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCLens3D_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCLens3D_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCLens3D_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCLens3D_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCLens3D_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCLens3D_retain()", "contents": "retain()" }
,
		{ "trigger": "CCLens3D_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCLens3D_release()", "contents": "release()" }
,
		{ "trigger": "CCLens3D_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCLens3D_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCLens3D_originalVertex(const_CCPoint&_pos,)", "contents": "originalVertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCLens3D_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCLens3D_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCLens3D_vertex(const_CCPoint&_pos,)", "contents": "vertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCLens3D_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCLens3D_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCLens3D_setVertex(const_CCPoint&_pos,const_ccVertex3F&_vertex,)", "contents": "setVertex(${1:const_CCPoint&_pos},${2:const_ccVertex3F&_vertex})" }
,
		{ "trigger": "CCLens3D_getLensEffect()", "contents": "getLensEffect()" }
,
		{ "trigger": "CCLens3D_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCLens3D_copy()", "contents": "copy()" }
,
		{ "trigger": "CCLens3D_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCLens3D_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCLens3D_setPosition(CCPoint_position,)", "contents": "setPosition(${1:CCPoint_position})" }
,
		{ "trigger": "CCLens3D_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCLens3D_setLensEffect(float_fLensEffect,)", "contents": "setLensEffect(${1:float_fLensEffect})" }
,
		{ "trigger": "CCLens3D_create(float_duration,CCSize_gridSize,CCPoint_position,float_radius,)", "contents": "CCLens3D:create(${1:float_duration},${2:CCSize_gridSize},${3:CCPoint_position},${4:float_radius})" }
,

		{ "trigger": "CCSpawn_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCSpawn_retain()", "contents": "retain()" }
,
		{ "trigger": "CCSpawn_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCSpawn_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCSpawn_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCSpawn_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCSpawn_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCSpawn_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCSpawn_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCSpawn_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCSpawn_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCSpawn_copy()", "contents": "copy()" }
,
		{ "trigger": "CCSpawn_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCSpawn_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCSpawn_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCSpawn_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCSpawn_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCSpawn_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCSpawn_release()", "contents": "release()" }
,
		{ "trigger": "CCSpawn_createWithTwoActions(CCFiniteTimeAction_*pAction1,CCFiniteTimeAction_*pAction2,)", "contents": "CCSpawn:createWithTwoActions(${1:CCFiniteTimeAction_*pAction1},${2:CCFiniteTimeAction_*pAction2})" }
,
		{ "trigger": "CCSpawn_create(CCArray_*actions,)", "contents": "CCSpawn:create(${1:CCArray_*actions})" }
,

		{ "trigger": "CCTouchDispatcher_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTouchDispatcher_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTouchDispatcher_release()", "contents": "release()" }
,
		{ "trigger": "CCTouchDispatcher_isDispatchEvents()", "contents": "isDispatchEvents()" }
,
		{ "trigger": "CCTouchDispatcher_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTouchDispatcher_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTouchDispatcher_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTouchDispatcher_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTouchDispatcher_setDispatchEvents(bool_bDispatchEvents,)", "contents": "setDispatchEvents(${1:bool_bDispatchEvents})" }
,

		{ "trigger": "CCTransitionSlideInR_create(float_t,CCScene*_scene,)", "contents": "CCTransitionSlideInR:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCFadeTo_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCFadeTo_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCFadeTo_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCFadeTo_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCFadeTo_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCFadeTo_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCFadeTo_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCFadeTo_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCFadeTo_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCFadeTo_retain()", "contents": "retain()" }
,
		{ "trigger": "CCFadeTo_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCFadeTo_copy()", "contents": "copy()" }
,
		{ "trigger": "CCFadeTo_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCFadeTo_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCFadeTo_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCFadeTo_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCFadeTo_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCFadeTo_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCFadeTo_release()", "contents": "release()" }
,
		{ "trigger": "CCFadeTo_create(float_duration,GLubyte_opacity,)", "contents": "CCFadeTo:create(${1:float_duration},${2:GLubyte_opacity})" }
,

		{ "trigger": "CCTransitionSlideInL_create(float_t,CCScene*_scene,)", "contents": "CCTransitionSlideInL:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCRotateTo_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCRotateTo_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCRotateTo_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCRotateTo_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCRotateTo_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCRotateTo_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCRotateTo_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCRotateTo_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCRotateTo_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCRotateTo_retain()", "contents": "retain()" }
,
		{ "trigger": "CCRotateTo_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCRotateTo_copy()", "contents": "copy()" }
,
		{ "trigger": "CCRotateTo_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCRotateTo_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCRotateTo_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCRotateTo_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCRotateTo_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCRotateTo_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCRotateTo_release()", "contents": "release()" }
,
		{ "trigger": "CCRotateTo_create(float_duration,float_fDeltaAngle,)", "contents": "CCRotateTo:create(${1:float_duration},${2:float_fDeltaAngle})" }
,

		{ "trigger": "CCTransitionFadeUp_create(float_t,CCScene*_scene,)", "contents": "CCTransitionFadeUp:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCTexture2D_getPixelsWide()", "contents": "getPixelsWide()" }
,
		{ "trigger": "CCTexture2D_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTexture2D_hasMipmaps()", "contents": "hasMipmaps()" }
,
		{ "trigger": "CCTexture2D_getPixelsHigh()", "contents": "getPixelsHigh()" }
,
		{ "trigger": "CCTexture2D_drawAtPoint(CCPoint_point,)", "contents": "drawAtPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCTexture2D_setAliasTexParameters()", "contents": "setAliasTexParameters()" }
,
		{ "trigger": "CCTexture2D_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTexture2D_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTexture2D_release()", "contents": "release()" }
,
		{ "trigger": "CCTexture2D_releaseData(void*_data,)", "contents": "releaseData(${1:void*_data})" }
,
		{ "trigger": "CCTexture2D_bitsPerPixelForFormat()", "contents": "bitsPerPixelForFormat()" }
,
		{ "trigger": "CCTexture2D_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTexture2D_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTexture2D_drawInRect(CCRect_rect,)", "contents": "drawInRect(${1:CCRect_rect})" }
,
		{ "trigger": "CCTexture2D_getName()", "contents": "getName()" }
,
		{ "trigger": "CCTexture2D_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTexture2D_hasPremultipliedAlpha()", "contents": "hasPremultipliedAlpha()" }
,
		{ "trigger": "CCTexture2D_stringForFormat()", "contents": "stringForFormat()" }
,
		{ "trigger": "CCTexture2D_bitsPerPixelForFormat(CCTexture2DPixelFormat_format,)", "contents": "bitsPerPixelForFormat(${1:CCTexture2DPixelFormat_format})" }
,
		{ "trigger": "CCTexture2D_getMaxS()", "contents": "getMaxS()" }
,
		{ "trigger": "CCTexture2D_setMaxS(GLfloat_val,)", "contents": "setMaxS(${1:GLfloat_val})" }
,
		{ "trigger": "CCTexture2D_getPixelFormat()", "contents": "getPixelFormat()" }
,
		{ "trigger": "CCTexture2D_keepData(void*_data,unsigned_int_length,)", "contents": "keepData(${1:void*_data},${2:unsigned_int_length})" }
,
		{ "trigger": "CCTexture2D_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTexture2D_setMaxT(GLfloat_val,)", "contents": "setMaxT(${1:GLfloat_val})" }
,
		{ "trigger": "CCTexture2D_getContentSizeInPixels()", "contents": "getContentSizeInPixels()" }
,
		{ "trigger": "CCTexture2D_getMaxT()", "contents": "getMaxT()" }
,
		{ "trigger": "CCTexture2D_generateMipmap()", "contents": "generateMipmap()" }
,
		{ "trigger": "CCTexture2D_setTexParameters(ccTexParams*_texParams,)", "contents": "setTexParameters(${1:ccTexParams*_texParams})" }
,
		{ "trigger": "CCTexture2D_setAntiAliasTexParameters()", "contents": "setAntiAliasTexParameters()" }
,
		{ "trigger": "CCTexture2D_defaultAlphaPixelFormat()", "contents": "CCTexture2D:defaultAlphaPixelFormat()" }
,
		{ "trigger": "CCTexture2D_setDefaultAlphaPixelFormat(CCTexture2DPixelFormat_format,)", "contents": "CCTexture2D:setDefaultAlphaPixelFormat(${1:CCTexture2DPixelFormat_format})" }
,

		{ "trigger": "CCTransitionSlideInB_create(float_t,CCScene*_scene,)", "contents": "CCTransitionSlideInB:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCLayerMultiplex_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCLayerMultiplex_setKeypadEnabled(bool_bValue,)", "contents": "setKeypadEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCLayerMultiplex_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCLayerMultiplex_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCLayerMultiplex_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCLayerMultiplex_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCLayerMultiplex_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCLayerMultiplex_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCLayerMultiplex_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCLayerMultiplex_transform()", "contents": "transform()" }
,
		{ "trigger": "CCLayerMultiplex_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCLayerMultiplex_unregisterScriptKeypadHandler()", "contents": "unregisterScriptKeypadHandler()" }
,
		{ "trigger": "CCLayerMultiplex_setTouchEnabled(bool_bValue,)", "contents": "setTouchEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCLayerMultiplex_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCLayerMultiplex_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCLayerMultiplex_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCLayerMultiplex_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCLayerMultiplex_isTouchEnabled()", "contents": "isTouchEnabled()" }
,
		{ "trigger": "CCLayerMultiplex_registerScriptKeypadHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptKeypadHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCLayerMultiplex_draw()", "contents": "draw()" }
,
		{ "trigger": "CCLayerMultiplex_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCLayerMultiplex_unregisterScriptAccelerateHandler()", "contents": "unregisterScriptAccelerateHandler()" }
,
		{ "trigger": "CCLayerMultiplex_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCLayerMultiplex_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCLayerMultiplex_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCLayerMultiplex_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCLayerMultiplex_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCLayerMultiplex_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCLayerMultiplex_switchToAndReleaseMe(unsigned_int_n,)", "contents": "switchToAndReleaseMe(${1:unsigned_int_n})" }
,
		{ "trigger": "CCLayerMultiplex_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCLayerMultiplex_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCLayerMultiplex_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCLayerMultiplex_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCLayerMultiplex_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCLayerMultiplex_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCLayerMultiplex_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCLayerMultiplex_addLayer(CCLayer*_layer,)", "contents": "addLayer(${1:CCLayer*_layer})" }
,
		{ "trigger": "CCLayerMultiplex_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCLayerMultiplex_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCLayerMultiplex_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCLayerMultiplex_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCLayerMultiplex_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCLayerMultiplex_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCLayerMultiplex_unregisterScriptTouchHandler()", "contents": "unregisterScriptTouchHandler()" }
,
		{ "trigger": "CCLayerMultiplex_visit()", "contents": "visit()" }
,
		{ "trigger": "CCLayerMultiplex_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCLayerMultiplex_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCLayerMultiplex_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCLayerMultiplex_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCLayerMultiplex_isKeypadEnabled()", "contents": "isKeypadEnabled()" }
,
		{ "trigger": "CCLayerMultiplex_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCLayerMultiplex_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCLayerMultiplex_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCLayerMultiplex_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCLayerMultiplex_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCLayerMultiplex_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCLayerMultiplex_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCLayerMultiplex_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCLayerMultiplex_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCLayerMultiplex_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCLayerMultiplex_setAccelerometerEnabled(bool_bValue,)", "contents": "setAccelerometerEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCLayerMultiplex_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCLayerMultiplex_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCLayerMultiplex_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCLayerMultiplex_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCLayerMultiplex_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCLayerMultiplex_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCLayerMultiplex_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCLayerMultiplex_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCLayerMultiplex_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCLayerMultiplex_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCLayerMultiplex_copy()", "contents": "copy()" }
,
		{ "trigger": "CCLayerMultiplex_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCLayerMultiplex_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCLayerMultiplex_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCLayerMultiplex_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCLayerMultiplex_description()", "contents": "description()" }
,
		{ "trigger": "CCLayerMultiplex_switchTo(unsigned_int_n,)", "contents": "switchTo(${1:unsigned_int_n})" }
,
		{ "trigger": "CCLayerMultiplex_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCLayerMultiplex_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCLayerMultiplex_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCLayerMultiplex_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCLayerMultiplex_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCLayerMultiplex_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCLayerMultiplex_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCLayerMultiplex_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCLayerMultiplex_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCLayerMultiplex_release()", "contents": "release()" }
,
		{ "trigger": "CCLayerMultiplex_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCLayerMultiplex_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCLayerMultiplex_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCLayerMultiplex_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCLayerMultiplex_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCLayerMultiplex_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCLayerMultiplex_retain()", "contents": "retain()" }
,
		{ "trigger": "CCLayerMultiplex_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCLayerMultiplex_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCLayerMultiplex_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCLayerMultiplex_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCLayerMultiplex_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCLayerMultiplex_isAccelerometerEnabled()", "contents": "isAccelerometerEnabled()" }
,
		{ "trigger": "CCLayerMultiplex_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCLayerMultiplex_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCLayerMultiplex_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCLayerMultiplex_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCLayerMultiplex_registerScriptAccelerateHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptAccelerateHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCLayerMultiplex_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCLayerMultiplex_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCLayerMultiplex_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCLayerMultiplex_registerScriptTouchHandler(LUA_FUNCTION_nHandler,bool_bIsMultiTouches_=_false,int_nPriority_=_0,bool_bSwallowsTouches_=_false,)", "contents": "registerScriptTouchHandler(${1:LUA_FUNCTION_nHandler},${2:bool_bIsMultiTouches_=_false},${3:int_nPriority_=_0},${4:bool_bSwallowsTouches_=_false})" }
,
		{ "trigger": "CCLayerMultiplex_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCLayerMultiplex_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCLayerMultiplex_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCLayerMultiplex_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCLayerMultiplex_createWithLayer(CCLayer*_layer,)", "contents": "CCLayerMultiplex:createWithLayer(${1:CCLayer*_layer})" }
,
		{ "trigger": "CCLayerMultiplex_create(CCLayer*_layer,)", "contents": "CCLayerMultiplex:create(${1:CCLayer*_layer})" }
,

		{ "trigger": "CCArray_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCArray_exchangeObjectAtIndex(unsigned_int_index1,unsigned_int_index2,)", "contents": "exchangeObjectAtIndex(${1:unsigned_int_index1},${2:unsigned_int_index2})" }
,
		{ "trigger": "CCArray_exchangeObject(CCObject*_object1,CCObject*_object2,)", "contents": "exchangeObject(${1:CCObject*_object1},${2:CCObject*_object2})" }
,
		{ "trigger": "CCArray_removeObjectsInArray(CCArray*_otherArray,)", "contents": "removeObjectsInArray(${1:CCArray*_otherArray})" }
,
		{ "trigger": "CCArray_reduceMemoryFootprint()", "contents": "reduceMemoryFootprint()" }
,
		{ "trigger": "CCArray_retain()", "contents": "retain()" }
,
		{ "trigger": "CCArray_addObject(CCObject*_object,)", "contents": "addObject(${1:CCObject*_object})" }
,
		{ "trigger": "CCArray_release()", "contents": "release()" }
,
		{ "trigger": "CCArray_isEqualToArray(CCArray*_pOtherArray,)", "contents": "isEqualToArray(${1:CCArray*_pOtherArray})" }
,
		{ "trigger": "CCArray_removeObject(CCObject*_object,bool_bReleaseObj_=_true,)", "contents": "removeObject(${1:CCObject*_object},${2:bool_bReleaseObj_=_true})" }
,
		{ "trigger": "CCArray_removeObjectAtIndex(unsigned_int_index,bool_bReleaseObj_=_true,)", "contents": "removeObjectAtIndex(${1:unsigned_int_index},${2:bool_bReleaseObj_=_true})" }
,
		{ "trigger": "CCArray_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCArray_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCArray_fastRemoveObject(CCObject*_object,)", "contents": "fastRemoveObject(${1:CCObject*_object})" }
,
		{ "trigger": "CCArray_removeLastObject(bool_bReleaseObj_=_true,)", "contents": "removeLastObject(${1:bool_bReleaseObj_=_true})" }
,
		{ "trigger": "CCArray_removeAllObjects()", "contents": "removeAllObjects()" }
,
		{ "trigger": "CCArray_copy()", "contents": "copy()" }
,
		{ "trigger": "CCArray_lastObject()", "contents": "lastObject()" }
,
		{ "trigger": "CCArray_reverseObjects()", "contents": "reverseObjects()" }
,
		{ "trigger": "CCArray_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCArray_objectAtIndex(unsigned_int_index,)", "contents": "objectAtIndex(${1:unsigned_int_index})" }
,
		{ "trigger": "CCArray_capacity()", "contents": "capacity()" }
,
		{ "trigger": "CCArray_insertObject(CCObject*_object,unsigned_int_index,)", "contents": "insertObject(${1:CCObject*_object},${2:unsigned_int_index})" }
,
		{ "trigger": "CCArray_addObjectsFromArray(CCArray*_otherArray,)", "contents": "addObjectsFromArray(${1:CCArray*_otherArray})" }
,
		{ "trigger": "CCArray_containsObject(CCObject*_object,)", "contents": "containsObject(${1:CCObject*_object})" }
,
		{ "trigger": "CCArray_replaceObjectAtIndex(unsigned_int_uIndex,CCObject*_pObject,bool_bReleaseObject_=_true,)", "contents": "replaceObjectAtIndex(${1:unsigned_int_uIndex},${2:CCObject*_pObject},${3:bool_bReleaseObject_=_true})" }
,
		{ "trigger": "CCArray_count()", "contents": "count()" }
,
		{ "trigger": "CCArray_indexOfObject(CCObject*_object,)", "contents": "indexOfObject(${1:CCObject*_object})" }
,
		{ "trigger": "CCArray_fastRemoveObjectAtIndex(unsigned_int_index,)", "contents": "fastRemoveObjectAtIndex(${1:unsigned_int_index})" }
,
		{ "trigger": "CCArray_randomObject()", "contents": "randomObject()" }
,
		{ "trigger": "CCArray_createWithArray(CCArray*_otherArray,)", "contents": "CCArray:createWithArray(${1:CCArray*_otherArray})" }
,
		{ "trigger": "CCArray_create()", "contents": "CCArray:create()" }
,
		{ "trigger": "CCArray_createWithObject(CCObject*_pObject,)", "contents": "CCArray:createWithObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCArray_createWithCapacity(unsigned_int_capacity,)", "contents": "CCArray:createWithCapacity(${1:unsigned_int_capacity})" }
,
		{ "trigger": "CCArray_createWithContentsOfFile(const_char*_pFileName,)", "contents": "CCArray:createWithContentsOfFile(${1:const_char*_pFileName})" }
,

		{ "trigger": "CCSplitRows_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCSplitRows_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCSplitRows_tile(CCPoint_pos,)", "contents": "tile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCSplitRows_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCSplitRows_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCSplitRows_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCSplitRows_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCSplitRows_retain()", "contents": "retain()" }
,
		{ "trigger": "CCSplitRows_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCSplitRows_copy()", "contents": "copy()" }
,
		{ "trigger": "CCSplitRows_setTile(CCPoint_pos,ccQuad3_coords,)", "contents": "setTile(${1:CCPoint_pos},${2:ccQuad3_coords})" }
,
		{ "trigger": "CCSplitRows_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCSplitRows_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCSplitRows_originalTile(CCPoint_pos,)", "contents": "originalTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCSplitRows_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCSplitRows_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCSplitRows_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCSplitRows_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCSplitRows_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCSplitRows_release()", "contents": "release()" }
,
		{ "trigger": "CCSplitRows_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCSplitRows_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCSplitRows_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCSplitRows_create(float_duration,unsigned_int_nRows,)", "contents": "CCSplitRows:create(${1:float_duration},${2:unsigned_int_nRows})" }
,

		{ "trigger": "CCEaseExponentialOut_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseExponentialOut_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseExponentialOut_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseExponentialOut_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseExponentialOut_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseExponentialOut_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseExponentialOut_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseExponentialOut_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseExponentialOut_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseExponentialOut_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseExponentialOut_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseExponentialOut_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseExponentialOut_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseExponentialOut_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseExponentialOut_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseExponentialOut_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseExponentialOut_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseExponentialOut_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseExponentialOut_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseExponentialOut_create(CCActionInterval*_pAction,)", "contents": "CCEaseExponentialOut:create(${1:CCActionInterval*_pAction})" }
,


		{ "trigger": "CCNotificationCenter_retain()", "contents": "retain()" }
,
		{ "trigger": "CCNotificationCenter_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCNotificationCenter_release()", "contents": "release()" }
,
		{ "trigger": "CCNotificationCenter_unregisterScriptObserver()", "contents": "unregisterScriptObserver()" }
,
		{ "trigger": "CCNotificationCenter_registerScriptObserver(LUA_FUNCTION_handler,)", "contents": "registerScriptObserver(${1:LUA_FUNCTION_handler})" }
,
		{ "trigger": "CCNotificationCenter_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCNotificationCenter_postNotification(const_char_*name,)", "contents": "postNotification(${1:const_char_*name})" }
,
		{ "trigger": "CCNotificationCenter_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCNotificationCenter_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCNotificationCenter_copy()", "contents": "copy()" }
,
		{ "trigger": "CCNotificationCenter_sharedNotificationCenter()", "contents": "CCNotificationCenter:sharedNotificationCenter()" }
,

		{ "trigger": "CCLabelAtlas_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCLabelAtlas_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCLabelAtlas_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCLabelAtlas_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCLabelAtlas_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCLabelAtlas_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCLabelAtlas_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCLabelAtlas_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCLabelAtlas_transform()", "contents": "transform()" }
,
		{ "trigger": "CCLabelAtlas_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCLabelAtlas_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCLabelAtlas_updateAtlasValues()", "contents": "updateAtlasValues()" }
,
		{ "trigger": "CCLabelAtlas_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCLabelAtlas_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCLabelAtlas_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCLabelAtlas_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCLabelAtlas_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCLabelAtlas_setTexture(CCTexture2D_*texture,)", "contents": "setTexture(${1:CCTexture2D_*texture})" }
,
		{ "trigger": "CCLabelAtlas_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCLabelAtlas_draw()", "contents": "draw()" }
,
		{ "trigger": "CCLabelAtlas_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCLabelAtlas_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCLabelAtlas_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCLabelAtlas_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCLabelAtlas_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCLabelAtlas_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCLabelAtlas_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCLabelAtlas_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCLabelAtlas_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCLabelAtlas_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCLabelAtlas_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCLabelAtlas_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCLabelAtlas_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCLabelAtlas_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCLabelAtlas_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCLabelAtlas_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCLabelAtlas_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCLabelAtlas_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCLabelAtlas_setQuadsToDraw(unsigned_int_quadsToDraw,)", "contents": "setQuadsToDraw(${1:unsigned_int_quadsToDraw})" }
,
		{ "trigger": "CCLabelAtlas_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCLabelAtlas_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCLabelAtlas_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCLabelAtlas_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCLabelAtlas_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCLabelAtlas_getTextureAtlas()", "contents": "getTextureAtlas()" }
,
		{ "trigger": "CCLabelAtlas_visit()", "contents": "visit()" }
,
		{ "trigger": "CCLabelAtlas_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCLabelAtlas_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCLabelAtlas_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCLabelAtlas_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCLabelAtlas_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCLabelAtlas_setOpacityModifyRGB(bool_isOpacityModifyRGB,)", "contents": "setOpacityModifyRGB(${1:bool_isOpacityModifyRGB})" }
,
		{ "trigger": "CCLabelAtlas_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCLabelAtlas_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCLabelAtlas_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCLabelAtlas_getString()", "contents": "getString()" }
,
		{ "trigger": "CCLabelAtlas_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCLabelAtlas_setTextureAtlas(CCTextureAtlas*_atlas,)", "contents": "setTextureAtlas(${1:CCTextureAtlas*_atlas})" }
,
		{ "trigger": "CCLabelAtlas_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCLabelAtlas_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCLabelAtlas_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCLabelAtlas_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCLabelAtlas_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCLabelAtlas_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCLabelAtlas_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCLabelAtlas_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCLabelAtlas_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCLabelAtlas_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCLabelAtlas_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCLabelAtlas_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCLabelAtlas_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCLabelAtlas_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCLabelAtlas_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCLabelAtlas_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCLabelAtlas_copy()", "contents": "copy()" }
,
		{ "trigger": "CCLabelAtlas_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCLabelAtlas_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCLabelAtlas_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCLabelAtlas_getQuadsToDraw()", "contents": "getQuadsToDraw()" }
,
		{ "trigger": "CCLabelAtlas_description()", "contents": "description()" }
,
		{ "trigger": "CCLabelAtlas_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCLabelAtlas_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCLabelAtlas_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCLabelAtlas_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCLabelAtlas_setString(const_char_*label,)", "contents": "setString(${1:const_char_*label})" }
,
		{ "trigger": "CCLabelAtlas_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCLabelAtlas_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCLabelAtlas_retain()", "contents": "retain()" }
,
		{ "trigger": "CCLabelAtlas_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCLabelAtlas_release()", "contents": "release()" }
,
		{ "trigger": "CCLabelAtlas_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCLabelAtlas_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCLabelAtlas_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCLabelAtlas_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCLabelAtlas_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCLabelAtlas_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCLabelAtlas_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCLabelAtlas_setColor(ccColor3B_color,)", "contents": "setColor(${1:ccColor3B_color})" }
,
		{ "trigger": "CCLabelAtlas_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCLabelAtlas_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCLabelAtlas_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCLabelAtlas_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCLabelAtlas_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCLabelAtlas_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCLabelAtlas_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCLabelAtlas_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCLabelAtlas_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCLabelAtlas_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCLabelAtlas_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCLabelAtlas_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCLabelAtlas_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCLabelAtlas_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCLabelAtlas_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCLabelAtlas_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCLabelAtlas_create(const_char_*label,const_char_*charMapFile,unsigned_int_itemWidth,unsigned_int_itemHeight,unsigned_int_startCharMap,)", "contents": "CCLabelAtlas:create(${1:const_char_*label},${2:const_char_*charMapFile},${3:unsigned_int_itemWidth},${4:unsigned_int_itemHeight},${5:unsigned_int_startCharMap})" }
,
		{ "trigger": "CCLabelAtlas_create(const_char_*sring,const_char_*fntFile,)", "contents": "CCLabelAtlas:create(${1:const_char_*sring},${2:const_char_*fntFile})" }
,

		{ "trigger": "CCScaleTo_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCScaleTo_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCScaleTo_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCScaleTo_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCScaleTo_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCScaleTo_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCScaleTo_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCScaleTo_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCScaleTo_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCScaleTo_retain()", "contents": "retain()" }
,
		{ "trigger": "CCScaleTo_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCScaleTo_copy()", "contents": "copy()" }
,
		{ "trigger": "CCScaleTo_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCScaleTo_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCScaleTo_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCScaleTo_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCScaleTo_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCScaleTo_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCScaleTo_release()", "contents": "release()" }
,
		{ "trigger": "CCScaleTo_create(float_duration,float_sx,float_sy,)", "contents": "CCScaleTo:create(${1:float_duration},${2:float_sx},${3:float_sy})" }
,
		{ "trigger": "CCScaleTo_create(float_duration,float_s,)", "contents": "CCScaleTo:create(${1:float_duration},${2:float_s})" }
,

		{ "trigger": "CCSequence_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCSequence_retain()", "contents": "retain()" }
,
		{ "trigger": "CCSequence_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCSequence_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCSequence_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCSequence_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCSequence_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCSequence_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCSequence_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCSequence_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCSequence_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCSequence_copy()", "contents": "copy()" }
,
		{ "trigger": "CCSequence_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCSequence_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCSequence_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCSequence_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCSequence_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCSequence_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCSequence_release()", "contents": "release()" }
,
		{ "trigger": "CCSequence_create(CCArray_*actions,)", "contents": "CCSequence:create(${1:CCArray_*actions})" }
,
		{ "trigger": "CCSequence_createWithTwoActions(CCFiniteTimeAction_*pActionOne,CCFiniteTimeAction_*pActionTwo,)", "contents": "CCSequence:createWithTwoActions(${1:CCFiniteTimeAction_*pActionOne},${2:CCFiniteTimeAction_*pActionTwo})" }
,

		{ "trigger": "CCEaseBounce_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseBounce_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseBounce_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseBounce_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseBounce_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseBounce_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseBounce_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseBounce_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseBounce_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseBounce_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseBounce_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseBounce_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseBounce_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseBounce_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseBounce_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseBounce_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseBounce_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseBounce_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseBounce_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseBounce_create(CCActionInterval*_pAction,)", "contents": "CCEaseBounce:create(${1:CCActionInterval*_pAction})" }
,

		{ "trigger": "CCMenuItemSprite_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCMenuItemSprite_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCMenuItemSprite_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCMenuItemSprite_getNormalImage()", "contents": "getNormalImage()" }
,
		{ "trigger": "CCMenuItemSprite_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCMenuItemSprite_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCMenuItemSprite_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCMenuItemSprite_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCMenuItemSprite_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCMenuItemSprite_transform()", "contents": "transform()" }
,
		{ "trigger": "CCMenuItemSprite_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCMenuItemSprite_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCMenuItemSprite_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCMenuItemSprite_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemSprite_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCMenuItemSprite_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCMenuItemSprite_activate()", "contents": "activate()" }
,
		{ "trigger": "CCMenuItemSprite_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCMenuItemSprite_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCMenuItemSprite_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCMenuItemSprite_draw()", "contents": "draw()" }
,
		{ "trigger": "CCMenuItemSprite_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCMenuItemSprite_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCMenuItemSprite_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCMenuItemSprite_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCMenuItemSprite_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCMenuItemSprite_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCMenuItemSprite_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCMenuItemSprite_setDisabledImage(CCNode*_pImage,)", "contents": "setDisabledImage(${1:CCNode*_pImage})" }
,
		{ "trigger": "CCMenuItemSprite_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCMenuItemSprite_setEnabled(bool_bEnabled,)", "contents": "setEnabled(${1:bool_bEnabled})" }
,
		{ "trigger": "CCMenuItemSprite_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCMenuItemSprite_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemSprite_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCMenuItemSprite_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCMenuItemSprite_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCMenuItemSprite_setSelectedImage(CCNode*_pImage,)", "contents": "setSelectedImage(${1:CCNode*_pImage})" }
,
		{ "trigger": "CCMenuItemSprite_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCMenuItemSprite_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCMenuItemSprite_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCMenuItemSprite_retain()", "contents": "retain()" }
,
		{ "trigger": "CCMenuItemSprite_isSelected()", "contents": "isSelected()" }
,
		{ "trigger": "CCMenuItemSprite_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCMenuItemSprite_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCMenuItemSprite_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCMenuItemSprite_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCMenuItemSprite_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCMenuItemSprite_visit()", "contents": "visit()" }
,
		{ "trigger": "CCMenuItemSprite_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemSprite_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCMenuItemSprite_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCMenuItemSprite_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCMenuItemSprite_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCMenuItemSprite_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCMenuItemSprite_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCMenuItemSprite_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCMenuItemSprite_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCMenuItemSprite_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCMenuItemSprite_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCMenuItemSprite_selected()", "contents": "selected()" }
,
		{ "trigger": "CCMenuItemSprite_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCMenuItemSprite_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCMenuItemSprite_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCMenuItemSprite_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItemSprite_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCMenuItemSprite_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCMenuItemSprite_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCMenuItemSprite_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItemSprite_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCMenuItemSprite_getSelectedImage()", "contents": "getSelectedImage()" }
,
		{ "trigger": "CCMenuItemSprite_setEnabled(bool_enabled,)", "contents": "setEnabled(${1:bool_enabled})" }
,
		{ "trigger": "CCMenuItemSprite_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCMenuItemSprite_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCMenuItemSprite_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCMenuItemSprite_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCMenuItemSprite_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCMenuItemSprite_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCMenuItemSprite_copy()", "contents": "copy()" }
,
		{ "trigger": "CCMenuItemSprite_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCMenuItemSprite_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCMenuItemSprite_setNormalImage(CCNode*_pImage,)", "contents": "setNormalImage(${1:CCNode*_pImage})" }
,
		{ "trigger": "CCMenuItemSprite_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItemSprite_setColor(ccColor3B_color,)", "contents": "setColor(${1:ccColor3B_color})" }
,
		{ "trigger": "CCMenuItemSprite_description()", "contents": "description()" }
,
		{ "trigger": "CCMenuItemSprite_registerScriptTapHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptTapHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCMenuItemSprite_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemSprite_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCMenuItemSprite_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCMenuItemSprite_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "CCMenuItemSprite_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCMenuItemSprite_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCMenuItemSprite_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCMenuItemSprite_getDisabledImage()", "contents": "getDisabledImage()" }
,
		{ "trigger": "CCMenuItemSprite_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCMenuItemSprite_release()", "contents": "release()" }
,
		{ "trigger": "CCMenuItemSprite_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCMenuItemSprite_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCMenuItemSprite_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCMenuItemSprite_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCMenuItemSprite_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCMenuItemSprite_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCMenuItemSprite_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCMenuItemSprite_unselected()", "contents": "unselected()" }
,
		{ "trigger": "CCMenuItemSprite_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCMenuItemSprite_unregisterScriptTapHandler()", "contents": "unregisterScriptTapHandler()" }
,
		{ "trigger": "CCMenuItemSprite_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCMenuItemSprite_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCMenuItemSprite_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCMenuItemSprite_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCMenuItemSprite_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCMenuItemSprite_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCMenuItemSprite_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCMenuItemSprite_rect()", "contents": "rect()" }
,
		{ "trigger": "CCMenuItemSprite_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCMenuItemSprite_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCMenuItemSprite_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCMenuItemSprite_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCMenuItemSprite_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCMenuItemSprite_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCMenuItemSprite_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCMenuItemSprite_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCMenuItemSprite_create(CCNode*_normalSprite,CCNode*_selectedSprite,CCNode*_disabledSprite,)", "contents": "CCMenuItemSprite:create(${1:CCNode*_normalSprite},${2:CCNode*_selectedSprite},${3:CCNode*_disabledSprite})" }
,
		{ "trigger": "CCMenuItemSprite_create(CCNode*_normalSprite,CCNode*_selectedSprite,)", "contents": "CCMenuItemSprite:create(${1:CCNode*_normalSprite},${2:CCNode*_selectedSprite})" }
,

		{ "trigger": "CCTransitionProgressOutIn_create(float_t,CCScene*_scene,)", "contents": "CCTransitionProgressOutIn:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCTransitionFlipAngular_create(float_t,CCScene*_s,tOrientation_o_=_kCCTransitionOrientationRightOver,)", "contents": "CCTransitionFlipAngular:create(${1:float_t},${2:CCScene*_s},${3:tOrientation_o_=_kCCTransitionOrientationRightOver})" }
,

		{ "trigger": "CCFiniteTimeAction_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCFiniteTimeAction_copy()", "contents": "copy()" }
,
		{ "trigger": "CCFiniteTimeAction_retain()", "contents": "retain()" }
,
		{ "trigger": "CCFiniteTimeAction_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCFiniteTimeAction_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCFiniteTimeAction_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCFiniteTimeAction_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCFiniteTimeAction_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCFiniteTimeAction_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCFiniteTimeAction_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCFiniteTimeAction_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCFiniteTimeAction_release()", "contents": "release()" }
,
		{ "trigger": "CCFiniteTimeAction_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCFiniteTimeAction_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCFiniteTimeAction_getTarget()", "contents": "getTarget()" }
,

		{ "trigger": "CCFadeOutUpTiles_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCFadeOutUpTiles_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCFadeOutUpTiles_tile(CCPoint_pos,)", "contents": "tile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCFadeOutUpTiles_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCFadeOutUpTiles_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCFadeOutUpTiles_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCFadeOutUpTiles_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCFadeOutUpTiles_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCFadeOutUpTiles_retain()", "contents": "retain()" }
,
		{ "trigger": "CCFadeOutUpTiles_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCFadeOutUpTiles_release()", "contents": "release()" }
,
		{ "trigger": "CCFadeOutUpTiles_setTile(CCPoint_pos,ccQuad3_coords,)", "contents": "setTile(${1:CCPoint_pos},${2:ccQuad3_coords})" }
,
		{ "trigger": "CCFadeOutUpTiles_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCFadeOutUpTiles_transformTile(CCPoint_pos,float_distance,)", "contents": "transformTile(${1:CCPoint_pos},${2:float_distance})" }
,
		{ "trigger": "CCFadeOutUpTiles_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCFadeOutUpTiles_originalTile(CCPoint_pos,)", "contents": "originalTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCFadeOutUpTiles_turnOnTile(CCPoint_pos,)", "contents": "turnOnTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCFadeOutUpTiles_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCFadeOutUpTiles_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCFadeOutUpTiles_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCFadeOutUpTiles_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCFadeOutUpTiles_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCFadeOutUpTiles_copy()", "contents": "copy()" }
,
		{ "trigger": "CCFadeOutUpTiles_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCFadeOutUpTiles_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCFadeOutUpTiles_turnOffTile(CCPoint_pos,)", "contents": "turnOffTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCFadeOutUpTiles_create(float_duration,CCSize_gridSize,)", "contents": "CCFadeOutUpTiles:create(${1:float_duration},${2:CCSize_gridSize})" }
,



		{ "trigger": "CCTransitionSplitCols_create(float_t,CCScene*_scene,)", "contents": "CCTransitionSplitCols:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCParticleMeteor_setEndColor(const_ccColor4F_var,)", "contents": "setEndColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleMeteor_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleMeteor_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCParticleMeteor_setRotatePerSecondVar(float_degrees,)", "contents": "setRotatePerSecondVar(${1:float_degrees})" }
,
		{ "trigger": "CCParticleMeteor_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCParticleMeteor_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCParticleMeteor_transform()", "contents": "transform()" }
,
		{ "trigger": "CCParticleMeteor_getRotatePerSecond()", "contents": "getRotatePerSecond()" }
,
		{ "trigger": "CCParticleMeteor_setTextureWithRect(CCTexture2D_*texture,const_CCRect&_rect,)", "contents": "setTextureWithRect(${1:CCTexture2D_*texture},${2:const_CCRect&_rect})" }
,
		{ "trigger": "CCParticleMeteor_getAngleVar()", "contents": "getAngleVar()" }
,
		{ "trigger": "CCParticleMeteor_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleMeteor_isAutoRemoveOnFinish()", "contents": "isAutoRemoveOnFinish()" }
,
		{ "trigger": "CCParticleMeteor_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleMeteor_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCParticleMeteor_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCParticleMeteor_setTangentialAccel(float_t,)", "contents": "setTangentialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleMeteor_getStartSpin()", "contents": "getStartSpin()" }
,
		{ "trigger": "CCParticleMeteor_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCParticleMeteor_getStartColor()", "contents": "getStartColor()" }
,
		{ "trigger": "CCParticleMeteor_setStartSpinVar(float_var,)", "contents": "setStartSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleMeteor_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCParticleMeteor_setStartRadius(float_startRadius,)", "contents": "setStartRadius(${1:float_startRadius})" }
,
		{ "trigger": "CCParticleMeteor_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCParticleMeteor_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCParticleMeteor_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCParticleMeteor_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCParticleMeteor_getPosVar()", "contents": "getPosVar()" }
,
		{ "trigger": "CCParticleMeteor_setAngleVar(float_angle,)", "contents": "setAngleVar(${1:float_angle})" }
,
		{ "trigger": "CCParticleMeteor_isFull()", "contents": "isFull()" }
,
		{ "trigger": "CCParticleMeteor_setStartRadiusVar(float_startRadiusVar,)", "contents": "setStartRadiusVar(${1:float_startRadiusVar})" }
,
		{ "trigger": "CCParticleMeteor_getStartSpinVar()", "contents": "getStartSpinVar()" }
,
		{ "trigger": "CCParticleMeteor_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCParticleMeteor_setDisplayFrame(CCSpriteFrame*_spriteFrame,)", "contents": "setDisplayFrame(${1:CCSpriteFrame*_spriteFrame})" }
,
		{ "trigger": "CCParticleMeteor_setBatchNode(CCParticleBatchNode*_node,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_node})" }
,
		{ "trigger": "CCParticleMeteor_isBlendAdditive()", "contents": "isBlendAdditive()" }
,
		{ "trigger": "CCParticleMeteor_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCParticleMeteor_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCParticleMeteor_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCParticleMeteor_getEmissionRate()", "contents": "getEmissionRate()" }
,
		{ "trigger": "CCParticleMeteor_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCParticleMeteor_setEndRadiusVar(float_endRadiusVar,)", "contents": "setEndRadiusVar(${1:float_endRadiusVar})" }
,
		{ "trigger": "CCParticleMeteor_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleMeteor_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCParticleMeteor_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCParticleMeteor_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCParticleMeteor_postStep()", "contents": "postStep()" }
,
		{ "trigger": "CCParticleMeteor_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCParticleMeteor_setBlendAdditive(bool_value,)", "contents": "setBlendAdditive(${1:bool_value})" }
,
		{ "trigger": "CCParticleMeteor_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleMeteor_setEndSpin(float_var,)", "contents": "setEndSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleMeteor_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCParticleMeteor_setBatchNode(CCParticleBatchNode*_batchNode,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_batchNode})" }
,
		{ "trigger": "CCParticleMeteor_getEndRadius()", "contents": "getEndRadius()" }
,
		{ "trigger": "CCParticleMeteor_getStartSize()", "contents": "getStartSize()" }
,
		{ "trigger": "CCParticleMeteor_getTotalParticles()", "contents": "getTotalParticles()" }
,
		{ "trigger": "CCParticleMeteor_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCParticleMeteor_getStartSizeVar()", "contents": "getStartSizeVar()" }
,
		{ "trigger": "CCParticleMeteor_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleMeteor_setGravity(const_CCPoint&_g,)", "contents": "setGravity(${1:const_CCPoint&_g})" }
,
		{ "trigger": "CCParticleMeteor_getSourcePosition()", "contents": "getSourcePosition()" }
,
		{ "trigger": "CCParticleMeteor_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleMeteor_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCParticleMeteor_getTangentialAccelVar()", "contents": "getTangentialAccelVar()" }
,
		{ "trigger": "CCParticleMeteor_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleMeteor_getEndSpinVar()", "contents": "getEndSpinVar()" }
,
		{ "trigger": "CCParticleMeteor_setAutoRemoveOnFinish(bool_var,)", "contents": "setAutoRemoveOnFinish(${1:bool_var})" }
,
		{ "trigger": "CCParticleMeteor_setPosVar(CCPoint_pos,)", "contents": "setPosVar(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleMeteor_setEmissionRate(float_rate,)", "contents": "setEmissionRate(${1:float_rate})" }
,
		{ "trigger": "CCParticleMeteor_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleMeteor_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleMeteor_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCParticleMeteor_getRadialAccelVar()", "contents": "getRadialAccelVar()" }
,
		{ "trigger": "CCParticleMeteor_getStartRadius()", "contents": "getStartRadius()" }
,
		{ "trigger": "CCParticleMeteor_getEndColorVar()", "contents": "getEndColorVar()" }
,
		{ "trigger": "CCParticleMeteor_setStartColorVar(const_ccColor4F_var,)", "contents": "setStartColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleMeteor_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCParticleMeteor_initWithFile(const_char*_plistFile,)", "contents": "initWithFile(${1:const_char*_plistFile})" }
,
		{ "trigger": "CCParticleMeteor_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCParticleMeteor_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCParticleMeteor_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCParticleMeteor_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCParticleMeteor_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCParticleMeteor_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCParticleMeteor_setStartSpin(float_var,)", "contents": "setStartSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleMeteor_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCParticleMeteor_getEndSize()", "contents": "getEndSize()" }
,
		{ "trigger": "CCParticleMeteor_setSourcePosition(CCPoint_pos,)", "contents": "setSourcePosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleMeteor_initParticle(tCCParticle*_particle,)", "contents": "initParticle(${1:tCCParticle*_particle})" }
,
		{ "trigger": "CCParticleMeteor_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCParticleMeteor_updateQuadWithParticle(tCCParticle*_particle,const_CCPoint&_newPosition,)", "contents": "updateQuadWithParticle(${1:tCCParticle*_particle},${2:const_CCPoint&_newPosition})" }
,
		{ "trigger": "CCParticleMeteor_setStartColor(const_ccColor4F_var,)", "contents": "setStartColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleMeteor_getEndColor()", "contents": "getEndColor()" }
,
		{ "trigger": "CCParticleMeteor_setEmitterMode(int_mode,)", "contents": "setEmitterMode(${1:int_mode})" }
,
		{ "trigger": "CCParticleMeteor_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCParticleMeteor_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCParticleMeteor_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCParticleMeteor_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCParticleMeteor_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCParticleMeteor_setStartSizeVar(float_size,)", "contents": "setStartSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleMeteor_getLife()", "contents": "getLife()" }
,
		{ "trigger": "CCParticleMeteor_setBlendFunc(ccBlendFunc_var,)", "contents": "setBlendFunc(${1:ccBlendFunc_var})" }
,
		{ "trigger": "CCParticleMeteor_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleMeteor_getAngle()", "contents": "getAngle()" }
,
		{ "trigger": "CCParticleMeteor_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCParticleMeteor_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCParticleMeteor_getEmitterMode()", "contents": "getEmitterMode()" }
,
		{ "trigger": "CCParticleMeteor_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleMeteor_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCParticleMeteor_getTangentialAccel()", "contents": "getTangentialAccel()" }
,
		{ "trigger": "CCParticleMeteor_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCParticleMeteor_visit()", "contents": "visit()" }
,
		{ "trigger": "CCParticleMeteor_setTexture(CCTexture2D*_var,)", "contents": "setTexture(${1:CCTexture2D*_var})" }
,
		{ "trigger": "CCParticleMeteor_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "CCParticleMeteor_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCParticleMeteor_setScale(float_s,)", "contents": "setScale(${1:float_s})" }
,
		{ "trigger": "CCParticleMeteor_draw()", "contents": "draw()" }
,
		{ "trigger": "CCParticleMeteor_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleMeteor_setEndSpinVar(float_var,)", "contents": "setEndSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleMeteor_setSpeed(float_speed,)", "contents": "setSpeed(${1:float_speed})" }
,
		{ "trigger": "CCParticleMeteor_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCParticleMeteor_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCParticleMeteor_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCParticleMeteor_setStartSize(float_size,)", "contents": "setStartSize(${1:float_size})" }
,
		{ "trigger": "CCParticleMeteor_getStartRadiusVar()", "contents": "getStartRadiusVar()" }
,
		{ "trigger": "CCParticleMeteor_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCParticleMeteor_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCParticleMeteor_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCParticleMeteor_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCParticleMeteor_getSpeed()", "contents": "getSpeed()" }
,
		{ "trigger": "CCParticleMeteor_setTotalParticles(unsigned_int_tp,)", "contents": "setTotalParticles(${1:unsigned_int_tp})" }
,
		{ "trigger": "CCParticleMeteor_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCParticleMeteor_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCParticleMeteor_setRotatePerSecond(float_degrees,)", "contents": "setRotatePerSecond(${1:float_degrees})" }
,
		{ "trigger": "CCParticleMeteor_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCParticleMeteor_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCParticleMeteor_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCParticleMeteor_getEndRadiusVar()", "contents": "getEndRadiusVar()" }
,
		{ "trigger": "CCParticleMeteor_getParticleCount()", "contents": "getParticleCount()" }
,
		{ "trigger": "CCParticleMeteor_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCParticleMeteor_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCParticleMeteor_getEndSizeVar()", "contents": "getEndSizeVar()" }
,
		{ "trigger": "CCParticleMeteor_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleMeteor_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCParticleMeteor_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCParticleMeteor_setTangentialAccelVar(float_t,)", "contents": "setTangentialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleMeteor_getSpeedVar()", "contents": "getSpeedVar()" }
,
		{ "trigger": "CCParticleMeteor_setSpeedVar(float_speed,)", "contents": "setSpeedVar(${1:float_speed})" }
,
		{ "trigger": "CCParticleMeteor_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCParticleMeteor_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCParticleMeteor_setEndSizeVar(float_size,)", "contents": "setEndSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleMeteor_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCParticleMeteor_getLifeVar()", "contents": "getLifeVar()" }
,
		{ "trigger": "CCParticleMeteor_setPositionType(tCCPositionType_type,)", "contents": "setPositionType(${1:tCCPositionType_type})" }
,
		{ "trigger": "CCParticleMeteor_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCParticleMeteor_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleMeteor_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCParticleMeteor_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCParticleMeteor_getBatchNode()", "contents": "getBatchNode()" }
,
		{ "trigger": "CCParticleMeteor_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleMeteor_initWithTotalParticles(unsigned_int_number,)", "contents": "initWithTotalParticles(${1:unsigned_int_number})" }
,
		{ "trigger": "CCParticleMeteor_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleMeteor_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCParticleMeteor_setDuration(float_d,)", "contents": "setDuration(${1:float_d})" }
,
		{ "trigger": "CCParticleMeteor_setRadialAccel(float_t,)", "contents": "setRadialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleMeteor_resetSystem()", "contents": "resetSystem()" }
,
		{ "trigger": "CCParticleMeteor_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleMeteor_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCParticleMeteor_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCParticleMeteor_copy()", "contents": "copy()" }
,
		{ "trigger": "CCParticleMeteor_setEndSize(float_size,)", "contents": "setEndSize(${1:float_size})" }
,
		{ "trigger": "CCParticleMeteor_getRadialAccel()", "contents": "getRadialAccel()" }
,
		{ "trigger": "CCParticleMeteor_isActive()", "contents": "isActive()" }
,
		{ "trigger": "CCParticleMeteor_description()", "contents": "description()" }
,
		{ "trigger": "CCParticleMeteor_getGravity()", "contents": "getGravity()" }
,
		{ "trigger": "CCParticleMeteor_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleMeteor_setRadialAccelVar(float_t,)", "contents": "setRadialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleMeteor_setLifeVar(float_lifeVar,)", "contents": "setLifeVar(${1:float_lifeVar})" }
,
		{ "trigger": "CCParticleMeteor_setEndRadius(float_endRadius,)", "contents": "setEndRadius(${1:float_endRadius})" }
,
		{ "trigger": "CCParticleMeteor_getEndSpin()", "contents": "getEndSpin()" }
,
		{ "trigger": "CCParticleMeteor_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCParticleMeteor_setAngle(float_angle,)", "contents": "setAngle(${1:float_angle})" }
,
		{ "trigger": "CCParticleMeteor_retain()", "contents": "retain()" }
,
		{ "trigger": "CCParticleMeteor_release()", "contents": "release()" }
,
		{ "trigger": "CCParticleMeteor_getRotatePerSecondVar()", "contents": "getRotatePerSecondVar()" }
,
		{ "trigger": "CCParticleMeteor_addParticle()", "contents": "addParticle()" }
,
		{ "trigger": "CCParticleMeteor_setLife(float_life,)", "contents": "setLife(${1:float_life})" }
,
		{ "trigger": "CCParticleMeteor_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleMeteor_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCParticleMeteor_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCParticleMeteor_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCParticleMeteor_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCParticleMeteor_setTexture(CCTexture2D*_texture,)", "contents": "setTexture(${1:CCTexture2D*_texture})" }
,
		{ "trigger": "CCParticleMeteor_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCParticleMeteor_setEndColorVar(const_ccColor4F_var,)", "contents": "setEndColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleMeteor_getStartColorVar()", "contents": "getStartColorVar()" }
,
		{ "trigger": "CCParticleMeteor_stopSystem()", "contents": "stopSystem()" }
,
		{ "trigger": "CCParticleMeteor_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCParticleMeteor_create()", "contents": "CCParticleMeteor:create()" }
,

		{ "trigger": "CCEaseSineInOut_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseSineInOut_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseSineInOut_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseSineInOut_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseSineInOut_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseSineInOut_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseSineInOut_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseSineInOut_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseSineInOut_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseSineInOut_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseSineInOut_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseSineInOut_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseSineInOut_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseSineInOut_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseSineInOut_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseSineInOut_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseSineInOut_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseSineInOut_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseSineInOut_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseSineInOut_create(CCActionInterval*_pAction,)", "contents": "CCEaseSineInOut:create(${1:CCActionInterval*_pAction})" }
,

		{ "trigger": "CCTransitionFlipY_create(float_t,CCScene*_s,tOrientation_o_=_kCCTransitionOrientationUpOver,)", "contents": "CCTransitionFlipY:create(${1:float_t},${2:CCScene*_s},${3:tOrientation_o_=_kCCTransitionOrientationUpOver})" }
,

		{ "trigger": "CCTransitionFlipX_create(float_t,CCScene*_s,tOrientation_o_=_kCCTransitionOrientationRightOver,)", "contents": "CCTransitionFlipX:create(${1:float_t},${2:CCScene*_s},${3:tOrientation_o_=_kCCTransitionOrientationRightOver})" }
,

		{ "trigger": "CCTransitionSceneOriented_create(float_t,CCScene*_scene,tOrientation_o,)", "contents": "CCTransitionSceneOriented:create(${1:float_t},${2:CCScene*_scene},${3:tOrientation_o})" }
,

		{ "trigger": "CCSpeed_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCSpeed_retain()", "contents": "retain()" }
,
		{ "trigger": "CCSpeed_getSpeed()", "contents": "getSpeed()" }
,
		{ "trigger": "CCSpeed_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCSpeed_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCSpeed_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCSpeed_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCSpeed_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCSpeed_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCSpeed_copy()", "contents": "copy()" }
,
		{ "trigger": "CCSpeed_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCSpeed_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCSpeed_setSpeed(float_fSpeed,)", "contents": "setSpeed(${1:float_fSpeed})" }
,
		{ "trigger": "CCSpeed_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCSpeed_release()", "contents": "release()" }
,
		{ "trigger": "CCSpeed_create(CCActionInterval_*pAction,float_fRate,)", "contents": "CCSpeed:create(${1:CCActionInterval_*pAction},${2:float_fRate})" }
,

		{ "trigger": "CCProgressTo_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCProgressTo_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCProgressTo_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCProgressTo_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCProgressTo_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCProgressTo_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCProgressTo_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCProgressTo_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCProgressTo_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCProgressTo_retain()", "contents": "retain()" }
,
		{ "trigger": "CCProgressTo_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCProgressTo_copy()", "contents": "copy()" }
,
		{ "trigger": "CCProgressTo_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCProgressTo_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCProgressTo_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCProgressTo_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCProgressTo_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCProgressTo_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCProgressTo_release()", "contents": "release()" }
,
		{ "trigger": "CCProgressTo_create(float_duration,float_fPercent,)", "contents": "CCProgressTo:create(${1:float_duration},${2:float_fPercent})" }
,

		{ "trigger": "CCSkewBy_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCSkewBy_retain()", "contents": "retain()" }
,
		{ "trigger": "CCSkewBy_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCSkewBy_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCSkewBy_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCSkewBy_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCSkewBy_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCSkewBy_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCSkewBy_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCSkewBy_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCSkewBy_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCSkewBy_copy()", "contents": "copy()" }
,
		{ "trigger": "CCSkewBy_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCSkewBy_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCSkewBy_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCSkewBy_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCSkewBy_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCSkewBy_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCSkewBy_release()", "contents": "release()" }
,
		{ "trigger": "CCSkewBy_create(float_t,float_deltaSkewX,float_deltaSkewY,)", "contents": "CCSkewBy:create(${1:float_t},${2:float_deltaSkewX},${3:float_deltaSkewY})" }
,

		{ "trigger": "CCReverseTime_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCReverseTime_retain()", "contents": "retain()" }
,
		{ "trigger": "CCReverseTime_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCReverseTime_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCReverseTime_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCReverseTime_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCReverseTime_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCReverseTime_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCReverseTime_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCReverseTime_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCReverseTime_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCReverseTime_copy()", "contents": "copy()" }
,
		{ "trigger": "CCReverseTime_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCReverseTime_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCReverseTime_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCReverseTime_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCReverseTime_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCReverseTime_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCReverseTime_release()", "contents": "release()" }
,
		{ "trigger": "CCReverseTime_create(CCFiniteTimeAction_*pAction,)", "contents": "CCReverseTime:create(${1:CCFiniteTimeAction_*pAction})" }
,

		{ "trigger": "CCMenu_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCMenu_setKeypadEnabled(bool_bValue,)", "contents": "setKeypadEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCMenu_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCMenu_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCMenu_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCMenu_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCMenu_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCMenu_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCMenu_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCMenu_transform()", "contents": "transform()" }
,
		{ "trigger": "CCMenu_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCMenu_visit()", "contents": "visit()" }
,
		{ "trigger": "CCMenu_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCMenu_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCMenu_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCMenu_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCMenu_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCMenu_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCMenu_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCMenu_draw()", "contents": "draw()" }
,
		{ "trigger": "CCMenu_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCMenu_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCMenu_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCMenu_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCMenu_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCMenu_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCMenu_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCMenu_unregisterScriptAccelerateHandler()", "contents": "unregisterScriptAccelerateHandler()" }
,
		{ "trigger": "CCMenu_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCMenu_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCMenu_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCMenu_setTouchEnabled(bool_bValue,)", "contents": "setTouchEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCMenu_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCMenu_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCMenu_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCMenu_addChild(CCMenuItem*_child,int_zOrder_=_0,int_tag_=_-1,)", "contents": "addChild(${1:CCMenuItem*_child},${2:int_zOrder_=_0},${3:int_tag_=_-1})" }
,
		{ "trigger": "CCMenu_registerScriptKeypadHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptKeypadHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCMenu_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCMenu_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCMenu_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCMenu_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCMenu_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCMenu_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCMenu_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCMenu_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCMenu_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCMenu_unregisterScriptTouchHandler()", "contents": "unregisterScriptTouchHandler()" }
,
		{ "trigger": "CCMenu_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCMenu_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCMenu_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCMenu_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCMenu_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCMenu_isKeypadEnabled()", "contents": "isKeypadEnabled()" }
,
		{ "trigger": "CCMenu_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCMenu_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCMenu_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCMenu_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCMenu_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCMenu_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCMenu_alignItemsVerticallyWithPadding(float_padding,)", "contents": "alignItemsVerticallyWithPadding(${1:float_padding})" }
,
		{ "trigger": "CCMenu_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCMenu_alignItemsVertically()", "contents": "alignItemsVertically()" }
,
		{ "trigger": "CCMenu_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCMenu_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCMenu_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCMenu_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenu_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCMenu_setAccelerometerEnabled(bool_bValue,)", "contents": "setAccelerometerEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCMenu_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCMenu_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCMenu_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenu_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCMenu_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCMenu_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCMenu_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCMenu_isTouchEnabled()", "contents": "isTouchEnabled()" }
,
		{ "trigger": "CCMenu_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCMenu_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCMenu_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCMenu_copy()", "contents": "copy()" }
,
		{ "trigger": "CCMenu_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCMenu_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCMenu_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenu_description()", "contents": "description()" }
,
		{ "trigger": "CCMenu_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCMenu_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCMenu_setEnabled(bool_value,)", "contents": "setEnabled(${1:bool_value})" }
,
		{ "trigger": "CCMenu_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "CCMenu_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCMenu_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCMenu_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCMenu_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCMenu_retain()", "contents": "retain()" }
,
		{ "trigger": "CCMenu_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCMenu_release()", "contents": "release()" }
,
		{ "trigger": "CCMenu_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCMenu_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCMenu_alignItemsHorizontallyWithPadding(float_padding,)", "contents": "alignItemsHorizontallyWithPadding(${1:float_padding})" }
,
		{ "trigger": "CCMenu_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCMenu_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCMenu_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCMenu_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCMenu_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCMenu_setColor(ccColor3B_color,)", "contents": "setColor(${1:ccColor3B_color})" }
,
		{ "trigger": "CCMenu_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCMenu_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCMenu_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCMenu_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCMenu_isAccelerometerEnabled()", "contents": "isAccelerometerEnabled()" }
,
		{ "trigger": "CCMenu_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCMenu_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCMenu_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCMenu_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCMenu_registerScriptAccelerateHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptAccelerateHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCMenu_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCMenu_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCMenu_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCMenu_registerScriptTouchHandler(LUA_FUNCTION_nHandler,bool_bIsMultiTouches_=_false,int_nPriority_=_0,bool_bSwallowsTouches_=_false,)", "contents": "registerScriptTouchHandler(${1:LUA_FUNCTION_nHandler},${2:bool_bIsMultiTouches_=_false},${3:int_nPriority_=_0},${4:bool_bSwallowsTouches_=_false})" }
,
		{ "trigger": "CCMenu_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCMenu_unregisterScriptKeypadHandler()", "contents": "unregisterScriptKeypadHandler()" }
,
		{ "trigger": "CCMenu_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCMenu_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCMenu_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCMenu_alignItemsHorizontally()", "contents": "alignItemsHorizontally()" }
,
		{ "trigger": "CCMenu_createWithArray(CCArray*_pArrayOfItems,)", "contents": "CCMenu:createWithArray(${1:CCArray*_pArrayOfItems})" }
,
		{ "trigger": "CCMenu_createWithItem(CCMenuItem*_item,)", "contents": "CCMenu:createWithItem(${1:CCMenuItem*_item})" }
,
		{ "trigger": "CCMenu_create()", "contents": "CCMenu:create()" }
,

		{ "trigger": "CCRenderTexture_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCRenderTexture_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCRenderTexture_beginWithClear(float_r,float_g,float_b,float_a,)", "contents": "beginWithClear(${1:float_r},${2:float_g},${3:float_b},${4:float_a})" }
,
		{ "trigger": "CCRenderTexture_saveToFile(const_char_*name,tCCImageFormat_format,)", "contents": "saveToFile(${1:const_char_*name},${2:tCCImageFormat_format})" }
,
		{ "trigger": "CCRenderTexture_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCRenderTexture_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCRenderTexture_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCRenderTexture_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCRenderTexture_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCRenderTexture_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCRenderTexture_transform()", "contents": "transform()" }
,
		{ "trigger": "CCRenderTexture_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCRenderTexture_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCRenderTexture_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCRenderTexture_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCRenderTexture_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCRenderTexture_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCRenderTexture_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCRenderTexture_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCRenderTexture_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCRenderTexture_clear(float_r,float_g,float_b,float_a,)", "contents": "clear(${1:float_r},${2:float_g},${3:float_b},${4:float_a})" }
,
		{ "trigger": "CCRenderTexture_draw()", "contents": "draw()" }
,
		{ "trigger": "CCRenderTexture_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCRenderTexture_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCRenderTexture_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCRenderTexture_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCRenderTexture_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCRenderTexture_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCRenderTexture_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCRenderTexture_clearDepth(float_depthValue,)", "contents": "clearDepth(${1:float_depthValue})" }
,
		{ "trigger": "CCRenderTexture_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCRenderTexture_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCRenderTexture_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCRenderTexture_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCRenderTexture_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCRenderTexture_begin()", "contents": "begin()" }
,
		{ "trigger": "CCRenderTexture_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCRenderTexture_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCRenderTexture_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCRenderTexture_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCRenderTexture_newCCImage()", "contents": "newCCImage()" }
,
		{ "trigger": "CCRenderTexture_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCRenderTexture_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCRenderTexture_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCRenderTexture_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCRenderTexture_visit()", "contents": "visit()" }
,
		{ "trigger": "CCRenderTexture_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCRenderTexture_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCRenderTexture_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCRenderTexture_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCRenderTexture_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCRenderTexture_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCRenderTexture_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCRenderTexture_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCRenderTexture_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCRenderTexture_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCRenderTexture_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCRenderTexture_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCRenderTexture_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCRenderTexture_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCRenderTexture_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCRenderTexture_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCRenderTexture_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCRenderTexture_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCRenderTexture_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCRenderTexture_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCRenderTexture_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCRenderTexture_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCRenderTexture_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCRenderTexture_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCRenderTexture_copy()", "contents": "copy()" }
,
		{ "trigger": "CCRenderTexture_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCRenderTexture_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCRenderTexture_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCRenderTexture_setSprite(CCSprite*_psprite,)", "contents": "setSprite(${1:CCSprite*_psprite})" }
,
		{ "trigger": "CCRenderTexture_description()", "contents": "description()" }
,
		{ "trigger": "CCRenderTexture_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCRenderTexture_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCRenderTexture_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCRenderTexture_clearStencil(int_stencilValue,)", "contents": "clearStencil(${1:int_stencilValue})" }
,
		{ "trigger": "CCRenderTexture_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCRenderTexture_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCRenderTexture_saveToFile(const_char_*szFilePath,)", "contents": "saveToFile(${1:const_char_*szFilePath})" }
,
		{ "trigger": "CCRenderTexture_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCRenderTexture_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCRenderTexture_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCRenderTexture_release()", "contents": "release()" }
,
		{ "trigger": "CCRenderTexture_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCRenderTexture_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCRenderTexture_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCRenderTexture_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCRenderTexture_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCRenderTexture_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCRenderTexture_beginWithClear(float_r,float_g,float_b,float_a,float_depthValue,int_stencilValue,)", "contents": "beginWithClear(${1:float_r},${2:float_g},${3:float_b},${4:float_a},${5:float_depthValue},${6:int_stencilValue})" }
,
		{ "trigger": "CCRenderTexture_retain()", "contents": "retain()" }
,
		{ "trigger": "CCRenderTexture_getSprite()", "contents": "getSprite()" }
,
		{ "trigger": "CCRenderTexture_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCRenderTexture_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCRenderTexture_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCRenderTexture_beginWithClear(float_r,float_g,float_b,float_a,float_depthValue,)", "contents": "beginWithClear(${1:float_r},${2:float_g},${3:float_b},${4:float_a},${5:float_depthValue})" }
,
		{ "trigger": "CCRenderTexture_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCRenderTexture_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCRenderTexture_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCRenderTexture_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCRenderTexture_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCRenderTexture_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCRenderTexture_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCRenderTexture_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCRenderTexture_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCRenderTexture_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCRenderTexture_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCRenderTexture_create(int_w,int_h,)", "contents": "CCRenderTexture:create(${1:int_w},${2:int_h})" }
,
		{ "trigger": "CCRenderTexture_create(int_w,int_h,CCTexture2DPixelFormat_eFormat,)", "contents": "CCRenderTexture:create(${1:int_w},${2:int_h},${3:CCTexture2DPixelFormat_eFormat})" }
,
		{ "trigger": "CCRenderTexture_create(int_w_,int_h,CCTexture2DPixelFormat_eFormat,GLuint_uDepthStencilFormat,)", "contents": "CCRenderTexture:create(${1:int_w_},${2:int_h},${3:CCTexture2DPixelFormat_eFormat},${4:GLuint_uDepthStencilFormat})" }
,

		{ "trigger": "CCEaseElasticOut_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseElasticOut_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseElasticOut_setPeriod(float_fPeriod,)", "contents": "setPeriod(${1:float_fPeriod})" }
,
		{ "trigger": "CCEaseElasticOut_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseElasticOut_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseElasticOut_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseElasticOut_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseElasticOut_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseElasticOut_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseElasticOut_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseElasticOut_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseElasticOut_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseElasticOut_getPeriod()", "contents": "getPeriod()" }
,
		{ "trigger": "CCEaseElasticOut_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseElasticOut_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseElasticOut_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseElasticOut_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseElasticOut_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseElasticOut_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseElasticOut_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseElasticOut_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseElasticOut_create(CCActionInterval_*pAction,float_fPeriod_=_0.3,)", "contents": "CCEaseElasticOut:create(${1:CCActionInterval_*pAction},${2:float_fPeriod_=_0.3})" }
,

		{ "trigger": "CCReuseGrid_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCReuseGrid_copy()", "contents": "copy()" }
,
		{ "trigger": "CCReuseGrid_retain()", "contents": "retain()" }
,
		{ "trigger": "CCReuseGrid_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCReuseGrid_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCReuseGrid_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCReuseGrid_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCReuseGrid_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCReuseGrid_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCReuseGrid_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCReuseGrid_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCReuseGrid_release()", "contents": "release()" }
,
		{ "trigger": "CCReuseGrid_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCReuseGrid_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCReuseGrid_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCReuseGrid_create(int_times,)", "contents": "CCReuseGrid:create(${1:int_times})" }
,

		{ "trigger": "CCParticleSun_setEndColor(const_ccColor4F_var,)", "contents": "setEndColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSun_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleSun_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCParticleSun_setRotatePerSecondVar(float_degrees,)", "contents": "setRotatePerSecondVar(${1:float_degrees})" }
,
		{ "trigger": "CCParticleSun_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCParticleSun_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCParticleSun_transform()", "contents": "transform()" }
,
		{ "trigger": "CCParticleSun_getRotatePerSecond()", "contents": "getRotatePerSecond()" }
,
		{ "trigger": "CCParticleSun_setTextureWithRect(CCTexture2D_*texture,const_CCRect&_rect,)", "contents": "setTextureWithRect(${1:CCTexture2D_*texture},${2:const_CCRect&_rect})" }
,
		{ "trigger": "CCParticleSun_getAngleVar()", "contents": "getAngleVar()" }
,
		{ "trigger": "CCParticleSun_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleSun_isAutoRemoveOnFinish()", "contents": "isAutoRemoveOnFinish()" }
,
		{ "trigger": "CCParticleSun_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleSun_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCParticleSun_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCParticleSun_setTangentialAccel(float_t,)", "contents": "setTangentialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleSun_getStartSpin()", "contents": "getStartSpin()" }
,
		{ "trigger": "CCParticleSun_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCParticleSun_getStartColor()", "contents": "getStartColor()" }
,
		{ "trigger": "CCParticleSun_setStartSpinVar(float_var,)", "contents": "setStartSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleSun_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCParticleSun_setStartRadius(float_startRadius,)", "contents": "setStartRadius(${1:float_startRadius})" }
,
		{ "trigger": "CCParticleSun_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCParticleSun_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCParticleSun_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCParticleSun_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCParticleSun_getPosVar()", "contents": "getPosVar()" }
,
		{ "trigger": "CCParticleSun_isFull()", "contents": "isFull()" }
,
		{ "trigger": "CCParticleSun_setStartRadiusVar(float_startRadiusVar,)", "contents": "setStartRadiusVar(${1:float_startRadiusVar})" }
,
		{ "trigger": "CCParticleSun_getStartSpinVar()", "contents": "getStartSpinVar()" }
,
		{ "trigger": "CCParticleSun_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCParticleSun_setDisplayFrame(CCSpriteFrame*_spriteFrame,)", "contents": "setDisplayFrame(${1:CCSpriteFrame*_spriteFrame})" }
,
		{ "trigger": "CCParticleSun_setBatchNode(CCParticleBatchNode*_node,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_node})" }
,
		{ "trigger": "CCParticleSun_isBlendAdditive()", "contents": "isBlendAdditive()" }
,
		{ "trigger": "CCParticleSun_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCParticleSun_getEndRadius()", "contents": "getEndRadius()" }
,
		{ "trigger": "CCParticleSun_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCParticleSun_visit()", "contents": "visit()" }
,
		{ "trigger": "CCParticleSun_getEmissionRate()", "contents": "getEmissionRate()" }
,
		{ "trigger": "CCParticleSun_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCParticleSun_setEndRadiusVar(float_endRadiusVar,)", "contents": "setEndRadiusVar(${1:float_endRadiusVar})" }
,
		{ "trigger": "CCParticleSun_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleSun_getEmitterMode()", "contents": "getEmitterMode()" }
,
		{ "trigger": "CCParticleSun_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCParticleSun_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCParticleSun_postStep()", "contents": "postStep()" }
,
		{ "trigger": "CCParticleSun_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCParticleSun_setBlendAdditive(bool_value,)", "contents": "setBlendAdditive(${1:bool_value})" }
,
		{ "trigger": "CCParticleSun_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleSun_setEndSpin(float_var,)", "contents": "setEndSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleSun_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCParticleSun_setBatchNode(CCParticleBatchNode*_batchNode,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_batchNode})" }
,
		{ "trigger": "CCParticleSun_getRadialAccel()", "contents": "getRadialAccel()" }
,
		{ "trigger": "CCParticleSun_getStartSize()", "contents": "getStartSize()" }
,
		{ "trigger": "CCParticleSun_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCParticleSun_getStartSizeVar()", "contents": "getStartSizeVar()" }
,
		{ "trigger": "CCParticleSun_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleSun_setGravity(const_CCPoint&_g,)", "contents": "setGravity(${1:const_CCPoint&_g})" }
,
		{ "trigger": "CCParticleSun_getSourcePosition()", "contents": "getSourcePosition()" }
,
		{ "trigger": "CCParticleSun_setRotatePerSecond(float_degrees,)", "contents": "setRotatePerSecond(${1:float_degrees})" }
,
		{ "trigger": "CCParticleSun_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCParticleSun_getTangentialAccelVar()", "contents": "getTangentialAccelVar()" }
,
		{ "trigger": "CCParticleSun_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleSun_getEndSpinVar()", "contents": "getEndSpinVar()" }
,
		{ "trigger": "CCParticleSun_setAutoRemoveOnFinish(bool_var,)", "contents": "setAutoRemoveOnFinish(${1:bool_var})" }
,
		{ "trigger": "CCParticleSun_setPosVar(CCPoint_pos,)", "contents": "setPosVar(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleSun_setEmissionRate(float_rate,)", "contents": "setEmissionRate(${1:float_rate})" }
,
		{ "trigger": "CCParticleSun_getEndColorVar()", "contents": "getEndColorVar()" }
,
		{ "trigger": "CCParticleSun_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleSun_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCParticleSun_getRadialAccelVar()", "contents": "getRadialAccelVar()" }
,
		{ "trigger": "CCParticleSun_getStartRadius()", "contents": "getStartRadius()" }
,
		{ "trigger": "CCParticleSun_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleSun_setStartColorVar(const_ccColor4F_var,)", "contents": "setStartColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSun_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCParticleSun_initWithFile(const_char*_plistFile,)", "contents": "initWithFile(${1:const_char*_plistFile})" }
,
		{ "trigger": "CCParticleSun_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCParticleSun_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCParticleSun_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCParticleSun_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCParticleSun_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCParticleSun_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCParticleSun_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleSun_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCParticleSun_getEndSize()", "contents": "getEndSize()" }
,
		{ "trigger": "CCParticleSun_setSourcePosition(CCPoint_pos,)", "contents": "setSourcePosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleSun_initParticle(tCCParticle*_particle,)", "contents": "initParticle(${1:tCCParticle*_particle})" }
,
		{ "trigger": "CCParticleSun_isActive()", "contents": "isActive()" }
,
		{ "trigger": "CCParticleSun_getSpeedVar()", "contents": "getSpeedVar()" }
,
		{ "trigger": "CCParticleSun_updateQuadWithParticle(tCCParticle*_particle,const_CCPoint&_newPosition,)", "contents": "updateQuadWithParticle(${1:tCCParticle*_particle},${2:const_CCPoint&_newPosition})" }
,
		{ "trigger": "CCParticleSun_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCParticleSun_getEndColor()", "contents": "getEndColor()" }
,
		{ "trigger": "CCParticleSun_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleSun_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCParticleSun_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCParticleSun_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCParticleSun_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCParticleSun_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCParticleSun_setStartSizeVar(float_size,)", "contents": "setStartSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleSun_setStartSpin(float_var,)", "contents": "setStartSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleSun_getLife()", "contents": "getLife()" }
,
		{ "trigger": "CCParticleSun_setBlendFunc(ccBlendFunc_var,)", "contents": "setBlendFunc(${1:ccBlendFunc_var})" }
,
		{ "trigger": "CCParticleSun_getAngle()", "contents": "getAngle()" }
,
		{ "trigger": "CCParticleSun_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCParticleSun_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCParticleSun_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleSun_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCParticleSun_getTangentialAccel()", "contents": "getTangentialAccel()" }
,
		{ "trigger": "CCParticleSun_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCParticleSun_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCParticleSun_setTexture(CCTexture2D*_var,)", "contents": "setTexture(${1:CCTexture2D*_var})" }
,
		{ "trigger": "CCParticleSun_getGravity()", "contents": "getGravity()" }
,
		{ "trigger": "CCParticleSun_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "CCParticleSun_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCParticleSun_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleSun_setScale(float_s,)", "contents": "setScale(${1:float_s})" }
,
		{ "trigger": "CCParticleSun_draw()", "contents": "draw()" }
,
		{ "trigger": "CCParticleSun_setEndSpinVar(float_var,)", "contents": "setEndSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleSun_setSpeed(float_speed,)", "contents": "setSpeed(${1:float_speed})" }
,
		{ "trigger": "CCParticleSun_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCParticleSun_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCParticleSun_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCParticleSun_setStartSize(float_size,)", "contents": "setStartSize(${1:float_size})" }
,
		{ "trigger": "CCParticleSun_getStartRadiusVar()", "contents": "getStartRadiusVar()" }
,
		{ "trigger": "CCParticleSun_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleSun_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCParticleSun_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCParticleSun_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCParticleSun_getSpeed()", "contents": "getSpeed()" }
,
		{ "trigger": "CCParticleSun_setTotalParticles(unsigned_int_tp,)", "contents": "setTotalParticles(${1:unsigned_int_tp})" }
,
		{ "trigger": "CCParticleSun_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCParticleSun_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCParticleSun_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCParticleSun_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCParticleSun_setEmitterMode(int_mode,)", "contents": "setEmitterMode(${1:int_mode})" }
,
		{ "trigger": "CCParticleSun_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCParticleSun_getEndRadiusVar()", "contents": "getEndRadiusVar()" }
,
		{ "trigger": "CCParticleSun_getParticleCount()", "contents": "getParticleCount()" }
,
		{ "trigger": "CCParticleSun_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCParticleSun_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCParticleSun_getEndSizeVar()", "contents": "getEndSizeVar()" }
,
		{ "trigger": "CCParticleSun_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleSun_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCParticleSun_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCParticleSun_setTangentialAccelVar(float_t,)", "contents": "setTangentialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleSun_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCParticleSun_setSpeedVar(float_speed,)", "contents": "setSpeedVar(${1:float_speed})" }
,
		{ "trigger": "CCParticleSun_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCParticleSun_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCParticleSun_setEndSizeVar(float_size,)", "contents": "setEndSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleSun_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCParticleSun_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCParticleSun_setPositionType(tCCPositionType_type,)", "contents": "setPositionType(${1:tCCPositionType_type})" }
,
		{ "trigger": "CCParticleSun_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCParticleSun_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleSun_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCParticleSun_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCParticleSun_getBatchNode()", "contents": "getBatchNode()" }
,
		{ "trigger": "CCParticleSun_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleSun_initWithTotalParticles(unsigned_int_number,)", "contents": "initWithTotalParticles(${1:unsigned_int_number})" }
,
		{ "trigger": "CCParticleSun_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleSun_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCParticleSun_setDuration(float_d,)", "contents": "setDuration(${1:float_d})" }
,
		{ "trigger": "CCParticleSun_setRadialAccel(float_t,)", "contents": "setRadialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleSun_resetSystem()", "contents": "resetSystem()" }
,
		{ "trigger": "CCParticleSun_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCParticleSun_setStartColor(const_ccColor4F_var,)", "contents": "setStartColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSun_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCParticleSun_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCParticleSun_copy()", "contents": "copy()" }
,
		{ "trigger": "CCParticleSun_setEndSize(float_size,)", "contents": "setEndSize(${1:float_size})" }
,
		{ "trigger": "CCParticleSun_setAngleVar(float_angle,)", "contents": "setAngleVar(${1:float_angle})" }
,
		{ "trigger": "CCParticleSun_getTotalParticles()", "contents": "getTotalParticles()" }
,
		{ "trigger": "CCParticleSun_description()", "contents": "description()" }
,
		{ "trigger": "CCParticleSun_addParticle()", "contents": "addParticle()" }
,
		{ "trigger": "CCParticleSun_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleSun_setRadialAccelVar(float_t,)", "contents": "setRadialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleSun_setLifeVar(float_lifeVar,)", "contents": "setLifeVar(${1:float_lifeVar})" }
,
		{ "trigger": "CCParticleSun_setEndRadius(float_endRadius,)", "contents": "setEndRadius(${1:float_endRadius})" }
,
		{ "trigger": "CCParticleSun_getEndSpin()", "contents": "getEndSpin()" }
,
		{ "trigger": "CCParticleSun_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCParticleSun_setAngle(float_angle,)", "contents": "setAngle(${1:float_angle})" }
,
		{ "trigger": "CCParticleSun_retain()", "contents": "retain()" }
,
		{ "trigger": "CCParticleSun_release()", "contents": "release()" }
,
		{ "trigger": "CCParticleSun_getRotatePerSecondVar()", "contents": "getRotatePerSecondVar()" }
,
		{ "trigger": "CCParticleSun_setLife(float_life,)", "contents": "setLife(${1:float_life})" }
,
		{ "trigger": "CCParticleSun_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleSun_stopSystem()", "contents": "stopSystem()" }
,
		{ "trigger": "CCParticleSun_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCParticleSun_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCParticleSun_getLifeVar()", "contents": "getLifeVar()" }
,
		{ "trigger": "CCParticleSun_setTexture(CCTexture2D*_texture,)", "contents": "setTexture(${1:CCTexture2D*_texture})" }
,
		{ "trigger": "CCParticleSun_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCParticleSun_setEndColorVar(const_ccColor4F_var,)", "contents": "setEndColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSun_getStartColorVar()", "contents": "getStartColorVar()" }
,
		{ "trigger": "CCParticleSun_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCParticleSun_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCParticleSun_create()", "contents": "CCParticleSun:create()" }
,

		{ "trigger": "CCLayer_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCLayer_setKeypadEnabled(bool_bValue,)", "contents": "setKeypadEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCLayer_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCLayer_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCLayer_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCLayer_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCLayer_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCLayer_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCLayer_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCLayer_transform()", "contents": "transform()" }
,
		{ "trigger": "CCLayer_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCLayer_unregisterScriptKeypadHandler()", "contents": "unregisterScriptKeypadHandler()" }
,
		{ "trigger": "CCLayer_setTouchEnabled(bool_bValue,)", "contents": "setTouchEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCLayer_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCLayer_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCLayer_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCLayer_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCLayer_isTouchEnabled()", "contents": "isTouchEnabled()" }
,
		{ "trigger": "CCLayer_registerScriptKeypadHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptKeypadHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCLayer_draw()", "contents": "draw()" }
,
		{ "trigger": "CCLayer_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCLayer_unregisterScriptAccelerateHandler()", "contents": "unregisterScriptAccelerateHandler()" }
,
		{ "trigger": "CCLayer_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCLayer_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCLayer_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCLayer_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCLayer_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCLayer_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCLayer_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCLayer_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCLayer_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCLayer_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCLayer_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCLayer_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCLayer_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCLayer_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCLayer_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCLayer_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCLayer_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCLayer_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCLayer_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCLayer_unregisterScriptTouchHandler()", "contents": "unregisterScriptTouchHandler()" }
,
		{ "trigger": "CCLayer_visit()", "contents": "visit()" }
,
		{ "trigger": "CCLayer_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCLayer_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCLayer_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCLayer_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCLayer_isKeypadEnabled()", "contents": "isKeypadEnabled()" }
,
		{ "trigger": "CCLayer_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCLayer_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCLayer_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCLayer_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCLayer_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCLayer_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCLayer_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCLayer_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCLayer_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCLayer_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCLayer_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCLayer_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCLayer_setAccelerometerEnabled(bool_bValue,)", "contents": "setAccelerometerEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCLayer_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCLayer_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCLayer_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCLayer_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCLayer_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCLayer_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCLayer_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCLayer_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCLayer_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCLayer_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCLayer_copy()", "contents": "copy()" }
,
		{ "trigger": "CCLayer_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCLayer_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCLayer_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCLayer_description()", "contents": "description()" }
,
		{ "trigger": "CCLayer_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCLayer_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCLayer_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCLayer_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCLayer_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCLayer_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCLayer_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCLayer_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCLayer_release()", "contents": "release()" }
,
		{ "trigger": "CCLayer_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCLayer_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCLayer_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCLayer_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCLayer_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCLayer_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCLayer_retain()", "contents": "retain()" }
,
		{ "trigger": "CCLayer_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCLayer_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCLayer_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCLayer_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCLayer_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCLayer_isAccelerometerEnabled()", "contents": "isAccelerometerEnabled()" }
,
		{ "trigger": "CCLayer_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCLayer_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCLayer_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCLayer_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCLayer_registerScriptAccelerateHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptAccelerateHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCLayer_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCLayer_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCLayer_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCLayer_registerScriptTouchHandler(LUA_FUNCTION_nHandler,bool_bIsMultiTouches_=_false,int_nPriority_=_0,bool_bSwallowsTouches_=_false,)", "contents": "registerScriptTouchHandler(${1:LUA_FUNCTION_nHandler},${2:bool_bIsMultiTouches_=_false},${3:int_nPriority_=_0},${4:bool_bSwallowsTouches_=_false})" }
,
		{ "trigger": "CCLayer_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCLayer_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCLayer_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCLayer_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCLayer_create()", "contents": "CCLayer:create()" }
,

		{ "trigger": "CCDirector_isDisplayStats()", "contents": "isDisplayStats()" }
,
		{ "trigger": "CCDirector_isPaused()", "contents": "isPaused()" }
,
		{ "trigger": "CCDirector_getOpenGLView()", "contents": "getOpenGLView()" }
,
		{ "trigger": "CCDirector_pushScene(CCScene_*pScene,)", "contents": "pushScene(${1:CCScene_*pScene})" }
,
		{ "trigger": "CCDirector_replaceScene(CCScene_*pScene,)", "contents": "replaceScene(${1:CCScene_*pScene})" }
,
		{ "trigger": "CCDirector_getVisibleOrigin()", "contents": "getVisibleOrigin()" }
,
		{ "trigger": "CCDirector_resume()", "contents": "resume()" }
,
		{ "trigger": "CCDirector_convertToGL(CCPoint_obPoint,)", "contents": "convertToGL(${1:CCPoint_obPoint})" }
,
		{ "trigger": "CCDirector_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCDirector_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCDirector_getZEye()", "contents": "getZEye()" }
,
		{ "trigger": "CCDirector_popScene()", "contents": "popScene()" }
,
		{ "trigger": "CCDirector_setDisplayStats(bool_bDisplayStats,)", "contents": "setDisplayStats(${1:bool_bDisplayStats})" }
,
		{ "trigger": "CCDirector_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCDirector_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCDirector_getNotificationNode()", "contents": "getNotificationNode()" }
,
		{ "trigger": "CCDirector_getWinSizeInPixels()", "contents": "getWinSizeInPixels()" }
,
		{ "trigger": "CCDirector_runWithScene(CCScene_*pScene,)", "contents": "runWithScene(${1:CCScene_*pScene})" }
,
		{ "trigger": "CCDirector_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCDirector_purgeCachedData()", "contents": "purgeCachedData()" }
,
		{ "trigger": "CCDirector_getVisibleSize()", "contents": "getVisibleSize()" }
,
		{ "trigger": "CCDirector_getProjection()", "contents": "getProjection()" }
,
		{ "trigger": "CCDirector_setContentScaleFactor(float_scaleFactor,)", "contents": "setContentScaleFactor(${1:float_scaleFactor})" }
,
		{ "trigger": "CCDirector_retain()", "contents": "retain()" }
,
		{ "trigger": "CCDirector_getAnimationInterval()", "contents": "getAnimationInterval()" }
,
		{ "trigger": "CCDirector_convertToUI(CCPoint_obPoint,)", "contents": "convertToUI(${1:CCPoint_obPoint})" }
,
		{ "trigger": "CCDirector_getTotalFrames()", "contents": "getTotalFrames()" }
,
		{ "trigger": "CCDirector_copy()", "contents": "copy()" }
,
		{ "trigger": "CCDirector_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCDirector_release()", "contents": "release()" }
,
		{ "trigger": "CCDirector_getTouchDispatcher()", "contents": "getTouchDispatcher()" }
,
		{ "trigger": "CCDirector_setNotificationNode(CCNode_*node,)", "contents": "setNotificationNode(${1:CCNode_*node})" }
,
		{ "trigger": "CCDirector_setProjection(ccDirectorProjection_kProjection,)", "contents": "setProjection(${1:ccDirectorProjection_kProjection})" }
,
		{ "trigger": "CCDirector_pause()", "contents": "pause()" }
,
		{ "trigger": "CCDirector_setDepthTest(bool_var,)", "contents": "setDepthTest(${1:bool_var})" }
,
		{ "trigger": "CCDirector_getRunningScene()", "contents": "getRunningScene()" }
,
		{ "trigger": "CCDirector_getContentScaleFactor()", "contents": "getContentScaleFactor()" }
,
		{ "trigger": "CCDirector_getWinSize()", "contents": "getWinSize()" }
,
		{ "trigger": "CCDirector_sharedDirector()", "contents": "CCDirector:sharedDirector()" }
,

		{ "trigger": "CCParticleFireworks_setEndColor(const_ccColor4F_var,)", "contents": "setEndColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleFireworks_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleFireworks_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCParticleFireworks_setRotatePerSecondVar(float_degrees,)", "contents": "setRotatePerSecondVar(${1:float_degrees})" }
,
		{ "trigger": "CCParticleFireworks_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCParticleFireworks_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCParticleFireworks_transform()", "contents": "transform()" }
,
		{ "trigger": "CCParticleFireworks_getRotatePerSecond()", "contents": "getRotatePerSecond()" }
,
		{ "trigger": "CCParticleFireworks_setTextureWithRect(CCTexture2D_*texture,const_CCRect&_rect,)", "contents": "setTextureWithRect(${1:CCTexture2D_*texture},${2:const_CCRect&_rect})" }
,
		{ "trigger": "CCParticleFireworks_getAngleVar()", "contents": "getAngleVar()" }
,
		{ "trigger": "CCParticleFireworks_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleFireworks_isAutoRemoveOnFinish()", "contents": "isAutoRemoveOnFinish()" }
,
		{ "trigger": "CCParticleFireworks_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleFireworks_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCParticleFireworks_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCParticleFireworks_setTangentialAccel(float_t,)", "contents": "setTangentialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleFireworks_getStartSpin()", "contents": "getStartSpin()" }
,
		{ "trigger": "CCParticleFireworks_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCParticleFireworks_getStartColor()", "contents": "getStartColor()" }
,
		{ "trigger": "CCParticleFireworks_setStartSpinVar(float_var,)", "contents": "setStartSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleFireworks_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCParticleFireworks_setStartRadius(float_startRadius,)", "contents": "setStartRadius(${1:float_startRadius})" }
,
		{ "trigger": "CCParticleFireworks_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCParticleFireworks_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCParticleFireworks_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCParticleFireworks_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCParticleFireworks_getPosVar()", "contents": "getPosVar()" }
,
		{ "trigger": "CCParticleFireworks_setAngleVar(float_angle,)", "contents": "setAngleVar(${1:float_angle})" }
,
		{ "trigger": "CCParticleFireworks_isFull()", "contents": "isFull()" }
,
		{ "trigger": "CCParticleFireworks_setStartRadiusVar(float_startRadiusVar,)", "contents": "setStartRadiusVar(${1:float_startRadiusVar})" }
,
		{ "trigger": "CCParticleFireworks_getStartSpinVar()", "contents": "getStartSpinVar()" }
,
		{ "trigger": "CCParticleFireworks_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCParticleFireworks_setDisplayFrame(CCSpriteFrame*_spriteFrame,)", "contents": "setDisplayFrame(${1:CCSpriteFrame*_spriteFrame})" }
,
		{ "trigger": "CCParticleFireworks_setBatchNode(CCParticleBatchNode*_node,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_node})" }
,
		{ "trigger": "CCParticleFireworks_isBlendAdditive()", "contents": "isBlendAdditive()" }
,
		{ "trigger": "CCParticleFireworks_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCParticleFireworks_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCParticleFireworks_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCParticleFireworks_getEmissionRate()", "contents": "getEmissionRate()" }
,
		{ "trigger": "CCParticleFireworks_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCParticleFireworks_setEndRadiusVar(float_endRadiusVar,)", "contents": "setEndRadiusVar(${1:float_endRadiusVar})" }
,
		{ "trigger": "CCParticleFireworks_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleFireworks_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCParticleFireworks_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCParticleFireworks_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCParticleFireworks_postStep()", "contents": "postStep()" }
,
		{ "trigger": "CCParticleFireworks_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCParticleFireworks_setBlendAdditive(bool_value,)", "contents": "setBlendAdditive(${1:bool_value})" }
,
		{ "trigger": "CCParticleFireworks_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleFireworks_setEndSpin(float_var,)", "contents": "setEndSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleFireworks_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCParticleFireworks_setBatchNode(CCParticleBatchNode*_batchNode,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_batchNode})" }
,
		{ "trigger": "CCParticleFireworks_getEndRadius()", "contents": "getEndRadius()" }
,
		{ "trigger": "CCParticleFireworks_getStartSize()", "contents": "getStartSize()" }
,
		{ "trigger": "CCParticleFireworks_getTotalParticles()", "contents": "getTotalParticles()" }
,
		{ "trigger": "CCParticleFireworks_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCParticleFireworks_getStartSizeVar()", "contents": "getStartSizeVar()" }
,
		{ "trigger": "CCParticleFireworks_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleFireworks_setGravity(const_CCPoint&_g,)", "contents": "setGravity(${1:const_CCPoint&_g})" }
,
		{ "trigger": "CCParticleFireworks_getSourcePosition()", "contents": "getSourcePosition()" }
,
		{ "trigger": "CCParticleFireworks_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleFireworks_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCParticleFireworks_getTangentialAccelVar()", "contents": "getTangentialAccelVar()" }
,
		{ "trigger": "CCParticleFireworks_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleFireworks_getEndSpinVar()", "contents": "getEndSpinVar()" }
,
		{ "trigger": "CCParticleFireworks_setAutoRemoveOnFinish(bool_var,)", "contents": "setAutoRemoveOnFinish(${1:bool_var})" }
,
		{ "trigger": "CCParticleFireworks_setPosVar(CCPoint_pos,)", "contents": "setPosVar(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleFireworks_setEmissionRate(float_rate,)", "contents": "setEmissionRate(${1:float_rate})" }
,
		{ "trigger": "CCParticleFireworks_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleFireworks_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleFireworks_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCParticleFireworks_getRadialAccelVar()", "contents": "getRadialAccelVar()" }
,
		{ "trigger": "CCParticleFireworks_getStartRadius()", "contents": "getStartRadius()" }
,
		{ "trigger": "CCParticleFireworks_getEndColorVar()", "contents": "getEndColorVar()" }
,
		{ "trigger": "CCParticleFireworks_setStartColorVar(const_ccColor4F_var,)", "contents": "setStartColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleFireworks_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCParticleFireworks_initWithFile(const_char*_plistFile,)", "contents": "initWithFile(${1:const_char*_plistFile})" }
,
		{ "trigger": "CCParticleFireworks_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCParticleFireworks_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCParticleFireworks_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCParticleFireworks_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCParticleFireworks_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCParticleFireworks_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCParticleFireworks_setStartSpin(float_var,)", "contents": "setStartSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleFireworks_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCParticleFireworks_getEndSize()", "contents": "getEndSize()" }
,
		{ "trigger": "CCParticleFireworks_setSourcePosition(CCPoint_pos,)", "contents": "setSourcePosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleFireworks_initParticle(tCCParticle*_particle,)", "contents": "initParticle(${1:tCCParticle*_particle})" }
,
		{ "trigger": "CCParticleFireworks_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCParticleFireworks_updateQuadWithParticle(tCCParticle*_particle,const_CCPoint&_newPosition,)", "contents": "updateQuadWithParticle(${1:tCCParticle*_particle},${2:const_CCPoint&_newPosition})" }
,
		{ "trigger": "CCParticleFireworks_setStartColor(const_ccColor4F_var,)", "contents": "setStartColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleFireworks_getEndColor()", "contents": "getEndColor()" }
,
		{ "trigger": "CCParticleFireworks_setEmitterMode(int_mode,)", "contents": "setEmitterMode(${1:int_mode})" }
,
		{ "trigger": "CCParticleFireworks_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCParticleFireworks_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCParticleFireworks_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCParticleFireworks_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCParticleFireworks_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCParticleFireworks_setStartSizeVar(float_size,)", "contents": "setStartSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleFireworks_getLife()", "contents": "getLife()" }
,
		{ "trigger": "CCParticleFireworks_setBlendFunc(ccBlendFunc_var,)", "contents": "setBlendFunc(${1:ccBlendFunc_var})" }
,
		{ "trigger": "CCParticleFireworks_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleFireworks_getAngle()", "contents": "getAngle()" }
,
		{ "trigger": "CCParticleFireworks_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCParticleFireworks_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCParticleFireworks_getEmitterMode()", "contents": "getEmitterMode()" }
,
		{ "trigger": "CCParticleFireworks_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleFireworks_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCParticleFireworks_getTangentialAccel()", "contents": "getTangentialAccel()" }
,
		{ "trigger": "CCParticleFireworks_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCParticleFireworks_visit()", "contents": "visit()" }
,
		{ "trigger": "CCParticleFireworks_setTexture(CCTexture2D*_var,)", "contents": "setTexture(${1:CCTexture2D*_var})" }
,
		{ "trigger": "CCParticleFireworks_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "CCParticleFireworks_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCParticleFireworks_setScale(float_s,)", "contents": "setScale(${1:float_s})" }
,
		{ "trigger": "CCParticleFireworks_draw()", "contents": "draw()" }
,
		{ "trigger": "CCParticleFireworks_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleFireworks_setEndSpinVar(float_var,)", "contents": "setEndSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleFireworks_setSpeed(float_speed,)", "contents": "setSpeed(${1:float_speed})" }
,
		{ "trigger": "CCParticleFireworks_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCParticleFireworks_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCParticleFireworks_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCParticleFireworks_setStartSize(float_size,)", "contents": "setStartSize(${1:float_size})" }
,
		{ "trigger": "CCParticleFireworks_getStartRadiusVar()", "contents": "getStartRadiusVar()" }
,
		{ "trigger": "CCParticleFireworks_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCParticleFireworks_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCParticleFireworks_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCParticleFireworks_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCParticleFireworks_getSpeed()", "contents": "getSpeed()" }
,
		{ "trigger": "CCParticleFireworks_setTotalParticles(unsigned_int_tp,)", "contents": "setTotalParticles(${1:unsigned_int_tp})" }
,
		{ "trigger": "CCParticleFireworks_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCParticleFireworks_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCParticleFireworks_setRotatePerSecond(float_degrees,)", "contents": "setRotatePerSecond(${1:float_degrees})" }
,
		{ "trigger": "CCParticleFireworks_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCParticleFireworks_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCParticleFireworks_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCParticleFireworks_getEndRadiusVar()", "contents": "getEndRadiusVar()" }
,
		{ "trigger": "CCParticleFireworks_getParticleCount()", "contents": "getParticleCount()" }
,
		{ "trigger": "CCParticleFireworks_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCParticleFireworks_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCParticleFireworks_getEndSizeVar()", "contents": "getEndSizeVar()" }
,
		{ "trigger": "CCParticleFireworks_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleFireworks_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCParticleFireworks_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCParticleFireworks_setTangentialAccelVar(float_t,)", "contents": "setTangentialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleFireworks_getSpeedVar()", "contents": "getSpeedVar()" }
,
		{ "trigger": "CCParticleFireworks_setSpeedVar(float_speed,)", "contents": "setSpeedVar(${1:float_speed})" }
,
		{ "trigger": "CCParticleFireworks_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCParticleFireworks_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCParticleFireworks_setEndSizeVar(float_size,)", "contents": "setEndSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleFireworks_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCParticleFireworks_getLifeVar()", "contents": "getLifeVar()" }
,
		{ "trigger": "CCParticleFireworks_setPositionType(tCCPositionType_type,)", "contents": "setPositionType(${1:tCCPositionType_type})" }
,
		{ "trigger": "CCParticleFireworks_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCParticleFireworks_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleFireworks_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCParticleFireworks_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCParticleFireworks_getBatchNode()", "contents": "getBatchNode()" }
,
		{ "trigger": "CCParticleFireworks_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleFireworks_initWithTotalParticles(unsigned_int_number,)", "contents": "initWithTotalParticles(${1:unsigned_int_number})" }
,
		{ "trigger": "CCParticleFireworks_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleFireworks_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCParticleFireworks_setDuration(float_d,)", "contents": "setDuration(${1:float_d})" }
,
		{ "trigger": "CCParticleFireworks_setRadialAccel(float_t,)", "contents": "setRadialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleFireworks_resetSystem()", "contents": "resetSystem()" }
,
		{ "trigger": "CCParticleFireworks_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleFireworks_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCParticleFireworks_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCParticleFireworks_copy()", "contents": "copy()" }
,
		{ "trigger": "CCParticleFireworks_setEndSize(float_size,)", "contents": "setEndSize(${1:float_size})" }
,
		{ "trigger": "CCParticleFireworks_getRadialAccel()", "contents": "getRadialAccel()" }
,
		{ "trigger": "CCParticleFireworks_isActive()", "contents": "isActive()" }
,
		{ "trigger": "CCParticleFireworks_description()", "contents": "description()" }
,
		{ "trigger": "CCParticleFireworks_getGravity()", "contents": "getGravity()" }
,
		{ "trigger": "CCParticleFireworks_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleFireworks_setRadialAccelVar(float_t,)", "contents": "setRadialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleFireworks_setLifeVar(float_lifeVar,)", "contents": "setLifeVar(${1:float_lifeVar})" }
,
		{ "trigger": "CCParticleFireworks_setEndRadius(float_endRadius,)", "contents": "setEndRadius(${1:float_endRadius})" }
,
		{ "trigger": "CCParticleFireworks_getEndSpin()", "contents": "getEndSpin()" }
,
		{ "trigger": "CCParticleFireworks_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCParticleFireworks_setAngle(float_angle,)", "contents": "setAngle(${1:float_angle})" }
,
		{ "trigger": "CCParticleFireworks_retain()", "contents": "retain()" }
,
		{ "trigger": "CCParticleFireworks_release()", "contents": "release()" }
,
		{ "trigger": "CCParticleFireworks_getRotatePerSecondVar()", "contents": "getRotatePerSecondVar()" }
,
		{ "trigger": "CCParticleFireworks_addParticle()", "contents": "addParticle()" }
,
		{ "trigger": "CCParticleFireworks_setLife(float_life,)", "contents": "setLife(${1:float_life})" }
,
		{ "trigger": "CCParticleFireworks_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleFireworks_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCParticleFireworks_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCParticleFireworks_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCParticleFireworks_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCParticleFireworks_setTexture(CCTexture2D*_texture,)", "contents": "setTexture(${1:CCTexture2D*_texture})" }
,
		{ "trigger": "CCParticleFireworks_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCParticleFireworks_setEndColorVar(const_ccColor4F_var,)", "contents": "setEndColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleFireworks_getStartColorVar()", "contents": "getStartColorVar()" }
,
		{ "trigger": "CCParticleFireworks_stopSystem()", "contents": "stopSystem()" }
,
		{ "trigger": "CCParticleFireworks_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCParticleFireworks_create()", "contents": "CCParticleFireworks:create()" }
,

		{ "trigger": "CCTransitionFadeBL_create(float_t,CCScene*_scene,)", "contents": "CCTransitionFadeBL:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCScheduler_unscheduleScriptEntry(unsigned_int_uScheduleScriptEntryID,)", "contents": "unscheduleScriptEntry(${1:unsigned_int_uScheduleScriptEntryID})" }
,
		{ "trigger": "CCScheduler_retain()", "contents": "retain()" }
,
		{ "trigger": "CCScheduler_scheduleScriptFunc(LUA_FUNCTION_funcID,float_fInterval,bool_bPaused,)", "contents": "scheduleScriptFunc(${1:LUA_FUNCTION_funcID},${2:float_fInterval},${3:bool_bPaused})" }
,
		{ "trigger": "CCScheduler_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCScheduler_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCScheduler_getTimeScale()", "contents": "getTimeScale()" }
,
		{ "trigger": "CCScheduler_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCScheduler_setTimeScale(float_fTimeScale,)", "contents": "setTimeScale(${1:float_fTimeScale})" }
,
		{ "trigger": "CCScheduler_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCScheduler_release()", "contents": "release()" }
,
		{ "trigger": "CCScheduler_copy()", "contents": "copy()" }
,

		{ "trigger": "CCDeccelAmplitude_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCDeccelAmplitude_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCDeccelAmplitude_retain()", "contents": "retain()" }
,
		{ "trigger": "CCDeccelAmplitude_setRate(float_fRate,)", "contents": "setRate(${1:float_fRate})" }
,
		{ "trigger": "CCDeccelAmplitude_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCDeccelAmplitude_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCDeccelAmplitude_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCDeccelAmplitude_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCDeccelAmplitude_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCDeccelAmplitude_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCDeccelAmplitude_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCDeccelAmplitude_copy()", "contents": "copy()" }
,
		{ "trigger": "CCDeccelAmplitude_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCDeccelAmplitude_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCDeccelAmplitude_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCDeccelAmplitude_getRate()", "contents": "getRate()" }
,
		{ "trigger": "CCDeccelAmplitude_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCDeccelAmplitude_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCDeccelAmplitude_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCDeccelAmplitude_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCDeccelAmplitude_release()", "contents": "release()" }
,
		{ "trigger": "CCDeccelAmplitude_create(CCAction_*pAction,float_duration,)", "contents": "CCDeccelAmplitude:create(${1:CCAction_*pAction},${2:float_duration})" }
,

		{ "trigger": "CCTintTo_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCTintTo_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTintTo_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCTintTo_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCTintTo_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTintTo_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCTintTo_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTintTo_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCTintTo_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTintTo_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCTintTo_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTintTo_release()", "contents": "release()" }
,
		{ "trigger": "CCTintTo_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCTintTo_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCTintTo_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCTintTo_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTintTo_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTintTo_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCTintTo_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCTintTo_create(float_duration,GLubyte_red,GLubyte_green,GLubyte_blue,)", "contents": "CCTintTo:create(${1:float_duration},${2:GLubyte_red},${3:GLubyte_green},${4:GLubyte_blue})" }
,

		{ "trigger": "CCFileUtils_purgeCachedEntries()", "contents": "purgeCachedEntries()" }
,
		{ "trigger": "CCFileUtils_addSearchResolutionsOrder(const_char*_order,)", "contents": "addSearchResolutionsOrder(${1:const_char*_order})" }
,
		{ "trigger": "CCFileUtils_setPopupNotify(bool_bNotify,)", "contents": "setPopupNotify(${1:bool_bNotify})" }
,
		{ "trigger": "CCFileUtils_fullPathFromRelativeFile(const_char_*pszFilename,const_char_*pszRelativeFile,)", "contents": "fullPathFromRelativeFile(${1:const_char_*pszFilename},${2:const_char_*pszRelativeFile})" }
,
		{ "trigger": "CCFileUtils_addSearchPath(const_char*_path,)", "contents": "addSearchPath(${1:const_char*_path})" }
,
		{ "trigger": "CCFileUtils_fullPathForFilename(const_char_*pszFileName,)", "contents": "fullPathForFilename(${1:const_char_*pszFileName})" }
,
		{ "trigger": "CCFileUtils_getWritablePath()", "contents": "getWritablePath()" }
,
		{ "trigger": "CCFileUtils_loadFilenameLookupDictionaryFromFile(const_char*_filename,)", "contents": "loadFilenameLookupDictionaryFromFile(${1:const_char*_filename})" }
,
		{ "trigger": "CCFileUtils_isPopupNotify()", "contents": "isPopupNotify()" }
,
		{ "trigger": "CCFileUtils_sharedFileUtils()", "contents": "CCFileUtils:sharedFileUtils()" }
,
		{ "trigger": "CCFileUtils_purgeFileUtils()", "contents": "CCFileUtils:purgeFileUtils()" }
,

		{ "trigger": "CCTransitionSplitRows_create(float_t,CCScene*_scene,)", "contents": "CCTransitionSplitRows:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCTransitionTurnOffTiles_create(float_t,CCScene*_scene,)", "contents": "CCTransitionTurnOffTiles:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCSpriteFrame_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCSpriteFrame_setOriginalSizeInPixels(CCSize_sizeInPixels,)", "contents": "setOriginalSizeInPixels(${1:CCSize_sizeInPixels})" }
,
		{ "trigger": "CCSpriteFrame_getRect()", "contents": "getRect()" }
,
		{ "trigger": "CCSpriteFrame_isRotated()", "contents": "isRotated()" }
,
		{ "trigger": "CCSpriteFrame_retain()", "contents": "retain()" }
,
		{ "trigger": "CCSpriteFrame_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCSpriteFrame_release()", "contents": "release()" }
,
		{ "trigger": "CCSpriteFrame_setRotated(bool_bRotated,)", "contents": "setRotated(${1:bool_bRotated})" }
,
		{ "trigger": "CCSpriteFrame_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCSpriteFrame_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCSpriteFrame_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCSpriteFrame_getOffsetInPixels()", "contents": "getOffsetInPixels()" }
,
		{ "trigger": "CCSpriteFrame_setRectInPixels(CCRect_rectInPixels,)", "contents": "setRectInPixels(${1:CCRect_rectInPixels})" }
,
		{ "trigger": "CCSpriteFrame_setRect(CCRect_rect,)", "contents": "setRect(${1:CCRect_rect})" }
,
		{ "trigger": "CCSpriteFrame_getOriginalSizeInPixels()", "contents": "getOriginalSizeInPixels()" }
,
		{ "trigger": "CCSpriteFrame_getRectInPixels()", "contents": "getRectInPixels()" }
,
		{ "trigger": "CCSpriteFrame_getOffset()", "contents": "getOffset()" }
,
		{ "trigger": "CCSpriteFrame_copy()", "contents": "copy()" }
,
		{ "trigger": "CCSpriteFrame_getOriginalSize()", "contents": "getOriginalSize()" }
,
		{ "trigger": "CCSpriteFrame_setOffset(const_CCPoint_&_offsets,)", "contents": "setOffset(${1:const_CCPoint_&_offsets})" }
,
		{ "trigger": "CCSpriteFrame_setOriginalSize(const_CCSize_&_size,)", "contents": "setOriginalSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCSpriteFrame_setTexture(CCTexture2D*_pobTexture,)", "contents": "setTexture(${1:CCTexture2D*_pobTexture})" }
,
		{ "trigger": "CCSpriteFrame_setOffsetInPixels(CCPoint_offsetInPixels,)", "contents": "setOffsetInPixels(${1:CCPoint_offsetInPixels})" }
,
		{ "trigger": "CCSpriteFrame_create(const_char*_filename,CCRect_rect,)", "contents": "CCSpriteFrame:create(${1:const_char*_filename},${2:CCRect_rect})" }
,
		{ "trigger": "CCSpriteFrame_createWithTexture(CCTexture2D*_pobTexture,CCRect_rect,)", "contents": "CCSpriteFrame:createWithTexture(${1:CCTexture2D*_pobTexture},${2:CCRect_rect})" }
,
		{ "trigger": "CCSpriteFrame_create(const_char*_filename,CCRect_rect,bool_rotated,CCPoint_offset,CCSize_originalSize,)", "contents": "CCSpriteFrame:create(${1:const_char*_filename},${2:CCRect_rect},${3:bool_rotated},${4:CCPoint_offset},${5:CCSize_originalSize})" }
,
		{ "trigger": "CCSpriteFrame_createWithTexture(CCTexture2D*_pobTexture,CCRect_rect,bool_rotated,CCPoint_offset,CCSize_originalSize,)", "contents": "CCSpriteFrame:createWithTexture(${1:CCTexture2D*_pobTexture},${2:CCRect_rect},${3:bool_rotated},${4:CCPoint_offset},${5:CCSize_originalSize})" }
,

		{ "trigger": "CCTiledGrid3DAction_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTiledGrid3DAction_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCTiledGrid3DAction_tile(CCPoint_pos,)", "contents": "tile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTiledGrid3DAction_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCTiledGrid3DAction_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCTiledGrid3DAction_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCTiledGrid3DAction_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCTiledGrid3DAction_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTiledGrid3DAction_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTiledGrid3DAction_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTiledGrid3DAction_setTile(CCPoint_pos,ccQuad3_coords,)", "contents": "setTile(${1:CCPoint_pos},${2:ccQuad3_coords})" }
,
		{ "trigger": "CCTiledGrid3DAction_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTiledGrid3DAction_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTiledGrid3DAction_originalTile(CCPoint_pos,)", "contents": "originalTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTiledGrid3DAction_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTiledGrid3DAction_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCTiledGrid3DAction_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTiledGrid3DAction_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCTiledGrid3DAction_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCTiledGrid3DAction_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCTiledGrid3DAction_release()", "contents": "release()" }
,
		{ "trigger": "CCTiledGrid3DAction_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCTiledGrid3DAction_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,

		{ "trigger": "CCParticleRain_setEndColor(const_ccColor4F_var,)", "contents": "setEndColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleRain_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleRain_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCParticleRain_setRotatePerSecondVar(float_degrees,)", "contents": "setRotatePerSecondVar(${1:float_degrees})" }
,
		{ "trigger": "CCParticleRain_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCParticleRain_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCParticleRain_transform()", "contents": "transform()" }
,
		{ "trigger": "CCParticleRain_getRotatePerSecond()", "contents": "getRotatePerSecond()" }
,
		{ "trigger": "CCParticleRain_setTextureWithRect(CCTexture2D_*texture,const_CCRect&_rect,)", "contents": "setTextureWithRect(${1:CCTexture2D_*texture},${2:const_CCRect&_rect})" }
,
		{ "trigger": "CCParticleRain_getAngleVar()", "contents": "getAngleVar()" }
,
		{ "trigger": "CCParticleRain_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleRain_isAutoRemoveOnFinish()", "contents": "isAutoRemoveOnFinish()" }
,
		{ "trigger": "CCParticleRain_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleRain_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCParticleRain_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCParticleRain_setTangentialAccel(float_t,)", "contents": "setTangentialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleRain_getStartSpin()", "contents": "getStartSpin()" }
,
		{ "trigger": "CCParticleRain_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCParticleRain_getStartColor()", "contents": "getStartColor()" }
,
		{ "trigger": "CCParticleRain_setStartSpinVar(float_var,)", "contents": "setStartSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleRain_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCParticleRain_setStartRadius(float_startRadius,)", "contents": "setStartRadius(${1:float_startRadius})" }
,
		{ "trigger": "CCParticleRain_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCParticleRain_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCParticleRain_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCParticleRain_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCParticleRain_getPosVar()", "contents": "getPosVar()" }
,
		{ "trigger": "CCParticleRain_setAngleVar(float_angle,)", "contents": "setAngleVar(${1:float_angle})" }
,
		{ "trigger": "CCParticleRain_isFull()", "contents": "isFull()" }
,
		{ "trigger": "CCParticleRain_setStartRadiusVar(float_startRadiusVar,)", "contents": "setStartRadiusVar(${1:float_startRadiusVar})" }
,
		{ "trigger": "CCParticleRain_getStartSpinVar()", "contents": "getStartSpinVar()" }
,
		{ "trigger": "CCParticleRain_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCParticleRain_setDisplayFrame(CCSpriteFrame*_spriteFrame,)", "contents": "setDisplayFrame(${1:CCSpriteFrame*_spriteFrame})" }
,
		{ "trigger": "CCParticleRain_setBatchNode(CCParticleBatchNode*_node,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_node})" }
,
		{ "trigger": "CCParticleRain_isBlendAdditive()", "contents": "isBlendAdditive()" }
,
		{ "trigger": "CCParticleRain_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCParticleRain_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCParticleRain_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCParticleRain_getEmissionRate()", "contents": "getEmissionRate()" }
,
		{ "trigger": "CCParticleRain_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCParticleRain_setEndRadiusVar(float_endRadiusVar,)", "contents": "setEndRadiusVar(${1:float_endRadiusVar})" }
,
		{ "trigger": "CCParticleRain_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleRain_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCParticleRain_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCParticleRain_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCParticleRain_postStep()", "contents": "postStep()" }
,
		{ "trigger": "CCParticleRain_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCParticleRain_setBlendAdditive(bool_value,)", "contents": "setBlendAdditive(${1:bool_value})" }
,
		{ "trigger": "CCParticleRain_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleRain_setEndSpin(float_var,)", "contents": "setEndSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleRain_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCParticleRain_setBatchNode(CCParticleBatchNode*_batchNode,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_batchNode})" }
,
		{ "trigger": "CCParticleRain_getEndRadius()", "contents": "getEndRadius()" }
,
		{ "trigger": "CCParticleRain_getStartSize()", "contents": "getStartSize()" }
,
		{ "trigger": "CCParticleRain_getTotalParticles()", "contents": "getTotalParticles()" }
,
		{ "trigger": "CCParticleRain_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCParticleRain_getStartSizeVar()", "contents": "getStartSizeVar()" }
,
		{ "trigger": "CCParticleRain_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleRain_setGravity(const_CCPoint&_g,)", "contents": "setGravity(${1:const_CCPoint&_g})" }
,
		{ "trigger": "CCParticleRain_getSourcePosition()", "contents": "getSourcePosition()" }
,
		{ "trigger": "CCParticleRain_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleRain_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCParticleRain_getTangentialAccelVar()", "contents": "getTangentialAccelVar()" }
,
		{ "trigger": "CCParticleRain_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleRain_getEndSpinVar()", "contents": "getEndSpinVar()" }
,
		{ "trigger": "CCParticleRain_setAutoRemoveOnFinish(bool_var,)", "contents": "setAutoRemoveOnFinish(${1:bool_var})" }
,
		{ "trigger": "CCParticleRain_setPosVar(CCPoint_pos,)", "contents": "setPosVar(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleRain_setEmissionRate(float_rate,)", "contents": "setEmissionRate(${1:float_rate})" }
,
		{ "trigger": "CCParticleRain_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleRain_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleRain_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCParticleRain_getRadialAccelVar()", "contents": "getRadialAccelVar()" }
,
		{ "trigger": "CCParticleRain_getStartRadius()", "contents": "getStartRadius()" }
,
		{ "trigger": "CCParticleRain_getEndColorVar()", "contents": "getEndColorVar()" }
,
		{ "trigger": "CCParticleRain_setStartColorVar(const_ccColor4F_var,)", "contents": "setStartColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleRain_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCParticleRain_initWithFile(const_char*_plistFile,)", "contents": "initWithFile(${1:const_char*_plistFile})" }
,
		{ "trigger": "CCParticleRain_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCParticleRain_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCParticleRain_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCParticleRain_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCParticleRain_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCParticleRain_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCParticleRain_setStartSpin(float_var,)", "contents": "setStartSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleRain_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCParticleRain_getEndSize()", "contents": "getEndSize()" }
,
		{ "trigger": "CCParticleRain_setSourcePosition(CCPoint_pos,)", "contents": "setSourcePosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleRain_initParticle(tCCParticle*_particle,)", "contents": "initParticle(${1:tCCParticle*_particle})" }
,
		{ "trigger": "CCParticleRain_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCParticleRain_updateQuadWithParticle(tCCParticle*_particle,const_CCPoint&_newPosition,)", "contents": "updateQuadWithParticle(${1:tCCParticle*_particle},${2:const_CCPoint&_newPosition})" }
,
		{ "trigger": "CCParticleRain_setStartColor(const_ccColor4F_var,)", "contents": "setStartColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleRain_getEndColor()", "contents": "getEndColor()" }
,
		{ "trigger": "CCParticleRain_setEmitterMode(int_mode,)", "contents": "setEmitterMode(${1:int_mode})" }
,
		{ "trigger": "CCParticleRain_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCParticleRain_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCParticleRain_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCParticleRain_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCParticleRain_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCParticleRain_setStartSizeVar(float_size,)", "contents": "setStartSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleRain_getLife()", "contents": "getLife()" }
,
		{ "trigger": "CCParticleRain_setBlendFunc(ccBlendFunc_var,)", "contents": "setBlendFunc(${1:ccBlendFunc_var})" }
,
		{ "trigger": "CCParticleRain_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleRain_getAngle()", "contents": "getAngle()" }
,
		{ "trigger": "CCParticleRain_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCParticleRain_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCParticleRain_getEmitterMode()", "contents": "getEmitterMode()" }
,
		{ "trigger": "CCParticleRain_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleRain_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCParticleRain_getTangentialAccel()", "contents": "getTangentialAccel()" }
,
		{ "trigger": "CCParticleRain_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCParticleRain_visit()", "contents": "visit()" }
,
		{ "trigger": "CCParticleRain_setTexture(CCTexture2D*_var,)", "contents": "setTexture(${1:CCTexture2D*_var})" }
,
		{ "trigger": "CCParticleRain_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "CCParticleRain_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCParticleRain_setScale(float_s,)", "contents": "setScale(${1:float_s})" }
,
		{ "trigger": "CCParticleRain_draw()", "contents": "draw()" }
,
		{ "trigger": "CCParticleRain_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleRain_setEndSpinVar(float_var,)", "contents": "setEndSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleRain_setSpeed(float_speed,)", "contents": "setSpeed(${1:float_speed})" }
,
		{ "trigger": "CCParticleRain_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCParticleRain_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCParticleRain_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCParticleRain_setStartSize(float_size,)", "contents": "setStartSize(${1:float_size})" }
,
		{ "trigger": "CCParticleRain_getStartRadiusVar()", "contents": "getStartRadiusVar()" }
,
		{ "trigger": "CCParticleRain_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCParticleRain_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCParticleRain_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCParticleRain_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCParticleRain_getSpeed()", "contents": "getSpeed()" }
,
		{ "trigger": "CCParticleRain_setTotalParticles(unsigned_int_tp,)", "contents": "setTotalParticles(${1:unsigned_int_tp})" }
,
		{ "trigger": "CCParticleRain_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCParticleRain_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCParticleRain_setRotatePerSecond(float_degrees,)", "contents": "setRotatePerSecond(${1:float_degrees})" }
,
		{ "trigger": "CCParticleRain_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCParticleRain_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCParticleRain_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCParticleRain_getEndRadiusVar()", "contents": "getEndRadiusVar()" }
,
		{ "trigger": "CCParticleRain_getParticleCount()", "contents": "getParticleCount()" }
,
		{ "trigger": "CCParticleRain_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCParticleRain_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCParticleRain_getEndSizeVar()", "contents": "getEndSizeVar()" }
,
		{ "trigger": "CCParticleRain_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleRain_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCParticleRain_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCParticleRain_setTangentialAccelVar(float_t,)", "contents": "setTangentialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleRain_getSpeedVar()", "contents": "getSpeedVar()" }
,
		{ "trigger": "CCParticleRain_setSpeedVar(float_speed,)", "contents": "setSpeedVar(${1:float_speed})" }
,
		{ "trigger": "CCParticleRain_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCParticleRain_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCParticleRain_setEndSizeVar(float_size,)", "contents": "setEndSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleRain_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCParticleRain_getLifeVar()", "contents": "getLifeVar()" }
,
		{ "trigger": "CCParticleRain_setPositionType(tCCPositionType_type,)", "contents": "setPositionType(${1:tCCPositionType_type})" }
,
		{ "trigger": "CCParticleRain_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCParticleRain_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleRain_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCParticleRain_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCParticleRain_getBatchNode()", "contents": "getBatchNode()" }
,
		{ "trigger": "CCParticleRain_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleRain_initWithTotalParticles(unsigned_int_number,)", "contents": "initWithTotalParticles(${1:unsigned_int_number})" }
,
		{ "trigger": "CCParticleRain_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleRain_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCParticleRain_setDuration(float_d,)", "contents": "setDuration(${1:float_d})" }
,
		{ "trigger": "CCParticleRain_setRadialAccel(float_t,)", "contents": "setRadialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleRain_resetSystem()", "contents": "resetSystem()" }
,
		{ "trigger": "CCParticleRain_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleRain_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCParticleRain_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCParticleRain_copy()", "contents": "copy()" }
,
		{ "trigger": "CCParticleRain_setEndSize(float_size,)", "contents": "setEndSize(${1:float_size})" }
,
		{ "trigger": "CCParticleRain_getRadialAccel()", "contents": "getRadialAccel()" }
,
		{ "trigger": "CCParticleRain_isActive()", "contents": "isActive()" }
,
		{ "trigger": "CCParticleRain_description()", "contents": "description()" }
,
		{ "trigger": "CCParticleRain_getGravity()", "contents": "getGravity()" }
,
		{ "trigger": "CCParticleRain_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleRain_setRadialAccelVar(float_t,)", "contents": "setRadialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleRain_setLifeVar(float_lifeVar,)", "contents": "setLifeVar(${1:float_lifeVar})" }
,
		{ "trigger": "CCParticleRain_setEndRadius(float_endRadius,)", "contents": "setEndRadius(${1:float_endRadius})" }
,
		{ "trigger": "CCParticleRain_getEndSpin()", "contents": "getEndSpin()" }
,
		{ "trigger": "CCParticleRain_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCParticleRain_setAngle(float_angle,)", "contents": "setAngle(${1:float_angle})" }
,
		{ "trigger": "CCParticleRain_retain()", "contents": "retain()" }
,
		{ "trigger": "CCParticleRain_release()", "contents": "release()" }
,
		{ "trigger": "CCParticleRain_getRotatePerSecondVar()", "contents": "getRotatePerSecondVar()" }
,
		{ "trigger": "CCParticleRain_addParticle()", "contents": "addParticle()" }
,
		{ "trigger": "CCParticleRain_setLife(float_life,)", "contents": "setLife(${1:float_life})" }
,
		{ "trigger": "CCParticleRain_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleRain_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCParticleRain_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCParticleRain_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCParticleRain_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCParticleRain_setTexture(CCTexture2D*_texture,)", "contents": "setTexture(${1:CCTexture2D*_texture})" }
,
		{ "trigger": "CCParticleRain_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCParticleRain_setEndColorVar(const_ccColor4F_var,)", "contents": "setEndColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleRain_getStartColorVar()", "contents": "getStartColorVar()" }
,
		{ "trigger": "CCParticleRain_stopSystem()", "contents": "stopSystem()" }
,
		{ "trigger": "CCParticleRain_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCParticleRain_create()", "contents": "CCParticleRain:create()" }
,

		{ "trigger": "CCEGLViewProtocol_getFrameSize()", "contents": "getFrameSize()" }
,
		{ "trigger": "CCEGLViewProtocol_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCEGLViewProtocol_getVisibleOrigin()", "contents": "getVisibleOrigin()" }
,
		{ "trigger": "CCEGLViewProtocol_getDesignResolutionSize()", "contents": "getDesignResolutionSize()" }
,
		{ "trigger": "CCEGLViewProtocol_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCEGLViewProtocol_getViewPortRect()", "contents": "getViewPortRect()" }
,
		{ "trigger": "CCEGLViewProtocol_setDesignResolutionSize(float_width,float_height,ResolutionPolicy_resolutionPolicy,)", "contents": "setDesignResolutionSize(${1:float_width},${2:float_height},${3:ResolutionPolicy_resolutionPolicy})" }
,
		{ "trigger": "CCEGLViewProtocol_setFrameSize(float_width,float_height,)", "contents": "setFrameSize(${1:float_width},${2:float_height})" }
,
		{ "trigger": "CCEGLViewProtocol_setScissorInPoints(float_x_,float_y_,float_w_,float_h,)", "contents": "setScissorInPoints(${1:float_x_},${2:float_y_},${3:float_w_},${4:float_h})" }
,
		{ "trigger": "CCEGLViewProtocol_getVisibleSize()", "contents": "getVisibleSize()" }
,
		{ "trigger": "CCEGLViewProtocol_setViewPortInPoints(float_x_,float_y_,float_w_,float_h,)", "contents": "setViewPortInPoints(${1:float_x_},${2:float_y_},${3:float_w_},${4:float_h})" }
,
		{ "trigger": "CCEGLViewProtocol_setTouchDelegate(EGLTouchDelegate_*_pDelegate,)", "contents": "setTouchDelegate(${1:EGLTouchDelegate_*_pDelegate})" }
,

		{ "trigger": "CCPlace_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCPlace_retain()", "contents": "retain()" }
,
		{ "trigger": "CCPlace_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCPlace_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCPlace_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCPlace_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCPlace_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCPlace_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCPlace_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCPlace_copy()", "contents": "copy()" }
,
		{ "trigger": "CCPlace_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCPlace_release()", "contents": "release()" }
,
		{ "trigger": "CCPlace_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCPlace_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCPlace_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCPlace_create(CCPoint_pos,)", "contents": "CCPlace:create(${1:CCPoint_pos})" }
,

		{ "trigger": "CCParticleSnow_setEndColor(const_ccColor4F_var,)", "contents": "setEndColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSnow_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleSnow_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCParticleSnow_setRotatePerSecondVar(float_degrees,)", "contents": "setRotatePerSecondVar(${1:float_degrees})" }
,
		{ "trigger": "CCParticleSnow_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCParticleSnow_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCParticleSnow_transform()", "contents": "transform()" }
,
		{ "trigger": "CCParticleSnow_getRotatePerSecond()", "contents": "getRotatePerSecond()" }
,
		{ "trigger": "CCParticleSnow_setTextureWithRect(CCTexture2D_*texture,const_CCRect&_rect,)", "contents": "setTextureWithRect(${1:CCTexture2D_*texture},${2:const_CCRect&_rect})" }
,
		{ "trigger": "CCParticleSnow_getAngleVar()", "contents": "getAngleVar()" }
,
		{ "trigger": "CCParticleSnow_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleSnow_isAutoRemoveOnFinish()", "contents": "isAutoRemoveOnFinish()" }
,
		{ "trigger": "CCParticleSnow_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleSnow_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCParticleSnow_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCParticleSnow_setTangentialAccel(float_t,)", "contents": "setTangentialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleSnow_getStartSpin()", "contents": "getStartSpin()" }
,
		{ "trigger": "CCParticleSnow_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCParticleSnow_getStartColor()", "contents": "getStartColor()" }
,
		{ "trigger": "CCParticleSnow_setStartSpinVar(float_var,)", "contents": "setStartSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleSnow_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCParticleSnow_setStartRadius(float_startRadius,)", "contents": "setStartRadius(${1:float_startRadius})" }
,
		{ "trigger": "CCParticleSnow_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCParticleSnow_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCParticleSnow_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCParticleSnow_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCParticleSnow_getPosVar()", "contents": "getPosVar()" }
,
		{ "trigger": "CCParticleSnow_setAngleVar(float_angle,)", "contents": "setAngleVar(${1:float_angle})" }
,
		{ "trigger": "CCParticleSnow_isFull()", "contents": "isFull()" }
,
		{ "trigger": "CCParticleSnow_setStartRadiusVar(float_startRadiusVar,)", "contents": "setStartRadiusVar(${1:float_startRadiusVar})" }
,
		{ "trigger": "CCParticleSnow_getStartSpinVar()", "contents": "getStartSpinVar()" }
,
		{ "trigger": "CCParticleSnow_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCParticleSnow_setDisplayFrame(CCSpriteFrame*_spriteFrame,)", "contents": "setDisplayFrame(${1:CCSpriteFrame*_spriteFrame})" }
,
		{ "trigger": "CCParticleSnow_setBatchNode(CCParticleBatchNode*_node,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_node})" }
,
		{ "trigger": "CCParticleSnow_isBlendAdditive()", "contents": "isBlendAdditive()" }
,
		{ "trigger": "CCParticleSnow_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCParticleSnow_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCParticleSnow_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCParticleSnow_getEmissionRate()", "contents": "getEmissionRate()" }
,
		{ "trigger": "CCParticleSnow_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCParticleSnow_setEndRadiusVar(float_endRadiusVar,)", "contents": "setEndRadiusVar(${1:float_endRadiusVar})" }
,
		{ "trigger": "CCParticleSnow_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleSnow_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCParticleSnow_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCParticleSnow_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCParticleSnow_postStep()", "contents": "postStep()" }
,
		{ "trigger": "CCParticleSnow_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCParticleSnow_setBlendAdditive(bool_value,)", "contents": "setBlendAdditive(${1:bool_value})" }
,
		{ "trigger": "CCParticleSnow_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleSnow_setEndSpin(float_var,)", "contents": "setEndSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleSnow_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCParticleSnow_setBatchNode(CCParticleBatchNode*_batchNode,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_batchNode})" }
,
		{ "trigger": "CCParticleSnow_getEndRadius()", "contents": "getEndRadius()" }
,
		{ "trigger": "CCParticleSnow_getStartSize()", "contents": "getStartSize()" }
,
		{ "trigger": "CCParticleSnow_getTotalParticles()", "contents": "getTotalParticles()" }
,
		{ "trigger": "CCParticleSnow_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCParticleSnow_getStartSizeVar()", "contents": "getStartSizeVar()" }
,
		{ "trigger": "CCParticleSnow_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleSnow_setGravity(const_CCPoint&_g,)", "contents": "setGravity(${1:const_CCPoint&_g})" }
,
		{ "trigger": "CCParticleSnow_getSourcePosition()", "contents": "getSourcePosition()" }
,
		{ "trigger": "CCParticleSnow_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleSnow_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCParticleSnow_getTangentialAccelVar()", "contents": "getTangentialAccelVar()" }
,
		{ "trigger": "CCParticleSnow_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleSnow_getEndSpinVar()", "contents": "getEndSpinVar()" }
,
		{ "trigger": "CCParticleSnow_setAutoRemoveOnFinish(bool_var,)", "contents": "setAutoRemoveOnFinish(${1:bool_var})" }
,
		{ "trigger": "CCParticleSnow_setPosVar(CCPoint_pos,)", "contents": "setPosVar(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleSnow_setEmissionRate(float_rate,)", "contents": "setEmissionRate(${1:float_rate})" }
,
		{ "trigger": "CCParticleSnow_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleSnow_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleSnow_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCParticleSnow_getRadialAccelVar()", "contents": "getRadialAccelVar()" }
,
		{ "trigger": "CCParticleSnow_getStartRadius()", "contents": "getStartRadius()" }
,
		{ "trigger": "CCParticleSnow_getEndColorVar()", "contents": "getEndColorVar()" }
,
		{ "trigger": "CCParticleSnow_setStartColorVar(const_ccColor4F_var,)", "contents": "setStartColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSnow_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCParticleSnow_initWithFile(const_char*_plistFile,)", "contents": "initWithFile(${1:const_char*_plistFile})" }
,
		{ "trigger": "CCParticleSnow_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCParticleSnow_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCParticleSnow_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCParticleSnow_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCParticleSnow_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCParticleSnow_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCParticleSnow_setStartSpin(float_var,)", "contents": "setStartSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleSnow_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCParticleSnow_getEndSize()", "contents": "getEndSize()" }
,
		{ "trigger": "CCParticleSnow_setSourcePosition(CCPoint_pos,)", "contents": "setSourcePosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleSnow_initParticle(tCCParticle*_particle,)", "contents": "initParticle(${1:tCCParticle*_particle})" }
,
		{ "trigger": "CCParticleSnow_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCParticleSnow_updateQuadWithParticle(tCCParticle*_particle,const_CCPoint&_newPosition,)", "contents": "updateQuadWithParticle(${1:tCCParticle*_particle},${2:const_CCPoint&_newPosition})" }
,
		{ "trigger": "CCParticleSnow_setStartColor(const_ccColor4F_var,)", "contents": "setStartColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSnow_getEndColor()", "contents": "getEndColor()" }
,
		{ "trigger": "CCParticleSnow_setEmitterMode(int_mode,)", "contents": "setEmitterMode(${1:int_mode})" }
,
		{ "trigger": "CCParticleSnow_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCParticleSnow_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCParticleSnow_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCParticleSnow_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCParticleSnow_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCParticleSnow_setStartSizeVar(float_size,)", "contents": "setStartSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleSnow_getLife()", "contents": "getLife()" }
,
		{ "trigger": "CCParticleSnow_setBlendFunc(ccBlendFunc_var,)", "contents": "setBlendFunc(${1:ccBlendFunc_var})" }
,
		{ "trigger": "CCParticleSnow_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleSnow_getAngle()", "contents": "getAngle()" }
,
		{ "trigger": "CCParticleSnow_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCParticleSnow_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCParticleSnow_getEmitterMode()", "contents": "getEmitterMode()" }
,
		{ "trigger": "CCParticleSnow_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleSnow_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCParticleSnow_getTangentialAccel()", "contents": "getTangentialAccel()" }
,
		{ "trigger": "CCParticleSnow_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCParticleSnow_visit()", "contents": "visit()" }
,
		{ "trigger": "CCParticleSnow_setTexture(CCTexture2D*_var,)", "contents": "setTexture(${1:CCTexture2D*_var})" }
,
		{ "trigger": "CCParticleSnow_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "CCParticleSnow_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCParticleSnow_setScale(float_s,)", "contents": "setScale(${1:float_s})" }
,
		{ "trigger": "CCParticleSnow_draw()", "contents": "draw()" }
,
		{ "trigger": "CCParticleSnow_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleSnow_setEndSpinVar(float_var,)", "contents": "setEndSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleSnow_setSpeed(float_speed,)", "contents": "setSpeed(${1:float_speed})" }
,
		{ "trigger": "CCParticleSnow_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCParticleSnow_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCParticleSnow_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCParticleSnow_setStartSize(float_size,)", "contents": "setStartSize(${1:float_size})" }
,
		{ "trigger": "CCParticleSnow_getStartRadiusVar()", "contents": "getStartRadiusVar()" }
,
		{ "trigger": "CCParticleSnow_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCParticleSnow_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCParticleSnow_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCParticleSnow_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCParticleSnow_getSpeed()", "contents": "getSpeed()" }
,
		{ "trigger": "CCParticleSnow_setTotalParticles(unsigned_int_tp,)", "contents": "setTotalParticles(${1:unsigned_int_tp})" }
,
		{ "trigger": "CCParticleSnow_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCParticleSnow_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCParticleSnow_setRotatePerSecond(float_degrees,)", "contents": "setRotatePerSecond(${1:float_degrees})" }
,
		{ "trigger": "CCParticleSnow_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCParticleSnow_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCParticleSnow_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCParticleSnow_getEndRadiusVar()", "contents": "getEndRadiusVar()" }
,
		{ "trigger": "CCParticleSnow_getParticleCount()", "contents": "getParticleCount()" }
,
		{ "trigger": "CCParticleSnow_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCParticleSnow_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCParticleSnow_getEndSizeVar()", "contents": "getEndSizeVar()" }
,
		{ "trigger": "CCParticleSnow_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleSnow_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCParticleSnow_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCParticleSnow_setTangentialAccelVar(float_t,)", "contents": "setTangentialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleSnow_getSpeedVar()", "contents": "getSpeedVar()" }
,
		{ "trigger": "CCParticleSnow_setSpeedVar(float_speed,)", "contents": "setSpeedVar(${1:float_speed})" }
,
		{ "trigger": "CCParticleSnow_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCParticleSnow_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCParticleSnow_setEndSizeVar(float_size,)", "contents": "setEndSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleSnow_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCParticleSnow_getLifeVar()", "contents": "getLifeVar()" }
,
		{ "trigger": "CCParticleSnow_setPositionType(tCCPositionType_type,)", "contents": "setPositionType(${1:tCCPositionType_type})" }
,
		{ "trigger": "CCParticleSnow_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCParticleSnow_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleSnow_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCParticleSnow_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCParticleSnow_getBatchNode()", "contents": "getBatchNode()" }
,
		{ "trigger": "CCParticleSnow_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleSnow_initWithTotalParticles(unsigned_int_number,)", "contents": "initWithTotalParticles(${1:unsigned_int_number})" }
,
		{ "trigger": "CCParticleSnow_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleSnow_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCParticleSnow_setDuration(float_d,)", "contents": "setDuration(${1:float_d})" }
,
		{ "trigger": "CCParticleSnow_setRadialAccel(float_t,)", "contents": "setRadialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleSnow_resetSystem()", "contents": "resetSystem()" }
,
		{ "trigger": "CCParticleSnow_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleSnow_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCParticleSnow_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCParticleSnow_copy()", "contents": "copy()" }
,
		{ "trigger": "CCParticleSnow_setEndSize(float_size,)", "contents": "setEndSize(${1:float_size})" }
,
		{ "trigger": "CCParticleSnow_getRadialAccel()", "contents": "getRadialAccel()" }
,
		{ "trigger": "CCParticleSnow_isActive()", "contents": "isActive()" }
,
		{ "trigger": "CCParticleSnow_description()", "contents": "description()" }
,
		{ "trigger": "CCParticleSnow_getGravity()", "contents": "getGravity()" }
,
		{ "trigger": "CCParticleSnow_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleSnow_setRadialAccelVar(float_t,)", "contents": "setRadialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleSnow_setLifeVar(float_lifeVar,)", "contents": "setLifeVar(${1:float_lifeVar})" }
,
		{ "trigger": "CCParticleSnow_setEndRadius(float_endRadius,)", "contents": "setEndRadius(${1:float_endRadius})" }
,
		{ "trigger": "CCParticleSnow_getEndSpin()", "contents": "getEndSpin()" }
,
		{ "trigger": "CCParticleSnow_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCParticleSnow_setAngle(float_angle,)", "contents": "setAngle(${1:float_angle})" }
,
		{ "trigger": "CCParticleSnow_retain()", "contents": "retain()" }
,
		{ "trigger": "CCParticleSnow_release()", "contents": "release()" }
,
		{ "trigger": "CCParticleSnow_getRotatePerSecondVar()", "contents": "getRotatePerSecondVar()" }
,
		{ "trigger": "CCParticleSnow_addParticle()", "contents": "addParticle()" }
,
		{ "trigger": "CCParticleSnow_setLife(float_life,)", "contents": "setLife(${1:float_life})" }
,
		{ "trigger": "CCParticleSnow_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleSnow_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCParticleSnow_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCParticleSnow_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCParticleSnow_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCParticleSnow_setTexture(CCTexture2D*_texture,)", "contents": "setTexture(${1:CCTexture2D*_texture})" }
,
		{ "trigger": "CCParticleSnow_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCParticleSnow_setEndColorVar(const_ccColor4F_var,)", "contents": "setEndColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSnow_getStartColorVar()", "contents": "getStartColorVar()" }
,
		{ "trigger": "CCParticleSnow_stopSystem()", "contents": "stopSystem()" }
,
		{ "trigger": "CCParticleSnow_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCParticleSnow_create()", "contents": "CCParticleSnow:create()" }
,

		{ "trigger": "CCGridAction_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCGridAction_retain()", "contents": "retain()" }
,
		{ "trigger": "CCGridAction_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCGridAction_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCGridAction_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCGridAction_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCGridAction_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCGridAction_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCGridAction_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCGridAction_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCGridAction_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCGridAction_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCGridAction_copy()", "contents": "copy()" }
,
		{ "trigger": "CCGridAction_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCGridAction_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCGridAction_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCGridAction_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCGridAction_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCGridAction_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCGridAction_release()", "contents": "release()" }
,
		{ "trigger": "CCGridAction_create(float_duration,CCSize_gridSize,)", "contents": "CCGridAction:create(${1:float_duration},${2:CCSize_gridSize})" }
,

		{ "trigger": "CCRipple3D_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCRipple3D_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCRipple3D_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCRipple3D_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCRipple3D_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCRipple3D_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCRipple3D_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCRipple3D_retain()", "contents": "retain()" }
,
		{ "trigger": "CCRipple3D_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCRipple3D_release()", "contents": "release()" }
,
		{ "trigger": "CCRipple3D_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCRipple3D_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCRipple3D_originalVertex(const_CCPoint&_pos,)", "contents": "originalVertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCRipple3D_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCRipple3D_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCRipple3D_vertex(const_CCPoint&_pos,)", "contents": "vertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCRipple3D_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCRipple3D_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCRipple3D_setAmplitudeRate(float_fAmplitudeRate,)", "contents": "setAmplitudeRate(${1:float_fAmplitudeRate})" }
,
		{ "trigger": "CCRipple3D_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCRipple3D_setVertex(const_CCPoint&_pos,const_ccVertex3F&_vertex,)", "contents": "setVertex(${1:const_CCPoint&_pos},${2:const_ccVertex3F&_vertex})" }
,
		{ "trigger": "CCRipple3D_getAmplitude()", "contents": "getAmplitude()" }
,
		{ "trigger": "CCRipple3D_copy()", "contents": "copy()" }
,
		{ "trigger": "CCRipple3D_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCRipple3D_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCRipple3D_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCRipple3D_setPosition(CCPoint_position,)", "contents": "setPosition(${1:CCPoint_position})" }
,
		{ "trigger": "CCRipple3D_setAmplitude(float_fAmplitude,)", "contents": "setAmplitude(${1:float_fAmplitude})" }
,
		{ "trigger": "CCRipple3D_create(float_duration,CCSize_gridSize,CCPoint_position,float_radius,unsigned_int_waves,float_amplitude,)", "contents": "CCRipple3D:create(${1:float_duration},${2:CCSize_gridSize},${3:CCPoint_position},${4:float_radius},${5:unsigned_int_waves},${6:float_amplitude})" }
,


		{ "trigger": "CCScaleBy_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCScaleBy_retain()", "contents": "retain()" }
,
		{ "trigger": "CCScaleBy_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCScaleBy_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCScaleBy_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCScaleBy_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCScaleBy_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCScaleBy_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCScaleBy_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCScaleBy_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCScaleBy_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCScaleBy_copy()", "contents": "copy()" }
,
		{ "trigger": "CCScaleBy_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCScaleBy_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCScaleBy_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCScaleBy_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCScaleBy_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCScaleBy_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCScaleBy_release()", "contents": "release()" }
,
		{ "trigger": "CCScaleBy_create(float_duration,float_sx,float_sy,)", "contents": "CCScaleBy:create(${1:float_duration},${2:float_sx},${3:float_sy})" }
,
		{ "trigger": "CCScaleBy_create(float_duration,float_s,)", "contents": "CCScaleBy:create(${1:float_duration},${2:float_s})" }
,

		{ "trigger": "CCTransitionZoomFlipAngular_create(float_t,CCScene*_s,tOrientation_o_=_kCCTransitionOrientationRightOver,)", "contents": "CCTransitionZoomFlipAngular:create(${1:float_t},${2:CCScene*_s},${3:tOrientation_o_=_kCCTransitionOrientationRightOver})" }
,

		{ "trigger": "CCCardinalSplineTo_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCCardinalSplineTo_getPoints()", "contents": "getPoints()" }
,
		{ "trigger": "CCCardinalSplineTo_setPoints(CCPointArray*_points,)", "contents": "setPoints(${1:CCPointArray*_points})" }
,
		{ "trigger": "CCCardinalSplineTo_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCCardinalSplineTo_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCCardinalSplineTo_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCCardinalSplineTo_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCCardinalSplineTo_retain()", "contents": "retain()" }
,
		{ "trigger": "CCCardinalSplineTo_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCCardinalSplineTo_copy()", "contents": "copy()" }
,
		{ "trigger": "CCCardinalSplineTo_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCCardinalSplineTo_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCCardinalSplineTo_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCCardinalSplineTo_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCCardinalSplineTo_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCCardinalSplineTo_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCCardinalSplineTo_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCCardinalSplineTo_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCCardinalSplineTo_release()", "contents": "release()" }
,
		{ "trigger": "CCCardinalSplineTo_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCCardinalSplineTo_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCCardinalSplineTo_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCCardinalSplineTo_create(float_duration,CCPointArray*_points,float_tension,)", "contents": "CCCardinalSplineTo:create(${1:float_duration},${2:CCPointArray*_points},${3:float_tension})" }
,

		{ "trigger": "CCActionInstant_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCActionInstant_copy()", "contents": "copy()" }
,
		{ "trigger": "CCActionInstant_retain()", "contents": "retain()" }
,
		{ "trigger": "CCActionInstant_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCActionInstant_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCActionInstant_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCActionInstant_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCActionInstant_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCActionInstant_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCActionInstant_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCActionInstant_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCActionInstant_release()", "contents": "release()" }
,
		{ "trigger": "CCActionInstant_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCActionInstant_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCActionInstant_getTarget()", "contents": "getTarget()" }
,

		{ "trigger": "CCPointArray_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCPointArray_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCPointArray_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCPointArray_replaceControlPoint(CCPoint_&controlPoint,unsigned_int_index,)", "contents": "replaceControlPoint(${1:CCPoint_&controlPoint},${2:unsigned_int_index})" }
,
		{ "trigger": "CCPointArray_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCPointArray_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCPointArray_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCPointArray_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCPointArray_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCPointArray_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCPointArray_transform()", "contents": "transform()" }
,
		{ "trigger": "CCPointArray_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCPointArray_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCPointArray_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCPointArray_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCPointArray_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCPointArray_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCPointArray_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCPointArray_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCPointArray_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCPointArray_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCPointArray_addControlPoint(CCPoint_controlPoint,)", "contents": "addControlPoint(${1:CCPoint_controlPoint})" }
,
		{ "trigger": "CCPointArray_draw()", "contents": "draw()" }
,
		{ "trigger": "CCPointArray_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCPointArray_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCPointArray_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCPointArray_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCPointArray_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCPointArray_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCPointArray_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCPointArray_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCPointArray_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCPointArray_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCPointArray_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCPointArray_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCPointArray_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCPointArray_initWithCapacity(unsigned_int_capacity,)", "contents": "initWithCapacity(${1:unsigned_int_capacity})" }
,
		{ "trigger": "CCPointArray_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCPointArray_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCPointArray_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCPointArray_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCPointArray_insertControlPoint(CCPoint_&controlPoint,unsigned_int_index,)", "contents": "insertControlPoint(${1:CCPoint_&controlPoint},${2:unsigned_int_index})" }
,
		{ "trigger": "CCPointArray_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCPointArray_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCPointArray_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCPointArray_visit()", "contents": "visit()" }
,
		{ "trigger": "CCPointArray_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCPointArray_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCPointArray_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCPointArray_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCPointArray_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCPointArray_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCPointArray_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCPointArray_setControlPoints(std::vector<CCPoint*>_*controlPoints,)", "contents": "setControlPoints(${1:std::vector<CCPoint*>_*controlPoints})" }
,
		{ "trigger": "CCPointArray_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCPointArray_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCPointArray_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCPointArray_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCPointArray_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCPointArray_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCPointArray_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCPointArray_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCPointArray_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCPointArray_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCPointArray_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCPointArray_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCPointArray_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCPointArray_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCPointArray_reverseInline()", "contents": "reverseInline()" }
,
		{ "trigger": "CCPointArray_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCPointArray_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCPointArray_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCPointArray_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCPointArray_copy()", "contents": "copy()" }
,
		{ "trigger": "CCPointArray_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCPointArray_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCPointArray_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCPointArray_description()", "contents": "description()" }
,
		{ "trigger": "CCPointArray_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCPointArray_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCPointArray_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCPointArray_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCPointArray_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCPointArray_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCPointArray_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCPointArray_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCPointArray_release()", "contents": "release()" }
,
		{ "trigger": "CCPointArray_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCPointArray_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCPointArray_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCPointArray_getControlPointAtIndex(unsigned_int_index,)", "contents": "getControlPointAtIndex(${1:unsigned_int_index})" }
,
		{ "trigger": "CCPointArray_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCPointArray_count()", "contents": "count()" }
,
		{ "trigger": "CCPointArray_retain()", "contents": "retain()" }
,
		{ "trigger": "CCPointArray_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCPointArray_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCPointArray_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCPointArray_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCPointArray_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCPointArray_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCPointArray_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCPointArray_removeControlPointAtIndex(unsigned_int_index,)", "contents": "removeControlPointAtIndex(${1:unsigned_int_index})" }
,
		{ "trigger": "CCPointArray_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCPointArray_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCPointArray_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCPointArray_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCPointArray_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCPointArray_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCPointArray_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCPointArray_create(unsigned_int_capacity,)", "contents": "CCPointArray:create(${1:unsigned_int_capacity})" }
,

		{ "trigger": "CCAnimation_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCAnimation_addSpriteFrameWithTexture(CCTexture2D*_pobTexture,const_CCRect&_rect,)", "contents": "addSpriteFrameWithTexture(${1:CCTexture2D*_pobTexture},${2:const_CCRect&_rect})" }
,
		{ "trigger": "CCAnimation_retain()", "contents": "retain()" }
,
		{ "trigger": "CCAnimation_getDelayPerUnit()", "contents": "getDelayPerUnit()" }
,
		{ "trigger": "CCAnimation_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCAnimation_setLoops(unsigned_int_uLoops,)", "contents": "setLoops(${1:unsigned_int_uLoops})" }
,
		{ "trigger": "CCAnimation_addSpriteFrameWithFileName(const_char_*pszFileName,)", "contents": "addSpriteFrameWithFileName(${1:const_char_*pszFileName})" }
,
		{ "trigger": "CCAnimation_setDelayPerUnit(float_fDelayPerUnits,)", "contents": "setDelayPerUnit(${1:float_fDelayPerUnits})" }
,
		{ "trigger": "CCAnimation_setFrames(CCArray*_pFrames,)", "contents": "setFrames(${1:CCArray*_pFrames})" }
,
		{ "trigger": "CCAnimation_copy()", "contents": "copy()" }
,
		{ "trigger": "CCAnimation_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCAnimation_release()", "contents": "release()" }
,
		{ "trigger": "CCAnimation_getLoops()", "contents": "getLoops()" }
,
		{ "trigger": "CCAnimation_addSpriteFrame(CCSpriteFrame_*pFrame,)", "contents": "addSpriteFrame(${1:CCSpriteFrame_*pFrame})" }
,
		{ "trigger": "CCAnimation_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCAnimation_getFrames()", "contents": "getFrames()" }
,
		{ "trigger": "CCAnimation_getRestoreOriginalFrame()", "contents": "getRestoreOriginalFrame()" }
,
		{ "trigger": "CCAnimation_getTotalDelayUnits()", "contents": "getTotalDelayUnits()" }
,
		{ "trigger": "CCAnimation_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCAnimation_setRestoreOriginalFrame(bool_bRestoreFrame,)", "contents": "setRestoreOriginalFrame(${1:bool_bRestoreFrame})" }
,
		{ "trigger": "CCAnimation_createWithSpriteFrames(CCArray*_arrayOfSpriteFrameNames,float_delay,)", "contents": "CCAnimation:createWithSpriteFrames(${1:CCArray*_arrayOfSpriteFrameNames},${2:float_delay})" }
,
		{ "trigger": "CCAnimation_create()", "contents": "CCAnimation:create()" }
,
		{ "trigger": "CCAnimation_create(CCArray_*arrayOfAnimationFrameNames,float_delayPerUnit,unsigned_int_loops,)", "contents": "CCAnimation:create(${1:CCArray_*arrayOfAnimationFrameNames},${2:float_delayPerUnit},${3:unsigned_int_loops})" }
,
		{ "trigger": "CCAnimation_createWithSpriteFrames(CCArray*_arrayOfSpriteFrameNames,)", "contents": "CCAnimation:createWithSpriteFrames(${1:CCArray*_arrayOfSpriteFrameNames})" }
,

		{ "trigger": "CCEaseBackIn_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseBackIn_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseBackIn_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseBackIn_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseBackIn_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseBackIn_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseBackIn_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseBackIn_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseBackIn_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseBackIn_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseBackIn_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseBackIn_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseBackIn_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseBackIn_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseBackIn_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseBackIn_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseBackIn_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseBackIn_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseBackIn_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseBackIn_create(CCActionInterval*_pAction,)", "contents": "CCEaseBackIn:create(${1:CCActionInterval*_pAction})" }
,

		{ "trigger": "CCEaseExponentialIn_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseExponentialIn_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseExponentialIn_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseExponentialIn_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseExponentialIn_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseExponentialIn_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseExponentialIn_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseExponentialIn_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseExponentialIn_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseExponentialIn_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseExponentialIn_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseExponentialIn_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseExponentialIn_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseExponentialIn_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseExponentialIn_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseExponentialIn_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseExponentialIn_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseExponentialIn_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseExponentialIn_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseExponentialIn_create(CCActionInterval*_pAction,)", "contents": "CCEaseExponentialIn:create(${1:CCActionInterval*_pAction})" }
,

		{ "trigger": "CCEaseElastic_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseElastic_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseElastic_setPeriod(float_fPeriod,)", "contents": "setPeriod(${1:float_fPeriod})" }
,
		{ "trigger": "CCEaseElastic_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseElastic_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseElastic_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseElastic_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseElastic_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseElastic_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseElastic_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseElastic_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseElastic_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseElastic_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseElastic_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseElastic_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseElastic_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseElastic_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseElastic_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseElastic_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseElastic_getPeriod()", "contents": "getPeriod()" }
,
		{ "trigger": "CCEaseElastic_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseElastic_create(CCActionInterval_*pAction,float_fPeriod_=_0.3,)", "contents": "CCEaseElastic:create(${1:CCActionInterval_*pAction},${2:float_fPeriod_=_0.3})" }
,

		{ "trigger": "CCWaves3D_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCWaves3D_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCWaves3D_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCWaves3D_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCWaves3D_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCWaves3D_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCWaves3D_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCWaves3D_retain()", "contents": "retain()" }
,
		{ "trigger": "CCWaves3D_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCWaves3D_release()", "contents": "release()" }
,
		{ "trigger": "CCWaves3D_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCWaves3D_originalVertex(const_CCPoint&_pos,)", "contents": "originalVertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCWaves3D_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCWaves3D_setVertex(const_CCPoint&_pos,const_ccVertex3F&_vertex,)", "contents": "setVertex(${1:const_CCPoint&_pos},${2:const_ccVertex3F&_vertex})" }
,
		{ "trigger": "CCWaves3D_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCWaves3D_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCWaves3D_vertex(const_CCPoint&_pos,)", "contents": "vertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCWaves3D_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCWaves3D_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCWaves3D_setAmplitudeRate(float_fAmplitudeRate,)", "contents": "setAmplitudeRate(${1:float_fAmplitudeRate})" }
,
		{ "trigger": "CCWaves3D_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCWaves3D_getAmplitude()", "contents": "getAmplitude()" }
,
		{ "trigger": "CCWaves3D_copy()", "contents": "copy()" }
,
		{ "trigger": "CCWaves3D_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCWaves3D_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCWaves3D_setAmplitude(float_fAmplitude,)", "contents": "setAmplitude(${1:float_fAmplitude})" }
,
		{ "trigger": "CCWaves3D_create(float_duration,CCSize_gridSize,unsigned_int_waves,float_amplitude,)", "contents": "CCWaves3D:create(${1:float_duration},${2:CCSize_gridSize},${3:unsigned_int_waves},${4:float_amplitude})" }
,

		{ "trigger": "CCTMXTilesetInfo_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTMXTilesetInfo_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTMXTilesetInfo_release()", "contents": "release()" }
,
		{ "trigger": "CCTMXTilesetInfo_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTMXTilesetInfo_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTMXTilesetInfo_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTMXTilesetInfo_rectForGID(unsigned_int_gid,)", "contents": "rectForGID(${1:unsigned_int_gid})" }
,
		{ "trigger": "CCTMXTilesetInfo_copy()", "contents": "copy()" }
,

		{ "trigger": "CCTransitionProgressRadialCCW_create(float_t,CCScene*_scene,)", "contents": "CCTransitionProgressRadialCCW:create(${1:float_t},${2:CCScene*_scene})" }
,



		{ "trigger": "CCTileMapAtlas_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCTileMapAtlas_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTileMapAtlas_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCTileMapAtlas_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCTileMapAtlas_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCTileMapAtlas_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCTileMapAtlas_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTileMapAtlas_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCTileMapAtlas_transform()", "contents": "transform()" }
,
		{ "trigger": "CCTileMapAtlas_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTileMapAtlas_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTileMapAtlas_updateAtlasValues()", "contents": "updateAtlasValues()" }
,
		{ "trigger": "CCTileMapAtlas_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTileMapAtlas_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTileMapAtlas_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCTileMapAtlas_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTileMapAtlas_tileAt(const_CCPoint_&_pos,)", "contents": "tileAt(${1:const_CCPoint_&_pos})" }
,
		{ "trigger": "CCTileMapAtlas_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCTileMapAtlas_setTexture(CCTexture2D_*texture,)", "contents": "setTexture(${1:CCTexture2D_*texture})" }
,
		{ "trigger": "CCTileMapAtlas_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCTileMapAtlas_draw()", "contents": "draw()" }
,
		{ "trigger": "CCTileMapAtlas_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCTileMapAtlas_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCTileMapAtlas_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCTileMapAtlas_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCTileMapAtlas_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCTileMapAtlas_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCTileMapAtlas_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCTileMapAtlas_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTileMapAtlas_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTileMapAtlas_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCTileMapAtlas_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCTileMapAtlas_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCTileMapAtlas_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCTileMapAtlas_getQuadsToDraw()", "contents": "getQuadsToDraw()" }
,
		{ "trigger": "CCTileMapAtlas_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCTileMapAtlas_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCTileMapAtlas_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCTileMapAtlas_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCTileMapAtlas_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCTileMapAtlas_setQuadsToDraw(unsigned_int_quadsToDraw,)", "contents": "setQuadsToDraw(${1:unsigned_int_quadsToDraw})" }
,
		{ "trigger": "CCTileMapAtlas_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCTileMapAtlas_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCTileMapAtlas_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCTileMapAtlas_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCTileMapAtlas_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCTileMapAtlas_getTextureAtlas()", "contents": "getTextureAtlas()" }
,
		{ "trigger": "CCTileMapAtlas_visit()", "contents": "visit()" }
,
		{ "trigger": "CCTileMapAtlas_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTileMapAtlas_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCTileMapAtlas_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCTileMapAtlas_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCTileMapAtlas_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCTileMapAtlas_setOpacityModifyRGB(bool_isOpacityModifyRGB,)", "contents": "setOpacityModifyRGB(${1:bool_isOpacityModifyRGB})" }
,
		{ "trigger": "CCTileMapAtlas_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTileMapAtlas_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCTileMapAtlas_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCTileMapAtlas_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCTileMapAtlas_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCTileMapAtlas_setTextureAtlas(CCTextureAtlas*_atlas,)", "contents": "setTextureAtlas(${1:CCTextureAtlas*_atlas})" }
,
		{ "trigger": "CCTileMapAtlas_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCTileMapAtlas_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCTileMapAtlas_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCTileMapAtlas_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTileMapAtlas_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTileMapAtlas_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTileMapAtlas_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCTileMapAtlas_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCTileMapAtlas_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCTileMapAtlas_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTileMapAtlas_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCTileMapAtlas_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTileMapAtlas_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCTileMapAtlas_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCTileMapAtlas_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCTileMapAtlas_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCTileMapAtlas_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTileMapAtlas_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTileMapAtlas_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCTileMapAtlas_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTileMapAtlas_setTile(ccColor3B_tile,CCPoint_position,)", "contents": "setTile(${1:ccColor3B_tile},${2:CCPoint_position})" }
,
		{ "trigger": "CCTileMapAtlas_description()", "contents": "description()" }
,
		{ "trigger": "CCTileMapAtlas_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCTileMapAtlas_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTileMapAtlas_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCTileMapAtlas_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTileMapAtlas_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCTileMapAtlas_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCTileMapAtlas_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTileMapAtlas_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCTileMapAtlas_release()", "contents": "release()" }
,
		{ "trigger": "CCTileMapAtlas_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCTileMapAtlas_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCTileMapAtlas_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCTileMapAtlas_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCTileMapAtlas_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTileMapAtlas_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTileMapAtlas_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCTileMapAtlas_setColor(ccColor3B_color,)", "contents": "setColor(${1:ccColor3B_color})" }
,
		{ "trigger": "CCTileMapAtlas_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCTileMapAtlas_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCTileMapAtlas_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCTileMapAtlas_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTileMapAtlas_releaseMap()", "contents": "releaseMap()" }
,
		{ "trigger": "CCTileMapAtlas_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCTileMapAtlas_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTileMapAtlas_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTileMapAtlas_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCTileMapAtlas_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCTileMapAtlas_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCTileMapAtlas_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCTileMapAtlas_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCTileMapAtlas_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCTileMapAtlas_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCTileMapAtlas_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCTileMapAtlas_create(const_char_*tile,const_char_*mapFile,int_tileWidth,int_tileHeight,)", "contents": "CCTileMapAtlas:create(${1:const_char_*tile},${2:const_char_*mapFile},${3:int_tileWidth},${4:int_tileHeight})" }
,


		{ "trigger": "CCEaseOut_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseOut_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseOut_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseOut_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseOut_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseOut_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseOut_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseOut_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseOut_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseOut_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseOut_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseOut_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseOut_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseOut_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseOut_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseOut_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseOut_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseOut_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseOut_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseOut_create(CCActionInterval*_pAction,float_fRate,)", "contents": "CCEaseOut:create(${1:CCActionInterval*_pAction},${2:float_fRate})" }
,

		{ "trigger": "CCDelayTime_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCDelayTime_retain()", "contents": "retain()" }
,
		{ "trigger": "CCDelayTime_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCDelayTime_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCDelayTime_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCDelayTime_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCDelayTime_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCDelayTime_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCDelayTime_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCDelayTime_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCDelayTime_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCDelayTime_copy()", "contents": "copy()" }
,
		{ "trigger": "CCDelayTime_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCDelayTime_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCDelayTime_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCDelayTime_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCDelayTime_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCDelayTime_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCDelayTime_release()", "contents": "release()" }
,
		{ "trigger": "CCDelayTime_create(float_d,)", "contents": "CCDelayTime:create(${1:float_d})" }
,


		{ "trigger": "CCScene_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCScene_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCScene_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCScene_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCScene_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCScene_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCScene_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCScene_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCScene_transform()", "contents": "transform()" }
,
		{ "trigger": "CCScene_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCScene_visit()", "contents": "visit()" }
,
		{ "trigger": "CCScene_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCScene_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCScene_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCScene_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCScene_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCScene_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCScene_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCScene_draw()", "contents": "draw()" }
,
		{ "trigger": "CCScene_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCScene_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCScene_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCScene_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCScene_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCScene_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCScene_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCScene_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCScene_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCScene_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCScene_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCScene_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCScene_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCScene_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCScene_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCScene_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCScene_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCScene_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCScene_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCScene_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCScene_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCScene_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCScene_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCScene_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCScene_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCScene_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCScene_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCScene_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCScene_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCScene_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCScene_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCScene_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCScene_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCScene_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCScene_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCScene_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCScene_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCScene_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCScene_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCScene_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCScene_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCScene_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCScene_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCScene_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCScene_copy()", "contents": "copy()" }
,
		{ "trigger": "CCScene_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCScene_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCScene_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCScene_description()", "contents": "description()" }
,
		{ "trigger": "CCScene_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCScene_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCScene_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCScene_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCScene_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCScene_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCScene_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCScene_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCScene_release()", "contents": "release()" }
,
		{ "trigger": "CCScene_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCScene_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCScene_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCScene_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCScene_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCScene_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCScene_retain()", "contents": "retain()" }
,
		{ "trigger": "CCScene_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCScene_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCScene_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCScene_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCScene_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCScene_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCScene_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCScene_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCScene_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCScene_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCScene_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCScene_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCScene_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCScene_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCScene_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCScene_create()", "contents": "CCScene:create()" }
,

		{ "trigger": "CCEaseSineOut_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseSineOut_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseSineOut_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseSineOut_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseSineOut_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseSineOut_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseSineOut_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseSineOut_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseSineOut_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseSineOut_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseSineOut_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseSineOut_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseSineOut_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseSineOut_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseSineOut_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseSineOut_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseSineOut_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseSineOut_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseSineOut_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseSineOut_create(CCActionInterval*_pAction,)", "contents": "CCEaseSineOut:create(${1:CCActionInterval*_pAction})" }
,

		{ "trigger": "CCMenuItemImage_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCMenuItemImage_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCMenuItemImage_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCMenuItemImage_getNormalImage()", "contents": "getNormalImage()" }
,
		{ "trigger": "CCMenuItemImage_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCMenuItemImage_setNormalSpriteFrame(CCSpriteFrame*_frame,)", "contents": "setNormalSpriteFrame(${1:CCSpriteFrame*_frame})" }
,
		{ "trigger": "CCMenuItemImage_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCMenuItemImage_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCMenuItemImage_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCMenuItemImage_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCMenuItemImage_transform()", "contents": "transform()" }
,
		{ "trigger": "CCMenuItemImage_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCMenuItemImage_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCMenuItemImage_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCMenuItemImage_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemImage_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCMenuItemImage_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCMenuItemImage_activate()", "contents": "activate()" }
,
		{ "trigger": "CCMenuItemImage_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCMenuItemImage_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCMenuItemImage_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCMenuItemImage_draw()", "contents": "draw()" }
,
		{ "trigger": "CCMenuItemImage_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCMenuItemImage_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCMenuItemImage_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCMenuItemImage_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCMenuItemImage_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCMenuItemImage_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCMenuItemImage_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCMenuItemImage_setDisabledImage(CCNode*_pImage,)", "contents": "setDisabledImage(${1:CCNode*_pImage})" }
,
		{ "trigger": "CCMenuItemImage_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCMenuItemImage_setEnabled(bool_bEnabled,)", "contents": "setEnabled(${1:bool_bEnabled})" }
,
		{ "trigger": "CCMenuItemImage_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCMenuItemImage_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemImage_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCMenuItemImage_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCMenuItemImage_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCMenuItemImage_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCMenuItemImage_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCMenuItemImage_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCMenuItemImage_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCMenuItemImage_setSelectedSpriteFrame(CCSpriteFrame*_frame,)", "contents": "setSelectedSpriteFrame(${1:CCSpriteFrame*_frame})" }
,
		{ "trigger": "CCMenuItemImage_isSelected()", "contents": "isSelected()" }
,
		{ "trigger": "CCMenuItemImage_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCMenuItemImage_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCMenuItemImage_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCMenuItemImage_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCMenuItemImage_unselected()", "contents": "unselected()" }
,
		{ "trigger": "CCMenuItemImage_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCMenuItemImage_visit()", "contents": "visit()" }
,
		{ "trigger": "CCMenuItemImage_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemImage_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCMenuItemImage_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCMenuItemImage_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCMenuItemImage_getDisabledImage()", "contents": "getDisabledImage()" }
,
		{ "trigger": "CCMenuItemImage_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCMenuItemImage_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCMenuItemImage_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCMenuItemImage_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCMenuItemImage_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCMenuItemImage_setDisabledSpriteFrame(CCSpriteFrame*_frame,)", "contents": "setDisabledSpriteFrame(${1:CCSpriteFrame*_frame})" }
,
		{ "trigger": "CCMenuItemImage_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCMenuItemImage_selected()", "contents": "selected()" }
,
		{ "trigger": "CCMenuItemImage_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCMenuItemImage_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCMenuItemImage_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCMenuItemImage_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItemImage_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCMenuItemImage_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCMenuItemImage_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCMenuItemImage_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItemImage_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCMenuItemImage_getSelectedImage()", "contents": "getSelectedImage()" }
,
		{ "trigger": "CCMenuItemImage_setEnabled(bool_enabled,)", "contents": "setEnabled(${1:bool_enabled})" }
,
		{ "trigger": "CCMenuItemImage_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCMenuItemImage_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCMenuItemImage_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCMenuItemImage_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCMenuItemImage_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCMenuItemImage_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCMenuItemImage_copy()", "contents": "copy()" }
,
		{ "trigger": "CCMenuItemImage_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCMenuItemImage_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCMenuItemImage_setNormalImage(CCNode*_pImage,)", "contents": "setNormalImage(${1:CCNode*_pImage})" }
,
		{ "trigger": "CCMenuItemImage_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCMenuItemImage_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCMenuItemImage_rect()", "contents": "rect()" }
,
		{ "trigger": "CCMenuItemImage_description()", "contents": "description()" }
,
		{ "trigger": "CCMenuItemImage_registerScriptTapHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptTapHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCMenuItemImage_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCMenuItemImage_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCMenuItemImage_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCMenuItemImage_isEnabled()", "contents": "isEnabled()" }
,
		{ "trigger": "CCMenuItemImage_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCMenuItemImage_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCMenuItemImage_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCMenuItemImage_retain()", "contents": "retain()" }
,
		{ "trigger": "CCMenuItemImage_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCMenuItemImage_release()", "contents": "release()" }
,
		{ "trigger": "CCMenuItemImage_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCMenuItemImage_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCMenuItemImage_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCMenuItemImage_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCMenuItemImage_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCMenuItemImage_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCMenuItemImage_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCMenuItemImage_setColor(ccColor3B_color,)", "contents": "setColor(${1:ccColor3B_color})" }
,
		{ "trigger": "CCMenuItemImage_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCMenuItemImage_unregisterScriptTapHandler()", "contents": "unregisterScriptTapHandler()" }
,
		{ "trigger": "CCMenuItemImage_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCMenuItemImage_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCMenuItemImage_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCMenuItemImage_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCMenuItemImage_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCMenuItemImage_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCMenuItemImage_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCMenuItemImage_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCMenuItemImage_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCMenuItemImage_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCMenuItemImage_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCMenuItemImage_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCMenuItemImage_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCMenuItemImage_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCMenuItemImage_setSelectedImage(CCNode*_pImage,)", "contents": "setSelectedImage(${1:CCNode*_pImage})" }
,
		{ "trigger": "CCMenuItemImage_create(const_char*_normalImage,const_char*_selectedImage,const_char*_disabledImage,)", "contents": "CCMenuItemImage:create(${1:const_char*_normalImage},${2:const_char*_selectedImage},${3:const_char*_disabledImage})" }
,
		{ "trigger": "CCMenuItemImage_create()", "contents": "CCMenuItemImage:create()" }
,
		{ "trigger": "CCMenuItemImage_create(const_char*_normalImage,const_char*_selectedImage,)", "contents": "CCMenuItemImage:create(${1:const_char*_normalImage},${2:const_char*_selectedImage})" }
,

		{ "trigger": "CCTMXMapInfo_getMapSize()", "contents": "getMapSize()" }
,
		{ "trigger": "CCTMXMapInfo_setTileSize(CCSize_sz,)", "contents": "setTileSize(${1:CCSize_sz})" }
,
		{ "trigger": "CCTMXMapInfo_setTMXFileName(const_char_*fileName,)", "contents": "setTMXFileName(${1:const_char_*fileName})" }
,
		{ "trigger": "CCTMXMapInfo_setLayers(CCArray*_pval,)", "contents": "setLayers(${1:CCArray*_pval})" }
,
		{ "trigger": "CCTMXMapInfo_getObjectGroups()", "contents": "getObjectGroups()" }
,
		{ "trigger": "CCTMXMapInfo_getCurrentString()", "contents": "getCurrentString()" }
,
		{ "trigger": "CCTMXMapInfo_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTMXMapInfo_parseXMLFile(const_char_*xmlFilename,)", "contents": "parseXMLFile(${1:const_char_*xmlFilename})" }
,
		{ "trigger": "CCTMXMapInfo_getLayers()", "contents": "getLayers()" }
,
		{ "trigger": "CCTMXMapInfo_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTMXMapInfo_setLayerAttribs(int_val,)", "contents": "setLayerAttribs(${1:int_val})" }
,
		{ "trigger": "CCTMXMapInfo_getStoringCharacters()", "contents": "getStoringCharacters()" }
,
		{ "trigger": "CCTMXMapInfo_getTileSize()", "contents": "getTileSize()" }
,
		{ "trigger": "CCTMXMapInfo_setOrientation(int_val,)", "contents": "setOrientation(${1:int_val})" }
,
		{ "trigger": "CCTMXMapInfo_setTileProperties(CCDictionary*_tileProperties,)", "contents": "setTileProperties(${1:CCDictionary*_tileProperties})" }
,
		{ "trigger": "CCTMXMapInfo_setMapSize(CCSize_sz,)", "contents": "setMapSize(${1:CCSize_sz})" }
,
		{ "trigger": "CCTMXMapInfo_getProperties()", "contents": "getProperties()" }
,
		{ "trigger": "CCTMXMapInfo_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTMXMapInfo_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTMXMapInfo_getLayerAttribs()", "contents": "getLayerAttribs()" }
,
		{ "trigger": "CCTMXMapInfo_getTilesets()", "contents": "getTilesets()" }
,
		{ "trigger": "CCTMXMapInfo_textHandler(void_*ctx,const_char_*ch,int_len,)", "contents": "textHandler(${1:void_*ctx},${2:const_char_*ch},${3:int_len})" }
,
		{ "trigger": "CCTMXMapInfo_getTMXFileName()", "contents": "getTMXFileName()" }
,
		{ "trigger": "CCTMXMapInfo_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTMXMapInfo_getOrientation()", "contents": "getOrientation()" }
,
		{ "trigger": "CCTMXMapInfo_setParentGID(unsigned_int_val,)", "contents": "setParentGID(${1:unsigned_int_val})" }
,
		{ "trigger": "CCTMXMapInfo_getParentGID()", "contents": "getParentGID()" }
,
		{ "trigger": "CCTMXMapInfo_setProperties(CCDictionary*_pval,)", "contents": "setProperties(${1:CCDictionary*_pval})" }
,
		{ "trigger": "CCTMXMapInfo_release()", "contents": "release()" }
,
		{ "trigger": "CCTMXMapInfo_setStoringCharacters(bool_val,)", "contents": "setStoringCharacters(${1:bool_val})" }
,
		{ "trigger": "CCTMXMapInfo_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTMXMapInfo_setParentElement(int_val,)", "contents": "setParentElement(${1:int_val})" }
,
		{ "trigger": "CCTMXMapInfo_startElement(void_*ctx,const_char_*name,const_char_**atts,)", "contents": "startElement(${1:void_*ctx},${2:const_char_*name},${3:const_char_**atts})" }
,
		{ "trigger": "CCTMXMapInfo_parseXMLString(const_char_*xmlString,)", "contents": "parseXMLString(${1:const_char_*xmlString})" }
,
		{ "trigger": "CCTMXMapInfo_setCurrentString(const_char_*currentString,)", "contents": "setCurrentString(${1:const_char_*currentString})" }
,
		{ "trigger": "CCTMXMapInfo_endElement(void_*ctx,const_char_*name,)", "contents": "endElement(${1:void_*ctx},${2:const_char_*name})" }
,
		{ "trigger": "CCTMXMapInfo_getTileProperties()", "contents": "getTileProperties()" }
,
		{ "trigger": "CCTMXMapInfo_getParentElement()", "contents": "getParentElement()" }
,
		{ "trigger": "CCTMXMapInfo_setObjectGroups(CCArray*_val,)", "contents": "setObjectGroups(${1:CCArray*_val})" }
,
		{ "trigger": "CCTMXMapInfo_setTilesets(CCArray*_pval,)", "contents": "setTilesets(${1:CCArray*_pval})" }
,
		{ "trigger": "CCTMXMapInfo_formatWithTMXFile(const_char_*tmxFile,)", "contents": "CCTMXMapInfo:formatWithTMXFile(${1:const_char_*tmxFile})" }
,
		{ "trigger": "CCTMXMapInfo_formatWithXML(const_char_*tmxString,const_char*_resourcePath,)", "contents": "CCTMXMapInfo:formatWithXML(${1:const_char_*tmxString},${2:const_char*_resourcePath})" }
,

		{ "trigger": "CCEaseExponentialInOut_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseExponentialInOut_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseExponentialInOut_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseExponentialInOut_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseExponentialInOut_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseExponentialInOut_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseExponentialInOut_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseExponentialInOut_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseExponentialInOut_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseExponentialInOut_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseExponentialInOut_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseExponentialInOut_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseExponentialInOut_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseExponentialInOut_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseExponentialInOut_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseExponentialInOut_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseExponentialInOut_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseExponentialInOut_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseExponentialInOut_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseExponentialInOut_create(CCActionInterval*_pAction,)", "contents": "CCEaseExponentialInOut:create(${1:CCActionInterval*_pAction})" }
,

		{ "trigger": "CCMotionStreak_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCMotionStreak_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCMotionStreak_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCMotionStreak_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCMotionStreak_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCMotionStreak_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCMotionStreak_setColor(const_ccColor3B&_color,)", "contents": "setColor(${1:const_ccColor3B&_color})" }
,
		{ "trigger": "CCMotionStreak_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCMotionStreak_transform()", "contents": "transform()" }
,
		{ "trigger": "CCMotionStreak_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCMotionStreak_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCMotionStreak_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCMotionStreak_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCMotionStreak_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCMotionStreak_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCMotionStreak_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCMotionStreak_isStartingPositionInitialized()", "contents": "isStartingPositionInitialized()" }
,
		{ "trigger": "CCMotionStreak_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCMotionStreak_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCMotionStreak_setTexture(CCTexture2D_*texture,)", "contents": "setTexture(${1:CCTexture2D_*texture})" }
,
		{ "trigger": "CCMotionStreak_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCMotionStreak_draw()", "contents": "draw()" }
,
		{ "trigger": "CCMotionStreak_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCMotionStreak_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCMotionStreak_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCMotionStreak_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCMotionStreak_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCMotionStreak_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCMotionStreak_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCMotionStreak_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCMotionStreak_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCMotionStreak_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCMotionStreak_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCMotionStreak_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCMotionStreak_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCMotionStreak_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCMotionStreak_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCMotionStreak_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCMotionStreak_setStartingPositionInitialized(bool_bStartingPositionInitialized,)", "contents": "setStartingPositionInitialized(${1:bool_bStartingPositionInitialized})" }
,
		{ "trigger": "CCMotionStreak_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCMotionStreak_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCMotionStreak_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCMotionStreak_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCMotionStreak_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCMotionStreak_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCMotionStreak_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCMotionStreak_visit()", "contents": "visit()" }
,
		{ "trigger": "CCMotionStreak_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCMotionStreak_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCMotionStreak_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCMotionStreak_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCMotionStreak_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCMotionStreak_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCMotionStreak_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCMotionStreak_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCMotionStreak_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCMotionStreak_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCMotionStreak_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCMotionStreak_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCMotionStreak_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCMotionStreak_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCMotionStreak_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCMotionStreak_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCMotionStreak_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCMotionStreak_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCMotionStreak_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCMotionStreak_setPosition(CCPoint&_position,)", "contents": "setPosition(${1:CCPoint&_position})" }
,
		{ "trigger": "CCMotionStreak_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCMotionStreak_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCMotionStreak_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCMotionStreak_isFastMode()", "contents": "isFastMode()" }
,
		{ "trigger": "CCMotionStreak_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCMotionStreak_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCMotionStreak_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCMotionStreak_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCMotionStreak_copy()", "contents": "copy()" }
,
		{ "trigger": "CCMotionStreak_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCMotionStreak_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCMotionStreak_setFastMode(bool_bFastMode,)", "contents": "setFastMode(${1:bool_bFastMode})" }
,
		{ "trigger": "CCMotionStreak_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCMotionStreak_description()", "contents": "description()" }
,
		{ "trigger": "CCMotionStreak_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCMotionStreak_reset()", "contents": "reset()" }
,
		{ "trigger": "CCMotionStreak_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCMotionStreak_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCMotionStreak_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCMotionStreak_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCMotionStreak_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCMotionStreak_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCMotionStreak_retain()", "contents": "retain()" }
,
		{ "trigger": "CCMotionStreak_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCMotionStreak_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCMotionStreak_release()", "contents": "release()" }
,
		{ "trigger": "CCMotionStreak_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCMotionStreak_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCMotionStreak_setBlendFunc(ccBlendFunc_blendFunc,)", "contents": "setBlendFunc(${1:ccBlendFunc_blendFunc})" }
,
		{ "trigger": "CCMotionStreak_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCMotionStreak_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCMotionStreak_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCMotionStreak_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCMotionStreak_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCMotionStreak_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCMotionStreak_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCMotionStreak_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCMotionStreak_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCMotionStreak_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCMotionStreak_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCMotionStreak_tintWithColor(ccColor3B_colors,)", "contents": "tintWithColor(${1:ccColor3B_colors})" }
,
		{ "trigger": "CCMotionStreak_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCMotionStreak_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCMotionStreak_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCMotionStreak_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCMotionStreak_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCMotionStreak_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCMotionStreak_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCMotionStreak_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCMotionStreak_create(float_fade,float_minSeg,float_stroke,ccColor3B_color,const_char*_path,)", "contents": "CCMotionStreak:create(${1:float_fade},${2:float_minSeg},${3:float_stroke},${4:ccColor3B_color},${5:const_char*_path})" }
,
		{ "trigger": "CCMotionStreak_create(float_fade,float_minSeg,float_stroke,ccColor3B_color,CCTexture2D*_texture,)", "contents": "CCMotionStreak:create(${1:float_fade},${2:float_minSeg},${3:float_stroke},${4:ccColor3B_color},${5:CCTexture2D*_texture})" }
,

		{ "trigger": "CCFadeOut_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCFadeOut_retain()", "contents": "retain()" }
,
		{ "trigger": "CCFadeOut_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCFadeOut_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCFadeOut_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCFadeOut_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCFadeOut_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCFadeOut_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCFadeOut_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCFadeOut_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCFadeOut_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCFadeOut_copy()", "contents": "copy()" }
,
		{ "trigger": "CCFadeOut_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCFadeOut_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCFadeOut_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCFadeOut_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCFadeOut_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCFadeOut_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCFadeOut_release()", "contents": "release()" }
,
		{ "trigger": "CCFadeOut_create(float_d,)", "contents": "CCFadeOut:create(${1:float_d})" }
,

		{ "trigger": "CCSprite_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCSprite_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCSprite_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCSprite_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCSprite_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCSprite_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCSprite_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCSprite_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCSprite_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCSprite_transform()", "contents": "transform()" }
,
		{ "trigger": "CCSprite_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCSprite_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCSprite_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCSprite_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCSprite_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCSprite_setDirty(bool_bDirty,)", "contents": "setDirty(${1:bool_bDirty})" }
,
		{ "trigger": "CCSprite_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCSprite_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCSprite_getTextureRect()", "contents": "getTextureRect()" }
,
		{ "trigger": "CCSprite_isTextureRectRotated()", "contents": "isTextureRectRotated()" }
,
		{ "trigger": "CCSprite_setTexture(CCTexture2D_*texture,)", "contents": "setTexture(${1:CCTexture2D_*texture})" }
,
		{ "trigger": "CCSprite_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCSprite_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCSprite_draw()", "contents": "draw()" }
,
		{ "trigger": "CCSprite_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCSprite_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCSprite_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCSprite_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCSprite_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCSprite_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCSprite_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCSprite_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCSprite_setColor(ccColor3B_color3,)", "contents": "setColor(${1:ccColor3B_color3})" }
,
		{ "trigger": "CCSprite_isFrameDisplayed(CCSpriteFrame_*pFrame,)", "contents": "isFrameDisplayed(${1:CCSpriteFrame_*pFrame})" }
,
		{ "trigger": "CCSprite_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCSprite_addChild(CCNode*_pChild,int_zOrder,)", "contents": "addChild(${1:CCNode*_pChild},${2:int_zOrder})" }
,
		{ "trigger": "CCSprite_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCSprite_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCSprite_removeChild(CCNode*_pChild,bool_bCleanUp,)", "contents": "removeChild(${1:CCNode*_pChild},${2:bool_bCleanUp})" }
,
		{ "trigger": "CCSprite_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCSprite_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCSprite_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCSprite_isFlipY()", "contents": "isFlipY()" }
,
		{ "trigger": "CCSprite_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCSprite_setVertexRect(CCRect_rect,)", "contents": "setVertexRect(${1:CCRect_rect})" }
,
		{ "trigger": "CCSprite_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCSprite_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCSprite_setSkewX(float_sx,)", "contents": "setSkewX(${1:float_sx})" }
,
		{ "trigger": "CCSprite_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCSprite_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCSprite_sortAllChildren()", "contents": "sortAllChildren()" }
,
		{ "trigger": "CCSprite_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCSprite_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCSprite_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCSprite_setDisplayFrame(CCSpriteFrame_*pNewFrame,)", "contents": "setDisplayFrame(${1:CCSpriteFrame_*pNewFrame})" }
,
		{ "trigger": "CCSprite_isDirty()", "contents": "isDirty()" }
,
		{ "trigger": "CCSprite_isFlipX()", "contents": "isFlipX()" }
,
		{ "trigger": "CCSprite_setDisplayFrameWithAnimationName(const_char_*animationName,int_frameIndex,)", "contents": "setDisplayFrameWithAnimationName(${1:const_char_*animationName},${2:int_frameIndex})" }
,
		{ "trigger": "CCSprite_updateTransform()", "contents": "updateTransform()" }
,
		{ "trigger": "CCSprite_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCSprite_visit()", "contents": "visit()" }
,
		{ "trigger": "CCSprite_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCSprite_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCSprite_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCSprite_setRotation(float_rotation,)", "contents": "setRotation(${1:float_rotation})" }
,
		{ "trigger": "CCSprite_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCSprite_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCSprite_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCSprite_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCSprite_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCSprite_displayFrame()", "contents": "displayFrame()" }
,
		{ "trigger": "CCSprite_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCSprite_setScale(float_fScale,)", "contents": "setScale(${1:float_fScale})" }
,
		{ "trigger": "CCSprite_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCSprite_setBatchNode(CCSpriteBatchNode*_pBatchNode,)", "contents": "setBatchNode(${1:CCSpriteBatchNode*_pBatchNode})" }
,
		{ "trigger": "CCSprite_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCSprite_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCSprite_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCSprite_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCSprite_setVertexZ(float_fVertexZ,)", "contents": "setVertexZ(${1:float_fVertexZ})" }
,
		{ "trigger": "CCSprite_addChild(CCNode*_pChild,)", "contents": "addChild(${1:CCNode*_pChild})" }
,
		{ "trigger": "CCSprite_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCSprite_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCSprite_addChild(CCNode*_pChild,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode*_pChild},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCSprite_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCSprite_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCSprite_setTextureAtlas(CCTextureAtlas_*pobTextureAtlas,)", "contents": "setTextureAtlas(${1:CCTextureAtlas_*pobTextureAtlas})" }
,
		{ "trigger": "CCSprite_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCSprite_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCSprite_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCSprite_removeAllChildrenWithCleanup(bool_bCleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_bCleanup})" }
,
		{ "trigger": "CCSprite_getQuad()", "contents": "getQuad()" }
,
		{ "trigger": "CCSprite_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCSprite_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCSprite_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCSprite_copy()", "contents": "copy()" }
,
		{ "trigger": "CCSprite_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCSprite_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCSprite_setScaleY(float_fScaleY,)", "contents": "setScaleY(${1:float_fScaleY})" }
,
		{ "trigger": "CCSprite_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCSprite_setTextureRect(CCRect_rect,)", "contents": "setTextureRect(${1:CCRect_rect})" }
,
		{ "trigger": "CCSprite_getBatchNode()", "contents": "getBatchNode()" }
,
		{ "trigger": "CCSprite_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCSprite_description()", "contents": "description()" }
,
		{ "trigger": "CCSprite_setVisible(bool_bVisible,)", "contents": "setVisible(${1:bool_bVisible})" }
,
		{ "trigger": "CCSprite_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCSprite_setFlipX(bool_bFlipX,)", "contents": "setFlipX(${1:bool_bFlipX})" }
,
		{ "trigger": "CCSprite_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCSprite_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCSprite_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCSprite_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCSprite_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCSprite_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCSprite_getOffsetPosition()", "contents": "getOffsetPosition()" }
,
		{ "trigger": "CCSprite_setScaleX(float_fScaleX,)", "contents": "setScaleX(${1:float_fScaleX})" }
,
		{ "trigger": "CCSprite_retain()", "contents": "retain()" }
,
		{ "trigger": "CCSprite_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCSprite_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCSprite_release()", "contents": "release()" }
,
		{ "trigger": "CCSprite_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCSprite_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCSprite_setFlipY(bool_bFlipY,)", "contents": "setFlipY(${1:bool_bFlipY})" }
,
		{ "trigger": "CCSprite_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCSprite_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCSprite_setBlendFunc(ccBlendFunc_blendFunc,)", "contents": "setBlendFunc(${1:ccBlendFunc_blendFunc})" }
,
		{ "trigger": "CCSprite_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCSprite_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCSprite_getAtlasIndex()", "contents": "getAtlasIndex()" }
,
		{ "trigger": "CCSprite_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCSprite_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCSprite_setSkewY(float_sy,)", "contents": "setSkewY(${1:float_sy})" }
,
		{ "trigger": "CCSprite_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCSprite_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCSprite_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCSprite_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCSprite_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCSprite_setAtlasIndex(unsigned_int_uAtlasIndex,)", "contents": "setAtlasIndex(${1:unsigned_int_uAtlasIndex})" }
,
		{ "trigger": "CCSprite_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCSprite_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCSprite_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCSprite_getTextureAtlas()", "contents": "getTextureAtlas()" }
,
		{ "trigger": "CCSprite_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCSprite_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCSprite_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCSprite_setAnchorPoint(const_CCPoint_&_anchor,)", "contents": "setAnchorPoint(${1:const_CCPoint_&_anchor})" }
,
		{ "trigger": "CCSprite_setTextureRect(CCRect_rect,bool_rotated,CCSize_size,)", "contents": "setTextureRect(${1:CCRect_rect},${2:bool_rotated},${3:CCSize_size})" }
,
		{ "trigger": "CCSprite_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCSprite_reorderChild(CCNode*_pChild,int_zOrder,)", "contents": "reorderChild(${1:CCNode*_pChild},${2:int_zOrder})" }
,
		{ "trigger": "CCSprite_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCSprite_createWithSpriteFrameName(const_char_*pszSpriteFrameName,)", "contents": "CCSprite:createWithSpriteFrameName(${1:const_char_*pszSpriteFrameName})" }
,
		{ "trigger": "CCSprite_create(const_char_*pszFileName,CCRect_rect,)", "contents": "CCSprite:create(${1:const_char_*pszFileName},${2:CCRect_rect})" }
,
		{ "trigger": "CCSprite_createWithSpriteFrame(CCSpriteFrame_*pSpriteFrame,)", "contents": "CCSprite:createWithSpriteFrame(${1:CCSpriteFrame_*pSpriteFrame})" }
,
		{ "trigger": "CCSprite_createWithTexture(CCTexture2D_*pTexture,)", "contents": "CCSprite:createWithTexture(${1:CCTexture2D_*pTexture})" }
,
		{ "trigger": "CCSprite_create()", "contents": "CCSprite:create()" }
,
		{ "trigger": "CCSprite_createWithTexture(CCTexture2D_*pTexture,CCRect_rect,)", "contents": "CCSprite:createWithTexture(${1:CCTexture2D_*pTexture},${2:CCRect_rect})" }
,
		{ "trigger": "CCSprite_create(const_char_*pszFileName,)", "contents": "CCSprite:create(${1:const_char_*pszFileName})" }
,

		{ "trigger": "CCRotateBy_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCRotateBy_retain()", "contents": "retain()" }
,
		{ "trigger": "CCRotateBy_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCRotateBy_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCRotateBy_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCRotateBy_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCRotateBy_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCRotateBy_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCRotateBy_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCRotateBy_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCRotateBy_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCRotateBy_copy()", "contents": "copy()" }
,
		{ "trigger": "CCRotateBy_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCRotateBy_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCRotateBy_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCRotateBy_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCRotateBy_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCRotateBy_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCRotateBy_release()", "contents": "release()" }
,
		{ "trigger": "CCRotateBy_create(float_duration,float_fDeltaAngleX,float_DeltaAngleY,)", "contents": "CCRotateBy:create(${1:float_duration},${2:float_fDeltaAngleX},${3:float_DeltaAngleY})" }
,
		{ "trigger": "CCRotateBy_create(float_duration,float_fDeltaAngle,)", "contents": "CCRotateBy:create(${1:float_duration},${2:float_fDeltaAngle})" }
,

		{ "trigger": "CCCatmullRomTo_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCCatmullRomTo_getPoints()", "contents": "getPoints()" }
,
		{ "trigger": "CCCatmullRomTo_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCCatmullRomTo_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCCatmullRomTo_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCCatmullRomTo_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCCatmullRomTo_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCCatmullRomTo_retain()", "contents": "retain()" }
,
		{ "trigger": "CCCatmullRomTo_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCCatmullRomTo_copy()", "contents": "copy()" }
,
		{ "trigger": "CCCatmullRomTo_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCCatmullRomTo_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCCatmullRomTo_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCCatmullRomTo_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCCatmullRomTo_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCCatmullRomTo_setPoints(CCPointArray*_points,)", "contents": "setPoints(${1:CCPointArray*_points})" }
,
		{ "trigger": "CCCatmullRomTo_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCCatmullRomTo_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCCatmullRomTo_release()", "contents": "release()" }
,
		{ "trigger": "CCCatmullRomTo_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCCatmullRomTo_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCCatmullRomTo_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCCatmullRomTo_create(float_dt,CCPointArray*_points,)", "contents": "CCCatmullRomTo:create(${1:float_dt},${2:CCPointArray*_points})" }
,

		{ "trigger": "CCTargetedAction_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCTargetedAction_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTargetedAction_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCTargetedAction_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCTargetedAction_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCTargetedAction_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCTargetedAction_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCTargetedAction_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCTargetedAction_getForcedTarget()", "contents": "getForcedTarget()" }
,
		{ "trigger": "CCTargetedAction_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCTargetedAction_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTargetedAction_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTargetedAction_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTargetedAction_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCTargetedAction_setForcedTarget(CCNode*_target,)", "contents": "setForcedTarget(${1:CCNode*_target})" }
,
		{ "trigger": "CCTargetedAction_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTargetedAction_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTargetedAction_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTargetedAction_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCTargetedAction_release()", "contents": "release()" }
,
		{ "trigger": "CCTargetedAction_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCTargetedAction_create(CCNode*_pTarget,CCFiniteTimeAction*_pAction,)", "contents": "CCTargetedAction:create(${1:CCNode*_pTarget},${2:CCFiniteTimeAction*_pAction})" }
,

		{ "trigger": "CCEaseBounceIn_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseBounceIn_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseBounceIn_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseBounceIn_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseBounceIn_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseBounceIn_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseBounceIn_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseBounceIn_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseBounceIn_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseBounceIn_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseBounceIn_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseBounceIn_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseBounceIn_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseBounceIn_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseBounceIn_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseBounceIn_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseBounceIn_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseBounceIn_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseBounceIn_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseBounceIn_create(CCActionInterval*_pAction,)", "contents": "CCEaseBounceIn:create(${1:CCActionInterval*_pAction})" }
,

		{ "trigger": "CCParticleSpiral_setEndColor(const_ccColor4F_var,)", "contents": "setEndColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSpiral_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleSpiral_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCParticleSpiral_setRotatePerSecondVar(float_degrees,)", "contents": "setRotatePerSecondVar(${1:float_degrees})" }
,
		{ "trigger": "CCParticleSpiral_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCParticleSpiral_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCParticleSpiral_transform()", "contents": "transform()" }
,
		{ "trigger": "CCParticleSpiral_getRotatePerSecond()", "contents": "getRotatePerSecond()" }
,
		{ "trigger": "CCParticleSpiral_setTextureWithRect(CCTexture2D_*texture,const_CCRect&_rect,)", "contents": "setTextureWithRect(${1:CCTexture2D_*texture},${2:const_CCRect&_rect})" }
,
		{ "trigger": "CCParticleSpiral_getAngleVar()", "contents": "getAngleVar()" }
,
		{ "trigger": "CCParticleSpiral_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleSpiral_isAutoRemoveOnFinish()", "contents": "isAutoRemoveOnFinish()" }
,
		{ "trigger": "CCParticleSpiral_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleSpiral_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCParticleSpiral_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCParticleSpiral_setTangentialAccel(float_t,)", "contents": "setTangentialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleSpiral_getStartSpin()", "contents": "getStartSpin()" }
,
		{ "trigger": "CCParticleSpiral_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCParticleSpiral_getStartColor()", "contents": "getStartColor()" }
,
		{ "trigger": "CCParticleSpiral_setStartSpinVar(float_var,)", "contents": "setStartSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleSpiral_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCParticleSpiral_setStartRadius(float_startRadius,)", "contents": "setStartRadius(${1:float_startRadius})" }
,
		{ "trigger": "CCParticleSpiral_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCParticleSpiral_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCParticleSpiral_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCParticleSpiral_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCParticleSpiral_getPosVar()", "contents": "getPosVar()" }
,
		{ "trigger": "CCParticleSpiral_setAngleVar(float_angle,)", "contents": "setAngleVar(${1:float_angle})" }
,
		{ "trigger": "CCParticleSpiral_isFull()", "contents": "isFull()" }
,
		{ "trigger": "CCParticleSpiral_setStartRadiusVar(float_startRadiusVar,)", "contents": "setStartRadiusVar(${1:float_startRadiusVar})" }
,
		{ "trigger": "CCParticleSpiral_getStartSpinVar()", "contents": "getStartSpinVar()" }
,
		{ "trigger": "CCParticleSpiral_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCParticleSpiral_setDisplayFrame(CCSpriteFrame*_spriteFrame,)", "contents": "setDisplayFrame(${1:CCSpriteFrame*_spriteFrame})" }
,
		{ "trigger": "CCParticleSpiral_setBatchNode(CCParticleBatchNode*_node,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_node})" }
,
		{ "trigger": "CCParticleSpiral_isBlendAdditive()", "contents": "isBlendAdditive()" }
,
		{ "trigger": "CCParticleSpiral_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCParticleSpiral_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCParticleSpiral_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCParticleSpiral_getEmissionRate()", "contents": "getEmissionRate()" }
,
		{ "trigger": "CCParticleSpiral_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCParticleSpiral_setEndRadiusVar(float_endRadiusVar,)", "contents": "setEndRadiusVar(${1:float_endRadiusVar})" }
,
		{ "trigger": "CCParticleSpiral_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleSpiral_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCParticleSpiral_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCParticleSpiral_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCParticleSpiral_postStep()", "contents": "postStep()" }
,
		{ "trigger": "CCParticleSpiral_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCParticleSpiral_setBlendAdditive(bool_value,)", "contents": "setBlendAdditive(${1:bool_value})" }
,
		{ "trigger": "CCParticleSpiral_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleSpiral_setEndSpin(float_var,)", "contents": "setEndSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleSpiral_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCParticleSpiral_setBatchNode(CCParticleBatchNode*_batchNode,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_batchNode})" }
,
		{ "trigger": "CCParticleSpiral_getEndRadius()", "contents": "getEndRadius()" }
,
		{ "trigger": "CCParticleSpiral_getStartSize()", "contents": "getStartSize()" }
,
		{ "trigger": "CCParticleSpiral_getTotalParticles()", "contents": "getTotalParticles()" }
,
		{ "trigger": "CCParticleSpiral_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCParticleSpiral_getStartSizeVar()", "contents": "getStartSizeVar()" }
,
		{ "trigger": "CCParticleSpiral_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleSpiral_setGravity(const_CCPoint&_g,)", "contents": "setGravity(${1:const_CCPoint&_g})" }
,
		{ "trigger": "CCParticleSpiral_getSourcePosition()", "contents": "getSourcePosition()" }
,
		{ "trigger": "CCParticleSpiral_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleSpiral_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCParticleSpiral_getTangentialAccelVar()", "contents": "getTangentialAccelVar()" }
,
		{ "trigger": "CCParticleSpiral_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleSpiral_getEndSpinVar()", "contents": "getEndSpinVar()" }
,
		{ "trigger": "CCParticleSpiral_setAutoRemoveOnFinish(bool_var,)", "contents": "setAutoRemoveOnFinish(${1:bool_var})" }
,
		{ "trigger": "CCParticleSpiral_setPosVar(CCPoint_pos,)", "contents": "setPosVar(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleSpiral_setEmissionRate(float_rate,)", "contents": "setEmissionRate(${1:float_rate})" }
,
		{ "trigger": "CCParticleSpiral_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleSpiral_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleSpiral_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCParticleSpiral_getRadialAccelVar()", "contents": "getRadialAccelVar()" }
,
		{ "trigger": "CCParticleSpiral_getStartRadius()", "contents": "getStartRadius()" }
,
		{ "trigger": "CCParticleSpiral_getEndColorVar()", "contents": "getEndColorVar()" }
,
		{ "trigger": "CCParticleSpiral_setStartColorVar(const_ccColor4F_var,)", "contents": "setStartColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSpiral_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCParticleSpiral_initWithFile(const_char*_plistFile,)", "contents": "initWithFile(${1:const_char*_plistFile})" }
,
		{ "trigger": "CCParticleSpiral_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCParticleSpiral_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCParticleSpiral_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCParticleSpiral_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCParticleSpiral_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCParticleSpiral_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCParticleSpiral_setStartSpin(float_var,)", "contents": "setStartSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleSpiral_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCParticleSpiral_getEndSize()", "contents": "getEndSize()" }
,
		{ "trigger": "CCParticleSpiral_setSourcePosition(CCPoint_pos,)", "contents": "setSourcePosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleSpiral_initParticle(tCCParticle*_particle,)", "contents": "initParticle(${1:tCCParticle*_particle})" }
,
		{ "trigger": "CCParticleSpiral_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCParticleSpiral_updateQuadWithParticle(tCCParticle*_particle,const_CCPoint&_newPosition,)", "contents": "updateQuadWithParticle(${1:tCCParticle*_particle},${2:const_CCPoint&_newPosition})" }
,
		{ "trigger": "CCParticleSpiral_setStartColor(const_ccColor4F_var,)", "contents": "setStartColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSpiral_getEndColor()", "contents": "getEndColor()" }
,
		{ "trigger": "CCParticleSpiral_setEmitterMode(int_mode,)", "contents": "setEmitterMode(${1:int_mode})" }
,
		{ "trigger": "CCParticleSpiral_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCParticleSpiral_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCParticleSpiral_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCParticleSpiral_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCParticleSpiral_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCParticleSpiral_setStartSizeVar(float_size,)", "contents": "setStartSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleSpiral_getLife()", "contents": "getLife()" }
,
		{ "trigger": "CCParticleSpiral_setBlendFunc(ccBlendFunc_var,)", "contents": "setBlendFunc(${1:ccBlendFunc_var})" }
,
		{ "trigger": "CCParticleSpiral_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleSpiral_getAngle()", "contents": "getAngle()" }
,
		{ "trigger": "CCParticleSpiral_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCParticleSpiral_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCParticleSpiral_getEmitterMode()", "contents": "getEmitterMode()" }
,
		{ "trigger": "CCParticleSpiral_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleSpiral_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCParticleSpiral_getTangentialAccel()", "contents": "getTangentialAccel()" }
,
		{ "trigger": "CCParticleSpiral_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCParticleSpiral_visit()", "contents": "visit()" }
,
		{ "trigger": "CCParticleSpiral_setTexture(CCTexture2D*_var,)", "contents": "setTexture(${1:CCTexture2D*_var})" }
,
		{ "trigger": "CCParticleSpiral_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "CCParticleSpiral_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCParticleSpiral_setScale(float_s,)", "contents": "setScale(${1:float_s})" }
,
		{ "trigger": "CCParticleSpiral_draw()", "contents": "draw()" }
,
		{ "trigger": "CCParticleSpiral_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleSpiral_setEndSpinVar(float_var,)", "contents": "setEndSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleSpiral_setSpeed(float_speed,)", "contents": "setSpeed(${1:float_speed})" }
,
		{ "trigger": "CCParticleSpiral_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCParticleSpiral_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCParticleSpiral_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCParticleSpiral_setStartSize(float_size,)", "contents": "setStartSize(${1:float_size})" }
,
		{ "trigger": "CCParticleSpiral_getStartRadiusVar()", "contents": "getStartRadiusVar()" }
,
		{ "trigger": "CCParticleSpiral_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCParticleSpiral_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCParticleSpiral_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCParticleSpiral_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCParticleSpiral_getSpeed()", "contents": "getSpeed()" }
,
		{ "trigger": "CCParticleSpiral_setTotalParticles(unsigned_int_tp,)", "contents": "setTotalParticles(${1:unsigned_int_tp})" }
,
		{ "trigger": "CCParticleSpiral_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCParticleSpiral_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCParticleSpiral_setRotatePerSecond(float_degrees,)", "contents": "setRotatePerSecond(${1:float_degrees})" }
,
		{ "trigger": "CCParticleSpiral_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCParticleSpiral_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCParticleSpiral_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCParticleSpiral_getEndRadiusVar()", "contents": "getEndRadiusVar()" }
,
		{ "trigger": "CCParticleSpiral_getParticleCount()", "contents": "getParticleCount()" }
,
		{ "trigger": "CCParticleSpiral_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCParticleSpiral_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCParticleSpiral_getEndSizeVar()", "contents": "getEndSizeVar()" }
,
		{ "trigger": "CCParticleSpiral_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleSpiral_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCParticleSpiral_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCParticleSpiral_setTangentialAccelVar(float_t,)", "contents": "setTangentialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleSpiral_getSpeedVar()", "contents": "getSpeedVar()" }
,
		{ "trigger": "CCParticleSpiral_setSpeedVar(float_speed,)", "contents": "setSpeedVar(${1:float_speed})" }
,
		{ "trigger": "CCParticleSpiral_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCParticleSpiral_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCParticleSpiral_setEndSizeVar(float_size,)", "contents": "setEndSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleSpiral_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCParticleSpiral_getLifeVar()", "contents": "getLifeVar()" }
,
		{ "trigger": "CCParticleSpiral_setPositionType(tCCPositionType_type,)", "contents": "setPositionType(${1:tCCPositionType_type})" }
,
		{ "trigger": "CCParticleSpiral_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCParticleSpiral_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleSpiral_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCParticleSpiral_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCParticleSpiral_getBatchNode()", "contents": "getBatchNode()" }
,
		{ "trigger": "CCParticleSpiral_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleSpiral_initWithTotalParticles(unsigned_int_number,)", "contents": "initWithTotalParticles(${1:unsigned_int_number})" }
,
		{ "trigger": "CCParticleSpiral_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleSpiral_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCParticleSpiral_setDuration(float_d,)", "contents": "setDuration(${1:float_d})" }
,
		{ "trigger": "CCParticleSpiral_setRadialAccel(float_t,)", "contents": "setRadialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleSpiral_resetSystem()", "contents": "resetSystem()" }
,
		{ "trigger": "CCParticleSpiral_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleSpiral_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCParticleSpiral_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCParticleSpiral_copy()", "contents": "copy()" }
,
		{ "trigger": "CCParticleSpiral_setEndSize(float_size,)", "contents": "setEndSize(${1:float_size})" }
,
		{ "trigger": "CCParticleSpiral_getRadialAccel()", "contents": "getRadialAccel()" }
,
		{ "trigger": "CCParticleSpiral_isActive()", "contents": "isActive()" }
,
		{ "trigger": "CCParticleSpiral_description()", "contents": "description()" }
,
		{ "trigger": "CCParticleSpiral_getGravity()", "contents": "getGravity()" }
,
		{ "trigger": "CCParticleSpiral_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleSpiral_setRadialAccelVar(float_t,)", "contents": "setRadialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleSpiral_setLifeVar(float_lifeVar,)", "contents": "setLifeVar(${1:float_lifeVar})" }
,
		{ "trigger": "CCParticleSpiral_setEndRadius(float_endRadius,)", "contents": "setEndRadius(${1:float_endRadius})" }
,
		{ "trigger": "CCParticleSpiral_getEndSpin()", "contents": "getEndSpin()" }
,
		{ "trigger": "CCParticleSpiral_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCParticleSpiral_setAngle(float_angle,)", "contents": "setAngle(${1:float_angle})" }
,
		{ "trigger": "CCParticleSpiral_retain()", "contents": "retain()" }
,
		{ "trigger": "CCParticleSpiral_release()", "contents": "release()" }
,
		{ "trigger": "CCParticleSpiral_getRotatePerSecondVar()", "contents": "getRotatePerSecondVar()" }
,
		{ "trigger": "CCParticleSpiral_addParticle()", "contents": "addParticle()" }
,
		{ "trigger": "CCParticleSpiral_setLife(float_life,)", "contents": "setLife(${1:float_life})" }
,
		{ "trigger": "CCParticleSpiral_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleSpiral_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCParticleSpiral_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCParticleSpiral_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCParticleSpiral_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCParticleSpiral_setTexture(CCTexture2D*_texture,)", "contents": "setTexture(${1:CCTexture2D*_texture})" }
,
		{ "trigger": "CCParticleSpiral_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCParticleSpiral_setEndColorVar(const_ccColor4F_var,)", "contents": "setEndColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSpiral_getStartColorVar()", "contents": "getStartColorVar()" }
,
		{ "trigger": "CCParticleSpiral_stopSystem()", "contents": "stopSystem()" }
,
		{ "trigger": "CCParticleSpiral_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCParticleSpiral_create()", "contents": "CCParticleSpiral:create()" }
,

		{ "trigger": "CCTransitionJumpZoom_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCTransitionJumpZoom_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionJumpZoom_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCTransitionJumpZoom_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCTransitionJumpZoom_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCTransitionJumpZoom_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCTransitionJumpZoom_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionJumpZoom_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCTransitionJumpZoom_transform()", "contents": "transform()" }
,
		{ "trigger": "CCTransitionJumpZoom_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTransitionJumpZoom_visit()", "contents": "visit()" }
,
		{ "trigger": "CCTransitionJumpZoom_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionJumpZoom_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionJumpZoom_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCTransitionJumpZoom_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTransitionJumpZoom_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCTransitionJumpZoom_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCTransitionJumpZoom_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCTransitionJumpZoom_draw()", "contents": "draw()" }
,
		{ "trigger": "CCTransitionJumpZoom_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCTransitionJumpZoom_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCTransitionJumpZoom_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCTransitionJumpZoom_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCTransitionJumpZoom_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionJumpZoom_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCTransitionJumpZoom_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTransitionJumpZoom_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCTransitionJumpZoom_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCTransitionJumpZoom_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCTransitionJumpZoom_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCTransitionJumpZoom_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCTransitionJumpZoom_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCTransitionJumpZoom_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCTransitionJumpZoom_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCTransitionJumpZoom_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCTransitionJumpZoom_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCTransitionJumpZoom_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCTransitionJumpZoom_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCTransitionJumpZoom_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCTransitionJumpZoom_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTransitionJumpZoom_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionJumpZoom_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCTransitionJumpZoom_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCTransitionJumpZoom_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCTransitionJumpZoom_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCTransitionJumpZoom_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionJumpZoom_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCTransitionJumpZoom_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCTransitionJumpZoom_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCTransitionJumpZoom_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCTransitionJumpZoom_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCTransitionJumpZoom_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCTransitionJumpZoom_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionJumpZoom_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionJumpZoom_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTransitionJumpZoom_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCTransitionJumpZoom_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionJumpZoom_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCTransitionJumpZoom_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionJumpZoom_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCTransitionJumpZoom_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionJumpZoom_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionJumpZoom_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionJumpZoom_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCTransitionJumpZoom_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTransitionJumpZoom_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionJumpZoom_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCTransitionJumpZoom_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionJumpZoom_description()", "contents": "description()" }
,
		{ "trigger": "CCTransitionJumpZoom_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionJumpZoom_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionJumpZoom_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCTransitionJumpZoom_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionJumpZoom_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCTransitionJumpZoom_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCTransitionJumpZoom_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTransitionJumpZoom_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCTransitionJumpZoom_release()", "contents": "release()" }
,
		{ "trigger": "CCTransitionJumpZoom_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCTransitionJumpZoom_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCTransitionJumpZoom_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCTransitionJumpZoom_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCTransitionJumpZoom_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionJumpZoom_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionJumpZoom_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCTransitionJumpZoom_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCTransitionJumpZoom_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCTransitionJumpZoom_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTransitionJumpZoom_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCTransitionJumpZoom_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTransitionJumpZoom_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTransitionJumpZoom_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCTransitionJumpZoom_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCTransitionJumpZoom_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCTransitionJumpZoom_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCTransitionJumpZoom_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCTransitionJumpZoom_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCTransitionJumpZoom_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCTransitionJumpZoom_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCTransitionJumpZoom_create(float_t,CCScene*_scene,)", "contents": "CCTransitionJumpZoom:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCWaves_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCWaves_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCWaves_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCWaves_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCWaves_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCWaves_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCWaves_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCWaves_retain()", "contents": "retain()" }
,
		{ "trigger": "CCWaves_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCWaves_release()", "contents": "release()" }
,
		{ "trigger": "CCWaves_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCWaves_originalVertex(const_CCPoint&_pos,)", "contents": "originalVertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCWaves_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCWaves_setVertex(const_CCPoint&_pos,const_ccVertex3F&_vertex,)", "contents": "setVertex(${1:const_CCPoint&_pos},${2:const_ccVertex3F&_vertex})" }
,
		{ "trigger": "CCWaves_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCWaves_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCWaves_vertex(const_CCPoint&_pos,)", "contents": "vertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCWaves_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCWaves_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCWaves_setAmplitudeRate(float_fAmplitudeRate,)", "contents": "setAmplitudeRate(${1:float_fAmplitudeRate})" }
,
		{ "trigger": "CCWaves_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCWaves_getAmplitude()", "contents": "getAmplitude()" }
,
		{ "trigger": "CCWaves_copy()", "contents": "copy()" }
,
		{ "trigger": "CCWaves_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCWaves_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCWaves_setAmplitude(float_fAmplitude,)", "contents": "setAmplitude(${1:float_fAmplitude})" }
,
		{ "trigger": "CCWaves_create(float_duration,CCSize_gridSize,unsigned_int_waves,float_amplitude,bool_horizontal,bool_vertical,)", "contents": "CCWaves:create(${1:float_duration},${2:CCSize_gridSize},${3:unsigned_int_waves},${4:float_amplitude},${5:bool_horizontal},${6:bool_vertical})" }
,

		{ "trigger": "CCFlipX_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCFlipX_copy()", "contents": "copy()" }
,
		{ "trigger": "CCFlipX_retain()", "contents": "retain()" }
,
		{ "trigger": "CCFlipX_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCFlipX_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCFlipX_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCFlipX_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCFlipX_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCFlipX_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCFlipX_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCFlipX_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCFlipX_release()", "contents": "release()" }
,
		{ "trigger": "CCFlipX_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCFlipX_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCFlipX_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCFlipX_create(bool_x,)", "contents": "CCFlipX:create(${1:bool_x})" }
,

		{ "trigger": "CCFlipY_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCFlipY_copy()", "contents": "copy()" }
,
		{ "trigger": "CCFlipY_retain()", "contents": "retain()" }
,
		{ "trigger": "CCFlipY_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCFlipY_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCFlipY_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCFlipY_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCFlipY_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCFlipY_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCFlipY_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCFlipY_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCFlipY_release()", "contents": "release()" }
,
		{ "trigger": "CCFlipY_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCFlipY_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCFlipY_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCFlipY_create(bool_y,)", "contents": "CCFlipY:create(${1:bool_y})" }
,

		{ "trigger": "CCLabelTTF_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCLabelTTF_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCLabelTTF_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCLabelTTF_setAtlasIndex(unsigned_int_uAtlasIndex,)", "contents": "setAtlasIndex(${1:unsigned_int_uAtlasIndex})" }
,
		{ "trigger": "CCLabelTTF_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCLabelTTF_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCLabelTTF_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCLabelTTF_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCLabelTTF_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCLabelTTF_transform()", "contents": "transform()" }
,
		{ "trigger": "CCLabelTTF_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCLabelTTF_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCLabelTTF_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCLabelTTF_setDirty(bool_bDirty,)", "contents": "setDirty(${1:bool_bDirty})" }
,
		{ "trigger": "CCLabelTTF_setDimensions(CCSize_&dim,)", "contents": "setDimensions(${1:CCSize_&dim})" }
,
		{ "trigger": "CCLabelTTF_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCLabelTTF_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCLabelTTF_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCLabelTTF_getTextureRect()", "contents": "getTextureRect()" }
,
		{ "trigger": "CCLabelTTF_isTextureRectRotated()", "contents": "isTextureRectRotated()" }
,
		{ "trigger": "CCLabelTTF_setTexture(CCTexture2D_*texture,)", "contents": "setTexture(${1:CCTexture2D_*texture})" }
,
		{ "trigger": "CCLabelTTF_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCLabelTTF_draw()", "contents": "draw()" }
,
		{ "trigger": "CCLabelTTF_getAtlasIndex()", "contents": "getAtlasIndex()" }
,
		{ "trigger": "CCLabelTTF_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCLabelTTF_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCLabelTTF_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCLabelTTF_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCLabelTTF_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCLabelTTF_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCLabelTTF_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCLabelTTF_setColor(ccColor3B_color3,)", "contents": "setColor(${1:ccColor3B_color3})" }
,
		{ "trigger": "CCLabelTTF_isFrameDisplayed(CCSpriteFrame_*pFrame,)", "contents": "isFrameDisplayed(${1:CCSpriteFrame_*pFrame})" }
,
		{ "trigger": "CCLabelTTF_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCLabelTTF_addChild(CCNode*_pChild,int_zOrder,)", "contents": "addChild(${1:CCNode*_pChild},${2:int_zOrder})" }
,
		{ "trigger": "CCLabelTTF_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCLabelTTF_reorderChild(CCNode*_pChild,int_zOrder,)", "contents": "reorderChild(${1:CCNode*_pChild},${2:int_zOrder})" }
,
		{ "trigger": "CCLabelTTF_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCLabelTTF_removeChild(CCNode*_pChild,bool_bCleanUp,)", "contents": "removeChild(${1:CCNode*_pChild},${2:bool_bCleanUp})" }
,
		{ "trigger": "CCLabelTTF_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCLabelTTF_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCLabelTTF_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCLabelTTF_setHorizontalAlignment(CCTextAlignment_alignment,)", "contents": "setHorizontalAlignment(${1:CCTextAlignment_alignment})" }
,
		{ "trigger": "CCLabelTTF_isFlipY()", "contents": "isFlipY()" }
,
		{ "trigger": "CCLabelTTF_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCLabelTTF_setVertexRect(CCRect_rect,)", "contents": "setVertexRect(${1:CCRect_rect})" }
,
		{ "trigger": "CCLabelTTF_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCLabelTTF_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCLabelTTF_setSkewX(float_sx,)", "contents": "setSkewX(${1:float_sx})" }
,
		{ "trigger": "CCLabelTTF_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCLabelTTF_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCLabelTTF_sortAllChildren()", "contents": "sortAllChildren()" }
,
		{ "trigger": "CCLabelTTF_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCLabelTTF_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCLabelTTF_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCLabelTTF_getOffsetPosition()", "contents": "getOffsetPosition()" }
,
		{ "trigger": "CCLabelTTF_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCLabelTTF_setFontSize(float_fontSize,)", "contents": "setFontSize(${1:float_fontSize})" }
,
		{ "trigger": "CCLabelTTF_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCLabelTTF_isDirty()", "contents": "isDirty()" }
,
		{ "trigger": "CCLabelTTF_isFlipX()", "contents": "isFlipX()" }
,
		{ "trigger": "CCLabelTTF_setDisplayFrameWithAnimationName(const_char_*animationName,int_frameIndex,)", "contents": "setDisplayFrameWithAnimationName(${1:const_char_*animationName},${2:int_frameIndex})" }
,
		{ "trigger": "CCLabelTTF_updateTransform()", "contents": "updateTransform()" }
,
		{ "trigger": "CCLabelTTF_visit()", "contents": "visit()" }
,
		{ "trigger": "CCLabelTTF_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCLabelTTF_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCLabelTTF_setFontName(const_char_*fontName,)", "contents": "setFontName(${1:const_char_*fontName})" }
,
		{ "trigger": "CCLabelTTF_setRotation(float_rotation,)", "contents": "setRotation(${1:float_rotation})" }
,
		{ "trigger": "CCLabelTTF_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCLabelTTF_setSkewY(float_sy,)", "contents": "setSkewY(${1:float_sy})" }
,
		{ "trigger": "CCLabelTTF_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCLabelTTF_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCLabelTTF_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCLabelTTF_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCLabelTTF_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCLabelTTF_getString()", "contents": "getString()" }
,
		{ "trigger": "CCLabelTTF_setScale(float_fScale,)", "contents": "setScale(${1:float_fScale})" }
,
		{ "trigger": "CCLabelTTF_setFlipX(bool_bFlipX,)", "contents": "setFlipX(${1:bool_bFlipX})" }
,
		{ "trigger": "CCLabelTTF_setBatchNode(CCSpriteBatchNode*_pBatchNode,)", "contents": "setBatchNode(${1:CCSpriteBatchNode*_pBatchNode})" }
,
		{ "trigger": "CCLabelTTF_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCLabelTTF_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCLabelTTF_getDimensions()", "contents": "getDimensions()" }
,
		{ "trigger": "CCLabelTTF_removeAllChildrenWithCleanup(bool_bCleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_bCleanup})" }
,
		{ "trigger": "CCLabelTTF_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCLabelTTF_getFontSize()", "contents": "getFontSize()" }
,
		{ "trigger": "CCLabelTTF_setVertexZ(float_fVertexZ,)", "contents": "setVertexZ(${1:float_fVertexZ})" }
,
		{ "trigger": "CCLabelTTF_addChild(CCNode*_pChild,)", "contents": "addChild(${1:CCNode*_pChild})" }
,
		{ "trigger": "CCLabelTTF_getVerticalAlignment()", "contents": "getVerticalAlignment()" }
,
		{ "trigger": "CCLabelTTF_addChild(CCNode*_pChild,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode*_pChild},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCLabelTTF_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCLabelTTF_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCLabelTTF_setTextureAtlas(CCTextureAtlas_*pobTextureAtlas,)", "contents": "setTextureAtlas(${1:CCTextureAtlas_*pobTextureAtlas})" }
,
		{ "trigger": "CCLabelTTF_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCLabelTTF_displayFrame()", "contents": "displayFrame()" }
,
		{ "trigger": "CCLabelTTF_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCLabelTTF_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCLabelTTF_setDisplayFrame(CCSpriteFrame_*pNewFrame,)", "contents": "setDisplayFrame(${1:CCSpriteFrame_*pNewFrame})" }
,
		{ "trigger": "CCLabelTTF_getQuad()", "contents": "getQuad()" }
,
		{ "trigger": "CCLabelTTF_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCLabelTTF_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCLabelTTF_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCLabelTTF_copy()", "contents": "copy()" }
,
		{ "trigger": "CCLabelTTF_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCLabelTTF_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCLabelTTF_setBlendFunc(ccBlendFunc_blendFunc,)", "contents": "setBlendFunc(${1:ccBlendFunc_blendFunc})" }
,
		{ "trigger": "CCLabelTTF_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCLabelTTF_setScaleY(float_fScaleY,)", "contents": "setScaleY(${1:float_fScaleY})" }
,
		{ "trigger": "CCLabelTTF_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCLabelTTF_setTextureRect(CCRect_rect,)", "contents": "setTextureRect(${1:CCRect_rect})" }
,
		{ "trigger": "CCLabelTTF_getBatchNode()", "contents": "getBatchNode()" }
,
		{ "trigger": "CCLabelTTF_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCLabelTTF_description()", "contents": "description()" }
,
		{ "trigger": "CCLabelTTF_getHorizontalAlignment()", "contents": "getHorizontalAlignment()" }
,
		{ "trigger": "CCLabelTTF_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCLabelTTF_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCLabelTTF_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCLabelTTF_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCLabelTTF_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCLabelTTF_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCLabelTTF_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCLabelTTF_setString(const_char_*label,)", "contents": "setString(${1:const_char_*label})" }
,
		{ "trigger": "CCLabelTTF_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCLabelTTF_setScaleX(float_fScaleX,)", "contents": "setScaleX(${1:float_fScaleX})" }
,
		{ "trigger": "CCLabelTTF_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCLabelTTF_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCLabelTTF_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCLabelTTF_release()", "contents": "release()" }
,
		{ "trigger": "CCLabelTTF_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCLabelTTF_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCLabelTTF_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCLabelTTF_setTextureRect(CCRect_rect,bool_rotated,CCSize_size,)", "contents": "setTextureRect(${1:CCRect_rect},${2:bool_rotated},${3:CCSize_size})" }
,
		{ "trigger": "CCLabelTTF_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCLabelTTF_setVisible(bool_bVisible,)", "contents": "setVisible(${1:bool_bVisible})" }
,
		{ "trigger": "CCLabelTTF_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCLabelTTF_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCLabelTTF_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCLabelTTF_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCLabelTTF_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCLabelTTF_setVerticalAlignment(CCVerticalTextAlignment_verticalAlignment,)", "contents": "setVerticalAlignment(${1:CCVerticalTextAlignment_verticalAlignment})" }
,
		{ "trigger": "CCLabelTTF_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCLabelTTF_retain()", "contents": "retain()" }
,
		{ "trigger": "CCLabelTTF_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCLabelTTF_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCLabelTTF_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCLabelTTF_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCLabelTTF_setAnchorPoint(const_CCPoint_&_anchor,)", "contents": "setAnchorPoint(${1:const_CCPoint_&_anchor})" }
,
		{ "trigger": "CCLabelTTF_getFontName()", "contents": "getFontName()" }
,
		{ "trigger": "CCLabelTTF_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCLabelTTF_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCLabelTTF_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCLabelTTF_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCLabelTTF_getTextureAtlas()", "contents": "getTextureAtlas()" }
,
		{ "trigger": "CCLabelTTF_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCLabelTTF_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCLabelTTF_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCLabelTTF_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCLabelTTF_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCLabelTTF_setFlipY(bool_bFlipY,)", "contents": "setFlipY(${1:bool_bFlipY})" }
,
		{ "trigger": "CCLabelTTF_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCLabelTTF_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCLabelTTF_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCLabelTTF_create(const_char_*str,const_char_*fontName,float_fontSize,const_CCSize&_dimensions,CCTextAlignment_hAlignment,CCVerticalTextAlignment_vAlignment,)", "contents": "CCLabelTTF:create(${1:const_char_*str},${2:const_char_*fontName},${3:float_fontSize},${4:const_CCSize&_dimensions},${5:CCTextAlignment_hAlignment},${6:CCVerticalTextAlignment_vAlignment})" }
,
		{ "trigger": "CCLabelTTF_create(const_char_*str,const_char_*fontName,float_fontSize,)", "contents": "CCLabelTTF:create(${1:const_char_*str},${2:const_char_*fontName},${3:float_fontSize})" }
,
		{ "trigger": "CCLabelTTF_create()", "contents": "CCLabelTTF:create()" }
,
		{ "trigger": "CCLabelTTF_create(const_char_*str,const_char_*fontName,float_fontSize,const_CCSize&_dimensions,CCTextAlignment_hAlignment,)", "contents": "CCLabelTTF:create(${1:const_char_*str},${2:const_char_*fontName},${3:float_fontSize},${4:const_CCSize&_dimensions},${5:CCTextAlignment_hAlignment})" }
,


		{ "trigger": "CCDictionary_objectForKey(const_std::string&_key,)", "contents": "objectForKey(${1:const_std::string&_key})" }
,
		{ "trigger": "CCDictionary_removeAllObjects()", "contents": "removeAllObjects()" }
,
		{ "trigger": "CCDictionary_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCDictionary_allKeysForObject(CCObject*_object,)", "contents": "allKeysForObject(${1:CCObject*_object})" }
,
		{ "trigger": "CCDictionary_setObject(CCObject*_pObject,const_std::string&_key,)", "contents": "setObject(${1:CCObject*_pObject},${2:const_std::string&_key})" }
,
		{ "trigger": "CCDictionary_valueForKey(const_std::string&_key,)", "contents": "valueForKey(${1:const_std::string&_key})" }
,
		{ "trigger": "CCDictionary_allKeys()", "contents": "allKeys()" }
,
		{ "trigger": "CCDictionary_removeObjectForKey(const_std::string&_key,)", "contents": "removeObjectForKey(${1:const_std::string&_key})" }
,
		{ "trigger": "CCDictionary_copy()", "contents": "copy()" }
,
		{ "trigger": "CCDictionary_retain()", "contents": "retain()" }
,
		{ "trigger": "CCDictionary_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCDictionary_release()", "contents": "release()" }
,
		{ "trigger": "CCDictionary_removeObjectsForKeys(CCArray*_pKeyArray,)", "contents": "removeObjectsForKeys(${1:CCArray*_pKeyArray})" }
,
		{ "trigger": "CCDictionary_valueForKey(int_key,)", "contents": "valueForKey(${1:int_key})" }
,
		{ "trigger": "CCDictionary_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCDictionary_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCDictionary_setObject(CCObject*_pObject,int_key,)", "contents": "setObject(${1:CCObject*_pObject},${2:int_key})" }
,
		{ "trigger": "CCDictionary_objectForKey(int_key,)", "contents": "objectForKey(${1:int_key})" }
,
		{ "trigger": "CCDictionary_count()", "contents": "count()" }
,
		{ "trigger": "CCDictionary_removeObjectForKey(int_key,)", "contents": "removeObjectForKey(${1:int_key})" }
,
		{ "trigger": "CCDictionary_createWithDictionary(CCDictionary*_srcDict,)", "contents": "CCDictionary:createWithDictionary(${1:CCDictionary*_srcDict})" }
,
		{ "trigger": "CCDictionary_createWithContentsOfFile(const_char_*pFileName,)", "contents": "CCDictionary:createWithContentsOfFile(${1:const_char_*pFileName})" }
,
		{ "trigger": "CCDictionary_create()", "contents": "CCDictionary:create()" }
,

		{ "trigger": "CCFlipX3D_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCFlipX3D_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCFlipX3D_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCFlipX3D_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCFlipX3D_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCFlipX3D_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCFlipX3D_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCFlipX3D_retain()", "contents": "retain()" }
,
		{ "trigger": "CCFlipX3D_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCFlipX3D_release()", "contents": "release()" }
,
		{ "trigger": "CCFlipX3D_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCFlipX3D_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCFlipX3D_originalVertex(const_CCPoint&_pos,)", "contents": "originalVertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCFlipX3D_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCFlipX3D_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCFlipX3D_vertex(const_CCPoint&_pos,)", "contents": "vertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCFlipX3D_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCFlipX3D_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCFlipX3D_setVertex(const_CCPoint&_pos,const_ccVertex3F&_vertex,)", "contents": "setVertex(${1:const_CCPoint&_pos},${2:const_ccVertex3F&_vertex})" }
,
		{ "trigger": "CCFlipX3D_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCFlipX3D_copy()", "contents": "copy()" }
,
		{ "trigger": "CCFlipX3D_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCFlipX3D_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCFlipX3D_create(float_duration,)", "contents": "CCFlipX3D:create(${1:float_duration})" }
,

		{ "trigger": "CCTintBy_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCTintBy_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTintBy_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCTintBy_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTintBy_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCTintBy_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCTintBy_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCTintBy_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCTintBy_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCTintBy_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCTintBy_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTintBy_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTintBy_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCTintBy_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCTintBy_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTintBy_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTintBy_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTintBy_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCTintBy_release()", "contents": "release()" }
,
		{ "trigger": "CCTintBy_create(float_duration,GLshort_deltaRed,GLshort_deltaGreen,GLshort_deltaBlue,)", "contents": "CCTintBy:create(${1:float_duration},${2:GLshort_deltaRed},${3:GLshort_deltaGreen},${4:GLshort_deltaBlue})" }
,

		{ "trigger": "CCEaseRateAction_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseRateAction_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseRateAction_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseRateAction_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseRateAction_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseRateAction_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseRateAction_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseRateAction_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseRateAction_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseRateAction_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseRateAction_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseRateAction_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseRateAction_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseRateAction_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseRateAction_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseRateAction_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseRateAction_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseRateAction_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseRateAction_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseRateAction_create(CCActionInterval*_pAction,float_fRate,)", "contents": "CCEaseRateAction:create(${1:CCActionInterval*_pAction},${2:float_fRate})" }
,

		{ "trigger": "CCFadeOutDownTiles_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCFadeOutDownTiles_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCFadeOutDownTiles_tile(CCPoint_pos,)", "contents": "tile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCFadeOutDownTiles_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCFadeOutDownTiles_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCFadeOutDownTiles_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCFadeOutDownTiles_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCFadeOutDownTiles_retain()", "contents": "retain()" }
,
		{ "trigger": "CCFadeOutDownTiles_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCFadeOutDownTiles_release()", "contents": "release()" }
,
		{ "trigger": "CCFadeOutDownTiles_setTile(CCPoint_pos,ccQuad3_coords,)", "contents": "setTile(${1:CCPoint_pos},${2:ccQuad3_coords})" }
,
		{ "trigger": "CCFadeOutDownTiles_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCFadeOutDownTiles_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCFadeOutDownTiles_originalTile(CCPoint_pos,)", "contents": "originalTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCFadeOutDownTiles_turnOnTile(CCPoint_pos,)", "contents": "turnOnTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCFadeOutDownTiles_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCFadeOutDownTiles_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCFadeOutDownTiles_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCFadeOutDownTiles_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCFadeOutDownTiles_copy()", "contents": "copy()" }
,
		{ "trigger": "CCFadeOutDownTiles_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCFadeOutDownTiles_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCFadeOutDownTiles_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCFadeOutDownTiles_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCFadeOutDownTiles_transformTile(CCPoint_pos,float_distance,)", "contents": "transformTile(${1:CCPoint_pos},${2:float_distance})" }
,
		{ "trigger": "CCFadeOutDownTiles_turnOffTile(CCPoint_pos,)", "contents": "turnOffTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCFadeOutDownTiles_create(float_duration,CCSize_gridSize,)", "contents": "CCFadeOutDownTiles:create(${1:float_duration},${2:CCSize_gridSize})" }
,

		{ "trigger": "CCTransitionScene_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCTransitionScene_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionScene_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCTransitionScene_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCTransitionScene_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCTransitionScene_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCTransitionScene_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionScene_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCTransitionScene_transform()", "contents": "transform()" }
,
		{ "trigger": "CCTransitionScene_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTransitionScene_visit()", "contents": "visit()" }
,
		{ "trigger": "CCTransitionScene_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionScene_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionScene_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCTransitionScene_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTransitionScene_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCTransitionScene_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCTransitionScene_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCTransitionScene_draw()", "contents": "draw()" }
,
		{ "trigger": "CCTransitionScene_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCTransitionScene_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCTransitionScene_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCTransitionScene_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCTransitionScene_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionScene_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCTransitionScene_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTransitionScene_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCTransitionScene_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCTransitionScene_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCTransitionScene_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCTransitionScene_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCTransitionScene_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCTransitionScene_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCTransitionScene_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCTransitionScene_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCTransitionScene_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCTransitionScene_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCTransitionScene_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCTransitionScene_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCTransitionScene_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTransitionScene_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionScene_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCTransitionScene_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCTransitionScene_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCTransitionScene_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCTransitionScene_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionScene_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCTransitionScene_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCTransitionScene_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCTransitionScene_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCTransitionScene_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCTransitionScene_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCTransitionScene_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionScene_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionScene_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTransitionScene_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCTransitionScene_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionScene_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCTransitionScene_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionScene_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCTransitionScene_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionScene_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionScene_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionScene_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCTransitionScene_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTransitionScene_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionScene_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCTransitionScene_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionScene_description()", "contents": "description()" }
,
		{ "trigger": "CCTransitionScene_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionScene_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionScene_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCTransitionScene_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionScene_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCTransitionScene_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCTransitionScene_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTransitionScene_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCTransitionScene_release()", "contents": "release()" }
,
		{ "trigger": "CCTransitionScene_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCTransitionScene_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCTransitionScene_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCTransitionScene_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCTransitionScene_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionScene_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionScene_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCTransitionScene_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCTransitionScene_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCTransitionScene_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTransitionScene_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCTransitionScene_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTransitionScene_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTransitionScene_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCTransitionScene_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCTransitionScene_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCTransitionScene_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCTransitionScene_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCTransitionScene_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCTransitionScene_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCTransitionScene_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCTransitionScene_create(float_t,CCScene*_scene,)", "contents": "CCTransitionScene:create(${1:float_t},${2:CCScene*_scene})" }
,


		{ "trigger": "CCSplitCols_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCSplitCols_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCSplitCols_tile(CCPoint_pos,)", "contents": "tile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCSplitCols_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCSplitCols_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCSplitCols_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCSplitCols_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCSplitCols_retain()", "contents": "retain()" }
,
		{ "trigger": "CCSplitCols_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCSplitCols_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCSplitCols_setTile(CCPoint_pos,ccQuad3_coords,)", "contents": "setTile(${1:CCPoint_pos},${2:ccQuad3_coords})" }
,
		{ "trigger": "CCSplitCols_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCSplitCols_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCSplitCols_originalTile(CCPoint_pos,)", "contents": "originalTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCSplitCols_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCSplitCols_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCSplitCols_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCSplitCols_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCSplitCols_copy()", "contents": "copy()" }
,
		{ "trigger": "CCSplitCols_release()", "contents": "release()" }
,
		{ "trigger": "CCSplitCols_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCSplitCols_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCSplitCols_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCSplitCols_create(float_duration,unsigned_int_nCols,)", "contents": "CCSplitCols:create(${1:float_duration},${2:unsigned_int_nCols})" }
,

		{ "trigger": "CCParallaxNode_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCParallaxNode_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParallaxNode_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCParallaxNode_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCParallaxNode_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCParallaxNode_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCParallaxNode_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParallaxNode_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCParallaxNode_transform()", "contents": "transform()" }
,
		{ "trigger": "CCParallaxNode_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCParallaxNode_visit()", "contents": "visit()" }
,
		{ "trigger": "CCParallaxNode_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParallaxNode_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParallaxNode_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCParallaxNode_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCParallaxNode_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCParallaxNode_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCParallaxNode_addChild(CCNode_*_child,unsigned_int_z,CCPoint_parallaxRatio,CCPoint_positionOffset,)", "contents": "addChild(${1:CCNode_*_child},${2:unsigned_int_z},${3:CCPoint_parallaxRatio},${4:CCPoint_positionOffset})" }
,
		{ "trigger": "CCParallaxNode_draw()", "contents": "draw()" }
,
		{ "trigger": "CCParallaxNode_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCParallaxNode_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCParallaxNode_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCParallaxNode_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCParallaxNode_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCParallaxNode_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCParallaxNode_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCParallaxNode_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCParallaxNode_addChild(CCNode_*_child,unsigned_int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:unsigned_int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCParallaxNode_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCParallaxNode_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCParallaxNode_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParallaxNode_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCParallaxNode_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCParallaxNode_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCParallaxNode_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCParallaxNode_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCParallaxNode_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCParallaxNode_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCParallaxNode_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCParallaxNode_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCParallaxNode_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCParallaxNode_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParallaxNode_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCParallaxNode_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCParallaxNode_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCParallaxNode_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCParallaxNode_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParallaxNode_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCParallaxNode_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCParallaxNode_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCParallaxNode_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCParallaxNode_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCParallaxNode_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCParallaxNode_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParallaxNode_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParallaxNode_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCParallaxNode_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCParallaxNode_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCParallaxNode_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCParallaxNode_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParallaxNode_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCParallaxNode_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParallaxNode_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCParallaxNode_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCParallaxNode_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCParallaxNode_copy()", "contents": "copy()" }
,
		{ "trigger": "CCParallaxNode_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParallaxNode_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCParallaxNode_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParallaxNode_description()", "contents": "description()" }
,
		{ "trigger": "CCParallaxNode_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCParallaxNode_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParallaxNode_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCParallaxNode_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParallaxNode_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCParallaxNode_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCParallaxNode_retain()", "contents": "retain()" }
,
		{ "trigger": "CCParallaxNode_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCParallaxNode_release()", "contents": "release()" }
,
		{ "trigger": "CCParallaxNode_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCParallaxNode_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCParallaxNode_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCParallaxNode_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCParallaxNode_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCParallaxNode_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParallaxNode_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCParallaxNode_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCParallaxNode_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCParallaxNode_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCParallaxNode_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCParallaxNode_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCParallaxNode_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCParallaxNode_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParallaxNode_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCParallaxNode_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCParallaxNode_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCParallaxNode_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCParallaxNode_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCParallaxNode_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCParallaxNode_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCParallaxNode_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCParallaxNode_create()", "contents": "CCParallaxNode:create()" }
,



		{ "trigger": "CCTransitionFade_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCTransitionFade_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionFade_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCTransitionFade_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCTransitionFade_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCTransitionFade_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCTransitionFade_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionFade_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCTransitionFade_transform()", "contents": "transform()" }
,
		{ "trigger": "CCTransitionFade_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTransitionFade_visit()", "contents": "visit()" }
,
		{ "trigger": "CCTransitionFade_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionFade_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionFade_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCTransitionFade_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTransitionFade_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCTransitionFade_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCTransitionFade_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCTransitionFade_draw()", "contents": "draw()" }
,
		{ "trigger": "CCTransitionFade_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCTransitionFade_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCTransitionFade_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCTransitionFade_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCTransitionFade_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionFade_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCTransitionFade_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTransitionFade_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCTransitionFade_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCTransitionFade_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCTransitionFade_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCTransitionFade_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCTransitionFade_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCTransitionFade_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCTransitionFade_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCTransitionFade_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCTransitionFade_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCTransitionFade_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCTransitionFade_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCTransitionFade_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCTransitionFade_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTransitionFade_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionFade_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCTransitionFade_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCTransitionFade_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCTransitionFade_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCTransitionFade_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionFade_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCTransitionFade_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCTransitionFade_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCTransitionFade_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCTransitionFade_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCTransitionFade_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCTransitionFade_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionFade_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionFade_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTransitionFade_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCTransitionFade_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionFade_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCTransitionFade_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionFade_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCTransitionFade_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionFade_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionFade_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionFade_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCTransitionFade_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTransitionFade_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionFade_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCTransitionFade_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionFade_description()", "contents": "description()" }
,
		{ "trigger": "CCTransitionFade_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionFade_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionFade_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCTransitionFade_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionFade_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCTransitionFade_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCTransitionFade_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTransitionFade_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCTransitionFade_release()", "contents": "release()" }
,
		{ "trigger": "CCTransitionFade_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCTransitionFade_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCTransitionFade_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCTransitionFade_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCTransitionFade_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionFade_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionFade_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCTransitionFade_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCTransitionFade_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCTransitionFade_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTransitionFade_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCTransitionFade_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTransitionFade_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTransitionFade_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCTransitionFade_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCTransitionFade_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCTransitionFade_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCTransitionFade_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCTransitionFade_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCTransitionFade_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCTransitionFade_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCTransitionFade_create(float_duration,CCScene*_scene,ccColor3B_color_=_ccBLACK,)", "contents": "CCTransitionFade:create(${1:float_duration},${2:CCScene*_scene},${3:ccColor3B_color_=_ccBLACK})" }
,

		{ "trigger": "CCJumpTiles3D_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCJumpTiles3D_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCJumpTiles3D_tile(CCPoint_pos,)", "contents": "tile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCJumpTiles3D_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCJumpTiles3D_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCJumpTiles3D_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCJumpTiles3D_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCJumpTiles3D_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCJumpTiles3D_retain()", "contents": "retain()" }
,
		{ "trigger": "CCJumpTiles3D_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCJumpTiles3D_release()", "contents": "release()" }
,
		{ "trigger": "CCJumpTiles3D_setTile(CCPoint_pos,ccQuad3_coords,)", "contents": "setTile(${1:CCPoint_pos},${2:ccQuad3_coords})" }
,
		{ "trigger": "CCJumpTiles3D_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCJumpTiles3D_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCJumpTiles3D_originalTile(CCPoint_pos,)", "contents": "originalTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCJumpTiles3D_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCJumpTiles3D_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCJumpTiles3D_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCJumpTiles3D_setAmplitudeRate(float_fAmplitudeRate,)", "contents": "setAmplitudeRate(${1:float_fAmplitudeRate})" }
,
		{ "trigger": "CCJumpTiles3D_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCJumpTiles3D_getAmplitude()", "contents": "getAmplitude()" }
,
		{ "trigger": "CCJumpTiles3D_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCJumpTiles3D_copy()", "contents": "copy()" }
,
		{ "trigger": "CCJumpTiles3D_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCJumpTiles3D_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCJumpTiles3D_setAmplitude(float_fAmplitude,)", "contents": "setAmplitude(${1:float_fAmplitude})" }
,
		{ "trigger": "CCJumpTiles3D_create(float_duration,CCSize_gridSize,unsigned_int_numberOfJumps,float_amplitude,)", "contents": "CCJumpTiles3D:create(${1:float_duration},${2:CCSize_gridSize},${3:unsigned_int_numberOfJumps},${4:float_amplitude})" }
,

		{ "trigger": "CCTextureAtlas_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCTextureAtlas_insertQuadFromIndex(unsigned_int_fromIndex,unsigned_int_newIndex,)", "contents": "insertQuadFromIndex(${1:unsigned_int_fromIndex},${2:unsigned_int_newIndex})" }
,
		{ "trigger": "CCTextureAtlas_moveQuadsFromIndex(unsigned_int_index,unsigned_int_newIndex,)", "contents": "moveQuadsFromIndex(${1:unsigned_int_index},${2:unsigned_int_newIndex})" }
,
		{ "trigger": "CCTextureAtlas_removeQuadAtIndex(unsigned_int_index,)", "contents": "removeQuadAtIndex(${1:unsigned_int_index})" }
,
		{ "trigger": "CCTextureAtlas_setTexture(CCTexture2D*_val,)", "contents": "setTexture(${1:CCTexture2D*_val})" }
,
		{ "trigger": "CCTextureAtlas_drawNumberOfQuads(unsigned_int_n,)", "contents": "drawNumberOfQuads(${1:unsigned_int_n})" }
,
		{ "trigger": "CCTextureAtlas_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTextureAtlas_updateQuad(ccV3F_C4B_T2F_Quad*_quad,unsigned_int_index,)", "contents": "updateQuad(${1:ccV3F_C4B_T2F_Quad*_quad},${2:unsigned_int_index})" }
,
		{ "trigger": "CCTextureAtlas_increaseTotalQuadsWith(unsigned_int_amount,)", "contents": "increaseTotalQuadsWith(${1:unsigned_int_amount})" }
,
		{ "trigger": "CCTextureAtlas_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTextureAtlas_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTextureAtlas_release()", "contents": "release()" }
,
		{ "trigger": "CCTextureAtlas_moveQuadsFromIndex(unsigned_int_oldIndex,unsigned_int_amount,unsigned_int_newIndex,)", "contents": "moveQuadsFromIndex(${1:unsigned_int_oldIndex},${2:unsigned_int_amount},${3:unsigned_int_newIndex})" }
,
		{ "trigger": "CCTextureAtlas_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTextureAtlas_getCapacity()", "contents": "getCapacity()" }
,
		{ "trigger": "CCTextureAtlas_getTotalQuads()", "contents": "getTotalQuads()" }
,
		{ "trigger": "CCTextureAtlas_setQuads(ccV3F_C4B_T2F_Quad*_val,)", "contents": "setQuads(${1:ccV3F_C4B_T2F_Quad*_val})" }
,
		{ "trigger": "CCTextureAtlas_getQuads()", "contents": "getQuads()" }
,
		{ "trigger": "CCTextureAtlas_removeAllQuads()", "contents": "removeAllQuads()" }
,
		{ "trigger": "CCTextureAtlas_insertQuad(ccV3F_C4B_T2F_Quad*_quad,unsigned_int_index,)", "contents": "insertQuad(${1:ccV3F_C4B_T2F_Quad*_quad},${2:unsigned_int_index})" }
,
		{ "trigger": "CCTextureAtlas_drawNumberOfQuads(unsigned_int_n,unsigned_int_start,)", "contents": "drawNumberOfQuads(${1:unsigned_int_n},${2:unsigned_int_start})" }
,
		{ "trigger": "CCTextureAtlas_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTextureAtlas_resizeCapacity(unsigned_int_n,)", "contents": "resizeCapacity(${1:unsigned_int_n})" }
,
		{ "trigger": "CCTextureAtlas_drawQuads()", "contents": "drawQuads()" }
,
		{ "trigger": "CCTextureAtlas_fillWithEmptyQuadsFromIndex(unsigned_int_index,unsigned_int_amount,)", "contents": "fillWithEmptyQuadsFromIndex(${1:unsigned_int_index},${2:unsigned_int_amount})" }
,
		{ "trigger": "CCTextureAtlas_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTextureAtlas_createWithTexture(CCTexture2D_*texture,unsigned_int_capacity,)", "contents": "CCTextureAtlas:createWithTexture(${1:CCTexture2D_*texture},${2:unsigned_int_capacity})" }
,
		{ "trigger": "CCTextureAtlas_create(const_char*_file_,unsigned_int_capacity,)", "contents": "CCTextureAtlas:create(${1:const_char*_file_},${2:unsigned_int_capacity})" }
,

		{ "trigger": "CCParticleGalaxy_setEndColor(const_ccColor4F_var,)", "contents": "setEndColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleGalaxy_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleGalaxy_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCParticleGalaxy_setRotatePerSecondVar(float_degrees,)", "contents": "setRotatePerSecondVar(${1:float_degrees})" }
,
		{ "trigger": "CCParticleGalaxy_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCParticleGalaxy_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCParticleGalaxy_transform()", "contents": "transform()" }
,
		{ "trigger": "CCParticleGalaxy_getRotatePerSecond()", "contents": "getRotatePerSecond()" }
,
		{ "trigger": "CCParticleGalaxy_setTextureWithRect(CCTexture2D_*texture,const_CCRect&_rect,)", "contents": "setTextureWithRect(${1:CCTexture2D_*texture},${2:const_CCRect&_rect})" }
,
		{ "trigger": "CCParticleGalaxy_getAngleVar()", "contents": "getAngleVar()" }
,
		{ "trigger": "CCParticleGalaxy_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleGalaxy_isAutoRemoveOnFinish()", "contents": "isAutoRemoveOnFinish()" }
,
		{ "trigger": "CCParticleGalaxy_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleGalaxy_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCParticleGalaxy_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCParticleGalaxy_setTangentialAccel(float_t,)", "contents": "setTangentialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleGalaxy_getStartSpin()", "contents": "getStartSpin()" }
,
		{ "trigger": "CCParticleGalaxy_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCParticleGalaxy_getStartColor()", "contents": "getStartColor()" }
,
		{ "trigger": "CCParticleGalaxy_setStartSpinVar(float_var,)", "contents": "setStartSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleGalaxy_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCParticleGalaxy_setStartRadius(float_startRadius,)", "contents": "setStartRadius(${1:float_startRadius})" }
,
		{ "trigger": "CCParticleGalaxy_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCParticleGalaxy_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCParticleGalaxy_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCParticleGalaxy_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCParticleGalaxy_getPosVar()", "contents": "getPosVar()" }
,
		{ "trigger": "CCParticleGalaxy_setAngleVar(float_angle,)", "contents": "setAngleVar(${1:float_angle})" }
,
		{ "trigger": "CCParticleGalaxy_isFull()", "contents": "isFull()" }
,
		{ "trigger": "CCParticleGalaxy_setStartRadiusVar(float_startRadiusVar,)", "contents": "setStartRadiusVar(${1:float_startRadiusVar})" }
,
		{ "trigger": "CCParticleGalaxy_getStartSpinVar()", "contents": "getStartSpinVar()" }
,
		{ "trigger": "CCParticleGalaxy_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCParticleGalaxy_setDisplayFrame(CCSpriteFrame*_spriteFrame,)", "contents": "setDisplayFrame(${1:CCSpriteFrame*_spriteFrame})" }
,
		{ "trigger": "CCParticleGalaxy_setBatchNode(CCParticleBatchNode*_node,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_node})" }
,
		{ "trigger": "CCParticleGalaxy_isBlendAdditive()", "contents": "isBlendAdditive()" }
,
		{ "trigger": "CCParticleGalaxy_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCParticleGalaxy_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCParticleGalaxy_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCParticleGalaxy_getEmissionRate()", "contents": "getEmissionRate()" }
,
		{ "trigger": "CCParticleGalaxy_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCParticleGalaxy_setEndRadiusVar(float_endRadiusVar,)", "contents": "setEndRadiusVar(${1:float_endRadiusVar})" }
,
		{ "trigger": "CCParticleGalaxy_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleGalaxy_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCParticleGalaxy_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCParticleGalaxy_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCParticleGalaxy_postStep()", "contents": "postStep()" }
,
		{ "trigger": "CCParticleGalaxy_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCParticleGalaxy_setBlendAdditive(bool_value,)", "contents": "setBlendAdditive(${1:bool_value})" }
,
		{ "trigger": "CCParticleGalaxy_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleGalaxy_setEndSpin(float_var,)", "contents": "setEndSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleGalaxy_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCParticleGalaxy_setBatchNode(CCParticleBatchNode*_batchNode,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_batchNode})" }
,
		{ "trigger": "CCParticleGalaxy_getEndRadius()", "contents": "getEndRadius()" }
,
		{ "trigger": "CCParticleGalaxy_getStartSize()", "contents": "getStartSize()" }
,
		{ "trigger": "CCParticleGalaxy_getTotalParticles()", "contents": "getTotalParticles()" }
,
		{ "trigger": "CCParticleGalaxy_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCParticleGalaxy_getStartSizeVar()", "contents": "getStartSizeVar()" }
,
		{ "trigger": "CCParticleGalaxy_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleGalaxy_setGravity(const_CCPoint&_g,)", "contents": "setGravity(${1:const_CCPoint&_g})" }
,
		{ "trigger": "CCParticleGalaxy_getSourcePosition()", "contents": "getSourcePosition()" }
,
		{ "trigger": "CCParticleGalaxy_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleGalaxy_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCParticleGalaxy_getTangentialAccelVar()", "contents": "getTangentialAccelVar()" }
,
		{ "trigger": "CCParticleGalaxy_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleGalaxy_getEndSpinVar()", "contents": "getEndSpinVar()" }
,
		{ "trigger": "CCParticleGalaxy_setAutoRemoveOnFinish(bool_var,)", "contents": "setAutoRemoveOnFinish(${1:bool_var})" }
,
		{ "trigger": "CCParticleGalaxy_setPosVar(CCPoint_pos,)", "contents": "setPosVar(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleGalaxy_setEmissionRate(float_rate,)", "contents": "setEmissionRate(${1:float_rate})" }
,
		{ "trigger": "CCParticleGalaxy_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleGalaxy_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleGalaxy_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCParticleGalaxy_getRadialAccelVar()", "contents": "getRadialAccelVar()" }
,
		{ "trigger": "CCParticleGalaxy_getStartRadius()", "contents": "getStartRadius()" }
,
		{ "trigger": "CCParticleGalaxy_getEndColorVar()", "contents": "getEndColorVar()" }
,
		{ "trigger": "CCParticleGalaxy_setStartColorVar(const_ccColor4F_var,)", "contents": "setStartColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleGalaxy_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCParticleGalaxy_initWithFile(const_char*_plistFile,)", "contents": "initWithFile(${1:const_char*_plistFile})" }
,
		{ "trigger": "CCParticleGalaxy_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCParticleGalaxy_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCParticleGalaxy_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCParticleGalaxy_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCParticleGalaxy_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCParticleGalaxy_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCParticleGalaxy_setStartSpin(float_var,)", "contents": "setStartSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleGalaxy_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCParticleGalaxy_getEndSize()", "contents": "getEndSize()" }
,
		{ "trigger": "CCParticleGalaxy_setSourcePosition(CCPoint_pos,)", "contents": "setSourcePosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleGalaxy_initParticle(tCCParticle*_particle,)", "contents": "initParticle(${1:tCCParticle*_particle})" }
,
		{ "trigger": "CCParticleGalaxy_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCParticleGalaxy_updateQuadWithParticle(tCCParticle*_particle,const_CCPoint&_newPosition,)", "contents": "updateQuadWithParticle(${1:tCCParticle*_particle},${2:const_CCPoint&_newPosition})" }
,
		{ "trigger": "CCParticleGalaxy_setStartColor(const_ccColor4F_var,)", "contents": "setStartColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleGalaxy_getEndColor()", "contents": "getEndColor()" }
,
		{ "trigger": "CCParticleGalaxy_setEmitterMode(int_mode,)", "contents": "setEmitterMode(${1:int_mode})" }
,
		{ "trigger": "CCParticleGalaxy_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCParticleGalaxy_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCParticleGalaxy_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCParticleGalaxy_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCParticleGalaxy_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCParticleGalaxy_setStartSizeVar(float_size,)", "contents": "setStartSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleGalaxy_getLife()", "contents": "getLife()" }
,
		{ "trigger": "CCParticleGalaxy_setBlendFunc(ccBlendFunc_var,)", "contents": "setBlendFunc(${1:ccBlendFunc_var})" }
,
		{ "trigger": "CCParticleGalaxy_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleGalaxy_getAngle()", "contents": "getAngle()" }
,
		{ "trigger": "CCParticleGalaxy_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCParticleGalaxy_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCParticleGalaxy_getEmitterMode()", "contents": "getEmitterMode()" }
,
		{ "trigger": "CCParticleGalaxy_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleGalaxy_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCParticleGalaxy_getTangentialAccel()", "contents": "getTangentialAccel()" }
,
		{ "trigger": "CCParticleGalaxy_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCParticleGalaxy_visit()", "contents": "visit()" }
,
		{ "trigger": "CCParticleGalaxy_setTexture(CCTexture2D*_var,)", "contents": "setTexture(${1:CCTexture2D*_var})" }
,
		{ "trigger": "CCParticleGalaxy_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "CCParticleGalaxy_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCParticleGalaxy_setScale(float_s,)", "contents": "setScale(${1:float_s})" }
,
		{ "trigger": "CCParticleGalaxy_draw()", "contents": "draw()" }
,
		{ "trigger": "CCParticleGalaxy_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleGalaxy_setEndSpinVar(float_var,)", "contents": "setEndSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleGalaxy_setSpeed(float_speed,)", "contents": "setSpeed(${1:float_speed})" }
,
		{ "trigger": "CCParticleGalaxy_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCParticleGalaxy_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCParticleGalaxy_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCParticleGalaxy_setStartSize(float_size,)", "contents": "setStartSize(${1:float_size})" }
,
		{ "trigger": "CCParticleGalaxy_getStartRadiusVar()", "contents": "getStartRadiusVar()" }
,
		{ "trigger": "CCParticleGalaxy_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCParticleGalaxy_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCParticleGalaxy_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCParticleGalaxy_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCParticleGalaxy_getSpeed()", "contents": "getSpeed()" }
,
		{ "trigger": "CCParticleGalaxy_setTotalParticles(unsigned_int_tp,)", "contents": "setTotalParticles(${1:unsigned_int_tp})" }
,
		{ "trigger": "CCParticleGalaxy_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCParticleGalaxy_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCParticleGalaxy_setRotatePerSecond(float_degrees,)", "contents": "setRotatePerSecond(${1:float_degrees})" }
,
		{ "trigger": "CCParticleGalaxy_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCParticleGalaxy_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCParticleGalaxy_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCParticleGalaxy_getEndRadiusVar()", "contents": "getEndRadiusVar()" }
,
		{ "trigger": "CCParticleGalaxy_getParticleCount()", "contents": "getParticleCount()" }
,
		{ "trigger": "CCParticleGalaxy_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCParticleGalaxy_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCParticleGalaxy_getEndSizeVar()", "contents": "getEndSizeVar()" }
,
		{ "trigger": "CCParticleGalaxy_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleGalaxy_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCParticleGalaxy_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCParticleGalaxy_setTangentialAccelVar(float_t,)", "contents": "setTangentialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleGalaxy_getSpeedVar()", "contents": "getSpeedVar()" }
,
		{ "trigger": "CCParticleGalaxy_setSpeedVar(float_speed,)", "contents": "setSpeedVar(${1:float_speed})" }
,
		{ "trigger": "CCParticleGalaxy_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCParticleGalaxy_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCParticleGalaxy_setEndSizeVar(float_size,)", "contents": "setEndSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleGalaxy_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCParticleGalaxy_getLifeVar()", "contents": "getLifeVar()" }
,
		{ "trigger": "CCParticleGalaxy_setPositionType(tCCPositionType_type,)", "contents": "setPositionType(${1:tCCPositionType_type})" }
,
		{ "trigger": "CCParticleGalaxy_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCParticleGalaxy_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleGalaxy_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCParticleGalaxy_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCParticleGalaxy_getBatchNode()", "contents": "getBatchNode()" }
,
		{ "trigger": "CCParticleGalaxy_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleGalaxy_initWithTotalParticles(unsigned_int_number,)", "contents": "initWithTotalParticles(${1:unsigned_int_number})" }
,
		{ "trigger": "CCParticleGalaxy_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleGalaxy_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCParticleGalaxy_setDuration(float_d,)", "contents": "setDuration(${1:float_d})" }
,
		{ "trigger": "CCParticleGalaxy_setRadialAccel(float_t,)", "contents": "setRadialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleGalaxy_resetSystem()", "contents": "resetSystem()" }
,
		{ "trigger": "CCParticleGalaxy_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleGalaxy_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCParticleGalaxy_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCParticleGalaxy_copy()", "contents": "copy()" }
,
		{ "trigger": "CCParticleGalaxy_setEndSize(float_size,)", "contents": "setEndSize(${1:float_size})" }
,
		{ "trigger": "CCParticleGalaxy_getRadialAccel()", "contents": "getRadialAccel()" }
,
		{ "trigger": "CCParticleGalaxy_isActive()", "contents": "isActive()" }
,
		{ "trigger": "CCParticleGalaxy_description()", "contents": "description()" }
,
		{ "trigger": "CCParticleGalaxy_getGravity()", "contents": "getGravity()" }
,
		{ "trigger": "CCParticleGalaxy_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleGalaxy_setRadialAccelVar(float_t,)", "contents": "setRadialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleGalaxy_setLifeVar(float_lifeVar,)", "contents": "setLifeVar(${1:float_lifeVar})" }
,
		{ "trigger": "CCParticleGalaxy_setEndRadius(float_endRadius,)", "contents": "setEndRadius(${1:float_endRadius})" }
,
		{ "trigger": "CCParticleGalaxy_getEndSpin()", "contents": "getEndSpin()" }
,
		{ "trigger": "CCParticleGalaxy_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCParticleGalaxy_setAngle(float_angle,)", "contents": "setAngle(${1:float_angle})" }
,
		{ "trigger": "CCParticleGalaxy_retain()", "contents": "retain()" }
,
		{ "trigger": "CCParticleGalaxy_release()", "contents": "release()" }
,
		{ "trigger": "CCParticleGalaxy_getRotatePerSecondVar()", "contents": "getRotatePerSecondVar()" }
,
		{ "trigger": "CCParticleGalaxy_addParticle()", "contents": "addParticle()" }
,
		{ "trigger": "CCParticleGalaxy_setLife(float_life,)", "contents": "setLife(${1:float_life})" }
,
		{ "trigger": "CCParticleGalaxy_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleGalaxy_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCParticleGalaxy_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCParticleGalaxy_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCParticleGalaxy_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCParticleGalaxy_setTexture(CCTexture2D*_texture,)", "contents": "setTexture(${1:CCTexture2D*_texture})" }
,
		{ "trigger": "CCParticleGalaxy_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCParticleGalaxy_setEndColorVar(const_ccColor4F_var,)", "contents": "setEndColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleGalaxy_getStartColorVar()", "contents": "getStartColorVar()" }
,
		{ "trigger": "CCParticleGalaxy_stopSystem()", "contents": "stopSystem()" }
,
		{ "trigger": "CCParticleGalaxy_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCParticleGalaxy_create()", "contents": "CCParticleGalaxy:create()" }
,

		{ "trigger": "CCFadeIn_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCFadeIn_retain()", "contents": "retain()" }
,
		{ "trigger": "CCFadeIn_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCFadeIn_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCFadeIn_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCFadeIn_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCFadeIn_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCFadeIn_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCFadeIn_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCFadeIn_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCFadeIn_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCFadeIn_copy()", "contents": "copy()" }
,
		{ "trigger": "CCFadeIn_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCFadeIn_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCFadeIn_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCFadeIn_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCFadeIn_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCFadeIn_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCFadeIn_release()", "contents": "release()" }
,
		{ "trigger": "CCFadeIn_create(float_d,)", "contents": "CCFadeIn:create(${1:float_d})" }
,

		{ "trigger": "CCTransitionCrossFade_create(float_t,CCScene*_scene,)", "contents": "CCTransitionCrossFade:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCTransitionProgressVertical_create(float_t,CCScene*_scene,)", "contents": "CCTransitionProgressVertical:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCFollow_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCFollow_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCFollow_retain()", "contents": "retain()" }
,
		{ "trigger": "CCFollow_isBoundarySet()", "contents": "isBoundarySet()" }
,
		{ "trigger": "CCFollow_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCFollow_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCFollow_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCFollow_setBoudarySet(bool_bValue,)", "contents": "setBoudarySet(${1:bool_bValue})" }
,
		{ "trigger": "CCFollow_copy()", "contents": "copy()" }
,
		{ "trigger": "CCFollow_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCFollow_release()", "contents": "release()" }
,
		{ "trigger": "CCFollow_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCFollow_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCFollow_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCFollow_create(CCNode_*pFollowedNode,)", "contents": "CCFollow:create(${1:CCNode_*pFollowedNode})" }
,
		{ "trigger": "CCFollow_create(CCNode_*pFollowedNode,CCRect_rect,)", "contents": "CCFollow:create(${1:CCNode_*pFollowedNode},${2:CCRect_rect})" }
,

		{ "trigger": "CCLayerGradient_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCLayerGradient_setKeypadEnabled(bool_bValue,)", "contents": "setKeypadEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCLayerGradient_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCLayerGradient_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCLayerGradient_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCLayerGradient_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCLayerGradient_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCLayerGradient_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCLayerGradient_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCLayerGradient_transform()", "contents": "transform()" }
,
		{ "trigger": "CCLayerGradient_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCLayerGradient_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCLayerGradient_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCLayerGradient_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCLayerGradient_changeWidthAndHeight(GLfloat_w_,GLfloat_h,)", "contents": "changeWidthAndHeight(${1:GLfloat_w_},${2:GLfloat_h})" }
,
		{ "trigger": "CCLayerGradient_setStartColor(ccColor3B_colors,)", "contents": "setStartColor(${1:ccColor3B_colors})" }
,
		{ "trigger": "CCLayerGradient_getStartOpacity()", "contents": "getStartOpacity()" }
,
		{ "trigger": "CCLayerGradient_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCLayerGradient_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCLayerGradient_isTouchEnabled()", "contents": "isTouchEnabled()" }
,
		{ "trigger": "CCLayerGradient_registerScriptKeypadHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptKeypadHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCLayerGradient_draw()", "contents": "draw()" }
,
		{ "trigger": "CCLayerGradient_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCLayerGradient_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCLayerGradient_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCLayerGradient_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCLayerGradient_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCLayerGradient_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCLayerGradient_unregisterScriptAccelerateHandler()", "contents": "unregisterScriptAccelerateHandler()" }
,
		{ "trigger": "CCLayerGradient_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCLayerGradient_getStartColor()", "contents": "getStartColor()" }
,
		{ "trigger": "CCLayerGradient_getEndColor()", "contents": "getEndColor()" }
,
		{ "trigger": "CCLayerGradient_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCLayerGradient_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCLayerGradient_setBlendFunc(ccBlendFunc_Value,)", "contents": "setBlendFunc(${1:ccBlendFunc_Value})" }
,
		{ "trigger": "CCLayerGradient_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCLayerGradient_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCLayerGradient_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCLayerGradient_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCLayerGradient_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCLayerGradient_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCLayerGradient_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCLayerGradient_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCLayerGradient_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCLayerGradient_setColor(ccColor3B_Value,)", "contents": "setColor(${1:ccColor3B_Value})" }
,
		{ "trigger": "CCLayerGradient_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCLayerGradient_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCLayerGradient_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCLayerGradient_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCLayerGradient_unregisterScriptTouchHandler()", "contents": "unregisterScriptTouchHandler()" }
,
		{ "trigger": "CCLayerGradient_visit()", "contents": "visit()" }
,
		{ "trigger": "CCLayerGradient_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCLayerGradient_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCLayerGradient_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCLayerGradient_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCLayerGradient_isKeypadEnabled()", "contents": "isKeypadEnabled()" }
,
		{ "trigger": "CCLayerGradient_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCLayerGradient_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCLayerGradient_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCLayerGradient_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCLayerGradient_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCLayerGradient_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCLayerGradient_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCLayerGradient_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCLayerGradient_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCLayerGradient_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCLayerGradient_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCLayerGradient_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCLayerGradient_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCLayerGradient_setAccelerometerEnabled(bool_bValue,)", "contents": "setAccelerometerEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCLayerGradient_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCLayerGradient_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCLayerGradient_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCLayerGradient_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCLayerGradient_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCLayerGradient_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCLayerGradient_isCompressedInterpolation()", "contents": "isCompressedInterpolation()" }
,
		{ "trigger": "CCLayerGradient_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCLayerGradient_setContentSize(const_CCSize_&_var,)", "contents": "setContentSize(${1:const_CCSize_&_var})" }
,
		{ "trigger": "CCLayerGradient_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCLayerGradient_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCLayerGradient_setEndColor(ccColor3B_Value,)", "contents": "setEndColor(${1:ccColor3B_Value})" }
,
		{ "trigger": "CCLayerGradient_copy()", "contents": "copy()" }
,
		{ "trigger": "CCLayerGradient_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCLayerGradient_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCLayerGradient_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCLayerGradient_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCLayerGradient_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCLayerGradient_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCLayerGradient_description()", "contents": "description()" }
,
		{ "trigger": "CCLayerGradient_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCLayerGradient_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCLayerGradient_getEndOpacity()", "contents": "getEndOpacity()" }
,
		{ "trigger": "CCLayerGradient_getVector()", "contents": "getVector()" }
,
		{ "trigger": "CCLayerGradient_setCompressedInterpolation(bool_Value,)", "contents": "setCompressedInterpolation(${1:bool_Value})" }
,
		{ "trigger": "CCLayerGradient_setStartOpacity(GLubyte_Value,)", "contents": "setStartOpacity(${1:GLubyte_Value})" }
,
		{ "trigger": "CCLayerGradient_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCLayerGradient_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCLayerGradient_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCLayerGradient_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCLayerGradient_setOpacity(GLubyte_var,)", "contents": "setOpacity(${1:GLubyte_var})" }
,
		{ "trigger": "CCLayerGradient_retain()", "contents": "retain()" }
,
		{ "trigger": "CCLayerGradient_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCLayerGradient_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCLayerGradient_release()", "contents": "release()" }
,
		{ "trigger": "CCLayerGradient_setTouchEnabled(bool_bValue,)", "contents": "setTouchEnabled(${1:bool_bValue})" }
,
		{ "trigger": "CCLayerGradient_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCLayerGradient_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCLayerGradient_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCLayerGradient_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCLayerGradient_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCLayerGradient_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCLayerGradient_changeHeight(GLfloat_h,)", "contents": "changeHeight(${1:GLfloat_h})" }
,
		{ "trigger": "CCLayerGradient_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCLayerGradient_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCLayerGradient_setEndOpacity(GLubyte_Value,)", "contents": "setEndOpacity(${1:GLubyte_Value})" }
,
		{ "trigger": "CCLayerGradient_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCLayerGradient_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCLayerGradient_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCLayerGradient_isAccelerometerEnabled()", "contents": "isAccelerometerEnabled()" }
,
		{ "trigger": "CCLayerGradient_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCLayerGradient_setVector(CCPoint_Value,)", "contents": "setVector(${1:CCPoint_Value})" }
,
		{ "trigger": "CCLayerGradient_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCLayerGradient_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCLayerGradient_registerScriptAccelerateHandler(LUA_FUNCTION_nHandler,)", "contents": "registerScriptAccelerateHandler(${1:LUA_FUNCTION_nHandler})" }
,
		{ "trigger": "CCLayerGradient_changeWidth(GLfloat_w,)", "contents": "changeWidth(${1:GLfloat_w})" }
,
		{ "trigger": "CCLayerGradient_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCLayerGradient_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCLayerGradient_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCLayerGradient_registerScriptTouchHandler(LUA_FUNCTION_nHandler,bool_bIsMultiTouches_=_false,int_nPriority_=_0,bool_bSwallowsTouches_=_false,)", "contents": "registerScriptTouchHandler(${1:LUA_FUNCTION_nHandler},${2:bool_bIsMultiTouches_=_false},${3:int_nPriority_=_0},${4:bool_bSwallowsTouches_=_false})" }
,
		{ "trigger": "CCLayerGradient_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCLayerGradient_unregisterScriptKeypadHandler()", "contents": "unregisterScriptKeypadHandler()" }
,
		{ "trigger": "CCLayerGradient_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCLayerGradient_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCLayerGradient_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCLayerGradient_create(ccColor4B_start,ccColor4B_end,CCPoint_v,)", "contents": "CCLayerGradient:create(${1:ccColor4B_start},${2:ccColor4B_end},${3:CCPoint_v})" }
,
		{ "trigger": "CCLayerGradient_create(ccColor4B_start,ccColor4B_end,)", "contents": "CCLayerGradient:create(${1:ccColor4B_start},${2:ccColor4B_end})" }
,

		{ "trigger": "CCTransitionFadeDown_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCTransitionFadeDown_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionFadeDown_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCTransitionFadeDown_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCTransitionFadeDown_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCTransitionFadeDown_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCTransitionFadeDown_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionFadeDown_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCTransitionFadeDown_transform()", "contents": "transform()" }
,
		{ "trigger": "CCTransitionFadeDown_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTransitionFadeDown_visit()", "contents": "visit()" }
,
		{ "trigger": "CCTransitionFadeDown_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionFadeDown_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionFadeDown_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCTransitionFadeDown_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTransitionFadeDown_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCTransitionFadeDown_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCTransitionFadeDown_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCTransitionFadeDown_draw()", "contents": "draw()" }
,
		{ "trigger": "CCTransitionFadeDown_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCTransitionFadeDown_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCTransitionFadeDown_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCTransitionFadeDown_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCTransitionFadeDown_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionFadeDown_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCTransitionFadeDown_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTransitionFadeDown_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCTransitionFadeDown_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCTransitionFadeDown_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCTransitionFadeDown_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCTransitionFadeDown_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCTransitionFadeDown_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCTransitionFadeDown_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCTransitionFadeDown_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCTransitionFadeDown_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCTransitionFadeDown_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCTransitionFadeDown_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCTransitionFadeDown_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCTransitionFadeDown_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCTransitionFadeDown_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTransitionFadeDown_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionFadeDown_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCTransitionFadeDown_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCTransitionFadeDown_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCTransitionFadeDown_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCTransitionFadeDown_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionFadeDown_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCTransitionFadeDown_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCTransitionFadeDown_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCTransitionFadeDown_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCTransitionFadeDown_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCTransitionFadeDown_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCTransitionFadeDown_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionFadeDown_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionFadeDown_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTransitionFadeDown_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCTransitionFadeDown_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionFadeDown_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCTransitionFadeDown_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionFadeDown_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCTransitionFadeDown_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionFadeDown_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionFadeDown_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionFadeDown_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCTransitionFadeDown_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTransitionFadeDown_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionFadeDown_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCTransitionFadeDown_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionFadeDown_description()", "contents": "description()" }
,
		{ "trigger": "CCTransitionFadeDown_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionFadeDown_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionFadeDown_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCTransitionFadeDown_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionFadeDown_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCTransitionFadeDown_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCTransitionFadeDown_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTransitionFadeDown_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCTransitionFadeDown_release()", "contents": "release()" }
,
		{ "trigger": "CCTransitionFadeDown_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCTransitionFadeDown_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCTransitionFadeDown_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCTransitionFadeDown_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCTransitionFadeDown_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionFadeDown_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionFadeDown_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCTransitionFadeDown_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCTransitionFadeDown_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCTransitionFadeDown_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTransitionFadeDown_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCTransitionFadeDown_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTransitionFadeDown_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTransitionFadeDown_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCTransitionFadeDown_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCTransitionFadeDown_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCTransitionFadeDown_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCTransitionFadeDown_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCTransitionFadeDown_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCTransitionFadeDown_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCTransitionFadeDown_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCTransitionFadeDown_create(float_t,CCScene*_scene,)", "contents": "CCTransitionFadeDown:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCMoveBy_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCMoveBy_retain()", "contents": "retain()" }
,
		{ "trigger": "CCMoveBy_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCMoveBy_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCMoveBy_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCMoveBy_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCMoveBy_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCMoveBy_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCMoveBy_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCMoveBy_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCMoveBy_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCMoveBy_copy()", "contents": "copy()" }
,
		{ "trigger": "CCMoveBy_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCMoveBy_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCMoveBy_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCMoveBy_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCMoveBy_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCMoveBy_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCMoveBy_release()", "contents": "release()" }
,
		{ "trigger": "CCMoveBy_create(float_duration,CCPoint_deltaPosition,)", "contents": "CCMoveBy:create(${1:float_duration},${2:CCPoint_deltaPosition})" }
,

		{ "trigger": "CCEaseBounceOut_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseBounceOut_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseBounceOut_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseBounceOut_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseBounceOut_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseBounceOut_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseBounceOut_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseBounceOut_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseBounceOut_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseBounceOut_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseBounceOut_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseBounceOut_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseBounceOut_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseBounceOut_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseBounceOut_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseBounceOut_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseBounceOut_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseBounceOut_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseBounceOut_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseBounceOut_create(CCActionInterval*_pAction,)", "contents": "CCEaseBounceOut:create(${1:CCActionInterval*_pAction})" }
,

		{ "trigger": "CCTransitionShrinkGrow_create(float_t,CCScene*_scene,)", "contents": "CCTransitionShrinkGrow:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCTMXLayerInfo_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTMXLayerInfo_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTMXLayerInfo_release()", "contents": "release()" }
,
		{ "trigger": "CCTMXLayerInfo_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTMXLayerInfo_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTMXLayerInfo_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTMXLayerInfo_setProperties(CCDictionary*_pval,)", "contents": "setProperties(${1:CCDictionary*_pval})" }
,
		{ "trigger": "CCTMXLayerInfo_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTMXLayerInfo_getProperties()", "contents": "getProperties()" }
,

		{ "trigger": "CCAnimationFrame_initWithSpriteFrame(CCSpriteFrame*_spriteFrame,float_delayUnits,CCDictionary*_userInfo,)", "contents": "initWithSpriteFrame(${1:CCSpriteFrame*_spriteFrame},${2:float_delayUnits},${3:CCDictionary*_userInfo})" }
,
		{ "trigger": "CCAnimationFrame_setSpriteFrame(CCSpriteFrame*_pSpFrame,)", "contents": "setSpriteFrame(${1:CCSpriteFrame*_pSpFrame})" }
,
		{ "trigger": "CCAnimationFrame_getUserInfo()", "contents": "getUserInfo()" }
,
		{ "trigger": "CCAnimationFrame_setUserInfo(CCDictionary*_pDict,)", "contents": "setUserInfo(${1:CCDictionary*_pDict})" }
,
		{ "trigger": "CCAnimationFrame_copy()", "contents": "copy()" }
,
		{ "trigger": "CCAnimationFrame_retain()", "contents": "retain()" }
,
		{ "trigger": "CCAnimationFrame_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCAnimationFrame_release()", "contents": "release()" }
,
		{ "trigger": "CCAnimationFrame_setDelayUnits(float_fDelayUnits,)", "contents": "setDelayUnits(${1:float_fDelayUnits})" }
,
		{ "trigger": "CCAnimationFrame_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCAnimationFrame_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCAnimationFrame_getSpriteFrame()", "contents": "getSpriteFrame()" }
,
		{ "trigger": "CCAnimationFrame_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCAnimationFrame_getDelayUnits()", "contents": "getDelayUnits()" }
,

		{ "trigger": "CCProgressTimer_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCProgressTimer_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCProgressTimer_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCProgressTimer_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCProgressTimer_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCProgressTimer_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCProgressTimer_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCProgressTimer_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCProgressTimer_transform()", "contents": "transform()" }
,
		{ "trigger": "CCProgressTimer_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCProgressTimer_visit()", "contents": "visit()" }
,
		{ "trigger": "CCProgressTimer_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCProgressTimer_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCProgressTimer_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCProgressTimer_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCProgressTimer_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCProgressTimer_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCProgressTimer_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCProgressTimer_draw()", "contents": "draw()" }
,
		{ "trigger": "CCProgressTimer_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCProgressTimer_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCProgressTimer_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCProgressTimer_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCProgressTimer_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCProgressTimer_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCProgressTimer_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCProgressTimer_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCProgressTimer_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCProgressTimer_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCProgressTimer_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCProgressTimer_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCProgressTimer_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCProgressTimer_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCProgressTimer_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCProgressTimer_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCProgressTimer_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCProgressTimer_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCProgressTimer_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCProgressTimer_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCProgressTimer_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCProgressTimer_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCProgressTimer_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCProgressTimer_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCProgressTimer_getSprite()", "contents": "getSprite()" }
,
		{ "trigger": "CCProgressTimer_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCProgressTimer_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCProgressTimer_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCProgressTimer_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCProgressTimer_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCProgressTimer_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCProgressTimer_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCProgressTimer_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCProgressTimer_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCProgressTimer_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCProgressTimer_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCProgressTimer_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCProgressTimer_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCProgressTimer_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCProgressTimer_getPercentage()", "contents": "getPercentage()" }
,
		{ "trigger": "CCProgressTimer_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCProgressTimer_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCProgressTimer_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCProgressTimer_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCProgressTimer_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCProgressTimer_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCProgressTimer_copy()", "contents": "copy()" }
,
		{ "trigger": "CCProgressTimer_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCProgressTimer_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCProgressTimer_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCProgressTimer_description()", "contents": "description()" }
,
		{ "trigger": "CCProgressTimer_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCProgressTimer_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCProgressTimer_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCProgressTimer_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCProgressTimer_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCProgressTimer_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCProgressTimer_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCProgressTimer_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCProgressTimer_release()", "contents": "release()" }
,
		{ "trigger": "CCProgressTimer_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCProgressTimer_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCProgressTimer_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCProgressTimer_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCProgressTimer_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCProgressTimer_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCProgressTimer_retain()", "contents": "retain()" }
,
		{ "trigger": "CCProgressTimer_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCProgressTimer_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCProgressTimer_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCProgressTimer_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCProgressTimer_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCProgressTimer_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCProgressTimer_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCProgressTimer_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCProgressTimer_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCProgressTimer_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCProgressTimer_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCProgressTimer_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCProgressTimer_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCProgressTimer_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCProgressTimer_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCProgressTimer_getType()", "contents": "getType()" }
,


		{ "trigger": "SimpleAudioEngine_preloadEffect(const_char*_pszFilePath,)", "contents": "preloadEffect(${1:const_char*_pszFilePath})" }
,
		{ "trigger": "SimpleAudioEngine_pauseBackgroundMusic()", "contents": "pauseBackgroundMusic()" }
,
		{ "trigger": "SimpleAudioEngine_preloadBackgroundMusic(const_char*_pszFilePath,)", "contents": "preloadBackgroundMusic(${1:const_char*_pszFilePath})" }
,
		{ "trigger": "SimpleAudioEngine_getEffectsVolume()", "contents": "getEffectsVolume()" }
,
		{ "trigger": "SimpleAudioEngine_playEffect(const_char*_pszFilePath,bool_bLoop_=_false,)", "contents": "playEffect(${1:const_char*_pszFilePath},${2:bool_bLoop_=_false})" }
,
		{ "trigger": "SimpleAudioEngine_unloadEffect(const_char*_pszFilePath,)", "contents": "unloadEffect(${1:const_char*_pszFilePath})" }
,
		{ "trigger": "SimpleAudioEngine_resumeBackgroundMusic()", "contents": "resumeBackgroundMusic()" }
,
		{ "trigger": "SimpleAudioEngine_setEffectsVolume(float_volume,)", "contents": "setEffectsVolume(${1:float_volume})" }
,
		{ "trigger": "SimpleAudioEngine_setBackgroundMusicVolume(float_volume,)", "contents": "setBackgroundMusicVolume(${1:float_volume})" }
,
		{ "trigger": "SimpleAudioEngine_stopBackgroundMusic(bool_bReleaseData_=_false,)", "contents": "stopBackgroundMusic(${1:bool_bReleaseData_=_false})" }
,
		{ "trigger": "SimpleAudioEngine_stopEffect(unsigned_int_nSoundId,)", "contents": "stopEffect(${1:unsigned_int_nSoundId})" }
,
		{ "trigger": "SimpleAudioEngine_willPlayBackgroundMusic()", "contents": "willPlayBackgroundMusic()" }
,
		{ "trigger": "SimpleAudioEngine_playBackgroundMusic(const_char*_pszFilePath,bool_bLoop_=_false,)", "contents": "playBackgroundMusic(${1:const_char*_pszFilePath},${2:bool_bLoop_=_false})" }
,
		{ "trigger": "SimpleAudioEngine_getBackgroundMusicVolume()", "contents": "getBackgroundMusicVolume()" }
,
		{ "trigger": "SimpleAudioEngine_rewindBackgroundMusic()", "contents": "rewindBackgroundMusic()" }
,
		{ "trigger": "SimpleAudioEngine_isBackgroundMusicPlaying()", "contents": "isBackgroundMusicPlaying()" }
,
		{ "trigger": "SimpleAudioEngine_sharedEngine()", "contents": "SimpleAudioEngine:sharedEngine()" }
,


		{ "trigger": "CCTimer_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTimer_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTimer_release()", "contents": "release()" }
,
		{ "trigger": "CCTimer_update(float_dt,)", "contents": "update(${1:float_dt})" }
,
		{ "trigger": "CCTimer_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTimer_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTimer_setInterval(float_fInterval,)", "contents": "setInterval(${1:float_fInterval})" }
,
		{ "trigger": "CCTimer_getInterval()", "contents": "getInterval()" }
,
		{ "trigger": "CCTimer_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTimer_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTimer_timerWithScriptHandler(LUA_FUNCTION_funcID,float_fSeconds,)", "contents": "CCTimer:timerWithScriptHandler(${1:LUA_FUNCTION_funcID},${2:float_fSeconds})" }
,

		{ "trigger": "CCWavesTiles3D_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCWavesTiles3D_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCWavesTiles3D_tile(CCPoint_pos,)", "contents": "tile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCWavesTiles3D_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCWavesTiles3D_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCWavesTiles3D_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCWavesTiles3D_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCWavesTiles3D_retain()", "contents": "retain()" }
,
		{ "trigger": "CCWavesTiles3D_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCWavesTiles3D_copy()", "contents": "copy()" }
,
		{ "trigger": "CCWavesTiles3D_setTile(CCPoint_pos,ccQuad3_coords,)", "contents": "setTile(${1:CCPoint_pos},${2:ccQuad3_coords})" }
,
		{ "trigger": "CCWavesTiles3D_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCWavesTiles3D_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCWavesTiles3D_originalTile(CCPoint_pos,)", "contents": "originalTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCWavesTiles3D_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCWavesTiles3D_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCWavesTiles3D_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCWavesTiles3D_setAmplitudeRate(float_fAmplitudeRate,)", "contents": "setAmplitudeRate(${1:float_fAmplitudeRate})" }
,
		{ "trigger": "CCWavesTiles3D_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCWavesTiles3D_getAmplitude()", "contents": "getAmplitude()" }
,
		{ "trigger": "CCWavesTiles3D_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCWavesTiles3D_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCWavesTiles3D_release()", "contents": "release()" }
,
		{ "trigger": "CCWavesTiles3D_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCWavesTiles3D_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCWavesTiles3D_setAmplitude(float_fAmplitude,)", "contents": "setAmplitude(${1:float_fAmplitude})" }
,
		{ "trigger": "CCWavesTiles3D_create(float_duration,CCSize_gridSize,unsigned_int_waves,float_amplitude,)", "contents": "CCWavesTiles3D:create(${1:float_duration},${2:CCSize_gridSize},${3:unsigned_int_waves},${4:float_amplitude})" }
,

		{ "trigger": "CCParticleFlower_setEndColor(const_ccColor4F_var,)", "contents": "setEndColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleFlower_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleFlower_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCParticleFlower_setRotatePerSecondVar(float_degrees,)", "contents": "setRotatePerSecondVar(${1:float_degrees})" }
,
		{ "trigger": "CCParticleFlower_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCParticleFlower_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCParticleFlower_transform()", "contents": "transform()" }
,
		{ "trigger": "CCParticleFlower_getRotatePerSecond()", "contents": "getRotatePerSecond()" }
,
		{ "trigger": "CCParticleFlower_setTextureWithRect(CCTexture2D_*texture,const_CCRect&_rect,)", "contents": "setTextureWithRect(${1:CCTexture2D_*texture},${2:const_CCRect&_rect})" }
,
		{ "trigger": "CCParticleFlower_getAngleVar()", "contents": "getAngleVar()" }
,
		{ "trigger": "CCParticleFlower_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleFlower_isAutoRemoveOnFinish()", "contents": "isAutoRemoveOnFinish()" }
,
		{ "trigger": "CCParticleFlower_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleFlower_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCParticleFlower_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCParticleFlower_setTangentialAccel(float_t,)", "contents": "setTangentialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleFlower_getStartSpin()", "contents": "getStartSpin()" }
,
		{ "trigger": "CCParticleFlower_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCParticleFlower_getStartColor()", "contents": "getStartColor()" }
,
		{ "trigger": "CCParticleFlower_setStartSpinVar(float_var,)", "contents": "setStartSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleFlower_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCParticleFlower_setStartRadius(float_startRadius,)", "contents": "setStartRadius(${1:float_startRadius})" }
,
		{ "trigger": "CCParticleFlower_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCParticleFlower_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCParticleFlower_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCParticleFlower_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCParticleFlower_getPosVar()", "contents": "getPosVar()" }
,
		{ "trigger": "CCParticleFlower_setAngleVar(float_angle,)", "contents": "setAngleVar(${1:float_angle})" }
,
		{ "trigger": "CCParticleFlower_isFull()", "contents": "isFull()" }
,
		{ "trigger": "CCParticleFlower_setStartRadiusVar(float_startRadiusVar,)", "contents": "setStartRadiusVar(${1:float_startRadiusVar})" }
,
		{ "trigger": "CCParticleFlower_getStartSpinVar()", "contents": "getStartSpinVar()" }
,
		{ "trigger": "CCParticleFlower_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCParticleFlower_setDisplayFrame(CCSpriteFrame*_spriteFrame,)", "contents": "setDisplayFrame(${1:CCSpriteFrame*_spriteFrame})" }
,
		{ "trigger": "CCParticleFlower_setBatchNode(CCParticleBatchNode*_node,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_node})" }
,
		{ "trigger": "CCParticleFlower_isBlendAdditive()", "contents": "isBlendAdditive()" }
,
		{ "trigger": "CCParticleFlower_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCParticleFlower_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCParticleFlower_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCParticleFlower_getEmissionRate()", "contents": "getEmissionRate()" }
,
		{ "trigger": "CCParticleFlower_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCParticleFlower_setEndRadiusVar(float_endRadiusVar,)", "contents": "setEndRadiusVar(${1:float_endRadiusVar})" }
,
		{ "trigger": "CCParticleFlower_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleFlower_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCParticleFlower_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCParticleFlower_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCParticleFlower_postStep()", "contents": "postStep()" }
,
		{ "trigger": "CCParticleFlower_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCParticleFlower_setBlendAdditive(bool_value,)", "contents": "setBlendAdditive(${1:bool_value})" }
,
		{ "trigger": "CCParticleFlower_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleFlower_setEndSpin(float_var,)", "contents": "setEndSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleFlower_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCParticleFlower_setBatchNode(CCParticleBatchNode*_batchNode,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_batchNode})" }
,
		{ "trigger": "CCParticleFlower_getEndRadius()", "contents": "getEndRadius()" }
,
		{ "trigger": "CCParticleFlower_getStartSize()", "contents": "getStartSize()" }
,
		{ "trigger": "CCParticleFlower_getTotalParticles()", "contents": "getTotalParticles()" }
,
		{ "trigger": "CCParticleFlower_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCParticleFlower_getStartSizeVar()", "contents": "getStartSizeVar()" }
,
		{ "trigger": "CCParticleFlower_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleFlower_setGravity(const_CCPoint&_g,)", "contents": "setGravity(${1:const_CCPoint&_g})" }
,
		{ "trigger": "CCParticleFlower_getSourcePosition()", "contents": "getSourcePosition()" }
,
		{ "trigger": "CCParticleFlower_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleFlower_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCParticleFlower_getTangentialAccelVar()", "contents": "getTangentialAccelVar()" }
,
		{ "trigger": "CCParticleFlower_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleFlower_getEndSpinVar()", "contents": "getEndSpinVar()" }
,
		{ "trigger": "CCParticleFlower_setAutoRemoveOnFinish(bool_var,)", "contents": "setAutoRemoveOnFinish(${1:bool_var})" }
,
		{ "trigger": "CCParticleFlower_setPosVar(CCPoint_pos,)", "contents": "setPosVar(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleFlower_setEmissionRate(float_rate,)", "contents": "setEmissionRate(${1:float_rate})" }
,
		{ "trigger": "CCParticleFlower_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleFlower_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleFlower_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCParticleFlower_getRadialAccelVar()", "contents": "getRadialAccelVar()" }
,
		{ "trigger": "CCParticleFlower_getStartRadius()", "contents": "getStartRadius()" }
,
		{ "trigger": "CCParticleFlower_getEndColorVar()", "contents": "getEndColorVar()" }
,
		{ "trigger": "CCParticleFlower_setStartColorVar(const_ccColor4F_var,)", "contents": "setStartColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleFlower_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCParticleFlower_initWithFile(const_char*_plistFile,)", "contents": "initWithFile(${1:const_char*_plistFile})" }
,
		{ "trigger": "CCParticleFlower_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCParticleFlower_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCParticleFlower_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCParticleFlower_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCParticleFlower_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCParticleFlower_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCParticleFlower_setStartSpin(float_var,)", "contents": "setStartSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleFlower_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCParticleFlower_getEndSize()", "contents": "getEndSize()" }
,
		{ "trigger": "CCParticleFlower_setSourcePosition(CCPoint_pos,)", "contents": "setSourcePosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleFlower_initParticle(tCCParticle*_particle,)", "contents": "initParticle(${1:tCCParticle*_particle})" }
,
		{ "trigger": "CCParticleFlower_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCParticleFlower_updateQuadWithParticle(tCCParticle*_particle,const_CCPoint&_newPosition,)", "contents": "updateQuadWithParticle(${1:tCCParticle*_particle},${2:const_CCPoint&_newPosition})" }
,
		{ "trigger": "CCParticleFlower_setStartColor(const_ccColor4F_var,)", "contents": "setStartColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleFlower_getEndColor()", "contents": "getEndColor()" }
,
		{ "trigger": "CCParticleFlower_setEmitterMode(int_mode,)", "contents": "setEmitterMode(${1:int_mode})" }
,
		{ "trigger": "CCParticleFlower_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCParticleFlower_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCParticleFlower_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCParticleFlower_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCParticleFlower_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCParticleFlower_setStartSizeVar(float_size,)", "contents": "setStartSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleFlower_getLife()", "contents": "getLife()" }
,
		{ "trigger": "CCParticleFlower_setBlendFunc(ccBlendFunc_var,)", "contents": "setBlendFunc(${1:ccBlendFunc_var})" }
,
		{ "trigger": "CCParticleFlower_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleFlower_getAngle()", "contents": "getAngle()" }
,
		{ "trigger": "CCParticleFlower_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCParticleFlower_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCParticleFlower_getEmitterMode()", "contents": "getEmitterMode()" }
,
		{ "trigger": "CCParticleFlower_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleFlower_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCParticleFlower_getTangentialAccel()", "contents": "getTangentialAccel()" }
,
		{ "trigger": "CCParticleFlower_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCParticleFlower_visit()", "contents": "visit()" }
,
		{ "trigger": "CCParticleFlower_setTexture(CCTexture2D*_var,)", "contents": "setTexture(${1:CCTexture2D*_var})" }
,
		{ "trigger": "CCParticleFlower_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "CCParticleFlower_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCParticleFlower_setScale(float_s,)", "contents": "setScale(${1:float_s})" }
,
		{ "trigger": "CCParticleFlower_draw()", "contents": "draw()" }
,
		{ "trigger": "CCParticleFlower_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleFlower_setEndSpinVar(float_var,)", "contents": "setEndSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleFlower_setSpeed(float_speed,)", "contents": "setSpeed(${1:float_speed})" }
,
		{ "trigger": "CCParticleFlower_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCParticleFlower_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCParticleFlower_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCParticleFlower_setStartSize(float_size,)", "contents": "setStartSize(${1:float_size})" }
,
		{ "trigger": "CCParticleFlower_getStartRadiusVar()", "contents": "getStartRadiusVar()" }
,
		{ "trigger": "CCParticleFlower_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCParticleFlower_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCParticleFlower_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCParticleFlower_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCParticleFlower_getSpeed()", "contents": "getSpeed()" }
,
		{ "trigger": "CCParticleFlower_setTotalParticles(unsigned_int_tp,)", "contents": "setTotalParticles(${1:unsigned_int_tp})" }
,
		{ "trigger": "CCParticleFlower_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCParticleFlower_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCParticleFlower_setRotatePerSecond(float_degrees,)", "contents": "setRotatePerSecond(${1:float_degrees})" }
,
		{ "trigger": "CCParticleFlower_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCParticleFlower_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCParticleFlower_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCParticleFlower_getEndRadiusVar()", "contents": "getEndRadiusVar()" }
,
		{ "trigger": "CCParticleFlower_getParticleCount()", "contents": "getParticleCount()" }
,
		{ "trigger": "CCParticleFlower_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCParticleFlower_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCParticleFlower_getEndSizeVar()", "contents": "getEndSizeVar()" }
,
		{ "trigger": "CCParticleFlower_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleFlower_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCParticleFlower_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCParticleFlower_setTangentialAccelVar(float_t,)", "contents": "setTangentialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleFlower_getSpeedVar()", "contents": "getSpeedVar()" }
,
		{ "trigger": "CCParticleFlower_setSpeedVar(float_speed,)", "contents": "setSpeedVar(${1:float_speed})" }
,
		{ "trigger": "CCParticleFlower_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCParticleFlower_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCParticleFlower_setEndSizeVar(float_size,)", "contents": "setEndSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleFlower_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCParticleFlower_getLifeVar()", "contents": "getLifeVar()" }
,
		{ "trigger": "CCParticleFlower_setPositionType(tCCPositionType_type,)", "contents": "setPositionType(${1:tCCPositionType_type})" }
,
		{ "trigger": "CCParticleFlower_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCParticleFlower_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleFlower_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCParticleFlower_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCParticleFlower_getBatchNode()", "contents": "getBatchNode()" }
,
		{ "trigger": "CCParticleFlower_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleFlower_initWithTotalParticles(unsigned_int_number,)", "contents": "initWithTotalParticles(${1:unsigned_int_number})" }
,
		{ "trigger": "CCParticleFlower_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleFlower_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCParticleFlower_setDuration(float_d,)", "contents": "setDuration(${1:float_d})" }
,
		{ "trigger": "CCParticleFlower_setRadialAccel(float_t,)", "contents": "setRadialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleFlower_resetSystem()", "contents": "resetSystem()" }
,
		{ "trigger": "CCParticleFlower_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleFlower_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCParticleFlower_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCParticleFlower_copy()", "contents": "copy()" }
,
		{ "trigger": "CCParticleFlower_setEndSize(float_size,)", "contents": "setEndSize(${1:float_size})" }
,
		{ "trigger": "CCParticleFlower_getRadialAccel()", "contents": "getRadialAccel()" }
,
		{ "trigger": "CCParticleFlower_isActive()", "contents": "isActive()" }
,
		{ "trigger": "CCParticleFlower_description()", "contents": "description()" }
,
		{ "trigger": "CCParticleFlower_getGravity()", "contents": "getGravity()" }
,
		{ "trigger": "CCParticleFlower_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleFlower_setRadialAccelVar(float_t,)", "contents": "setRadialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleFlower_setLifeVar(float_lifeVar,)", "contents": "setLifeVar(${1:float_lifeVar})" }
,
		{ "trigger": "CCParticleFlower_setEndRadius(float_endRadius,)", "contents": "setEndRadius(${1:float_endRadius})" }
,
		{ "trigger": "CCParticleFlower_getEndSpin()", "contents": "getEndSpin()" }
,
		{ "trigger": "CCParticleFlower_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCParticleFlower_setAngle(float_angle,)", "contents": "setAngle(${1:float_angle})" }
,
		{ "trigger": "CCParticleFlower_retain()", "contents": "retain()" }
,
		{ "trigger": "CCParticleFlower_release()", "contents": "release()" }
,
		{ "trigger": "CCParticleFlower_getRotatePerSecondVar()", "contents": "getRotatePerSecondVar()" }
,
		{ "trigger": "CCParticleFlower_addParticle()", "contents": "addParticle()" }
,
		{ "trigger": "CCParticleFlower_setLife(float_life,)", "contents": "setLife(${1:float_life})" }
,
		{ "trigger": "CCParticleFlower_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleFlower_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCParticleFlower_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCParticleFlower_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCParticleFlower_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCParticleFlower_setTexture(CCTexture2D*_texture,)", "contents": "setTexture(${1:CCTexture2D*_texture})" }
,
		{ "trigger": "CCParticleFlower_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCParticleFlower_setEndColorVar(const_ccColor4F_var,)", "contents": "setEndColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleFlower_getStartColorVar()", "contents": "getStartColorVar()" }
,
		{ "trigger": "CCParticleFlower_stopSystem()", "contents": "stopSystem()" }
,
		{ "trigger": "CCParticleFlower_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCParticleFlower_create()", "contents": "CCParticleFlower:create()" }
,

		{ "trigger": "CCSkewTo_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCSkewTo_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCSkewTo_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCSkewTo_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCSkewTo_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCSkewTo_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCSkewTo_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCSkewTo_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCSkewTo_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCSkewTo_retain()", "contents": "retain()" }
,
		{ "trigger": "CCSkewTo_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCSkewTo_copy()", "contents": "copy()" }
,
		{ "trigger": "CCSkewTo_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCSkewTo_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCSkewTo_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCSkewTo_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCSkewTo_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCSkewTo_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCSkewTo_release()", "contents": "release()" }
,
		{ "trigger": "CCSkewTo_create(float_t,float_sx,float_sy,)", "contents": "CCSkewTo:create(${1:float_t},${2:float_sx},${3:float_sy})" }
,

		{ "trigger": "CCShaky3D_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCShaky3D_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCShaky3D_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCShaky3D_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCShaky3D_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCShaky3D_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCShaky3D_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCShaky3D_retain()", "contents": "retain()" }
,
		{ "trigger": "CCShaky3D_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCShaky3D_release()", "contents": "release()" }
,
		{ "trigger": "CCShaky3D_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCShaky3D_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCShaky3D_originalVertex(const_CCPoint&_pos,)", "contents": "originalVertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCShaky3D_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCShaky3D_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCShaky3D_vertex(const_CCPoint&_pos,)", "contents": "vertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCShaky3D_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCShaky3D_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCShaky3D_setVertex(const_CCPoint&_pos,const_ccVertex3F&_vertex,)", "contents": "setVertex(${1:const_CCPoint&_pos},${2:const_ccVertex3F&_vertex})" }
,
		{ "trigger": "CCShaky3D_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCShaky3D_copy()", "contents": "copy()" }
,
		{ "trigger": "CCShaky3D_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCShaky3D_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCShaky3D_create(float_duration,CCSize_gridSize,int_range,bool_shakeZ,)", "contents": "CCShaky3D:create(${1:float_duration},${2:CCSize_gridSize},${3:int_range},${4:bool_shakeZ})" }
,

		{ "trigger": "CCTransitionMoveInB_create(float_t,CCScene*_scene,)", "contents": "CCTransitionMoveInB:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCTouch_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTouch_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTouch_getLocationInView()", "contents": "getLocationInView()" }
,
		{ "trigger": "CCTouch_getPreviousLocation()", "contents": "getPreviousLocation()" }
,
		{ "trigger": "CCTouch_getPreviousLocationInView()", "contents": "getPreviousLocationInView()" }
,
		{ "trigger": "CCTouch_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTouch_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTouch_getLocation()", "contents": "getLocation()" }
,
		{ "trigger": "CCTouch_getDelta()", "contents": "getDelta()" }
,
		{ "trigger": "CCTouch_getID()", "contents": "getID()" }
,
		{ "trigger": "CCTouch_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTouch_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTouch_setTouchInfo(int_id,float_x,float_y,)", "contents": "setTouchInfo(${1:int_id},${2:float_x},${3:float_y})" }
,
		{ "trigger": "CCTouch_release()", "contents": "release()" }
,

		{ "trigger": "CCEaseIn_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseIn_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseIn_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseIn_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseIn_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseIn_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseIn_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseIn_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseIn_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseIn_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseIn_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseIn_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseIn_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseIn_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseIn_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseIn_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseIn_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseIn_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseIn_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseIn_create(CCActionInterval*_pAction,float_fRate,)", "contents": "CCEaseIn:create(${1:CCActionInterval*_pAction},${2:float_fRate})" }
,

		{ "trigger": "CCPoint_equals(const_CCPoint_&_target,)", "contents": "equals(${1:const_CCPoint_&_target})" }
,

		{ "trigger": "CCHide_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCHide_copy()", "contents": "copy()" }
,
		{ "trigger": "CCHide_retain()", "contents": "retain()" }
,
		{ "trigger": "CCHide_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCHide_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCHide_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCHide_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCHide_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCHide_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCHide_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCHide_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCHide_release()", "contents": "release()" }
,
		{ "trigger": "CCHide_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCHide_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCHide_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCHide_create()", "contents": "CCHide:create()" }
,

		{ "trigger": "CCTwirl_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTwirl_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCTwirl_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCTwirl_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCTwirl_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCTwirl_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCTwirl_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCTwirl_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTwirl_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTwirl_release()", "contents": "release()" }
,
		{ "trigger": "CCTwirl_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTwirl_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTwirl_originalVertex(const_CCPoint&_pos,)", "contents": "originalVertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCTwirl_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTwirl_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCTwirl_vertex(const_CCPoint&_pos,)", "contents": "vertex(${1:const_CCPoint&_pos})" }
,
		{ "trigger": "CCTwirl_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCTwirl_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTwirl_setAmplitudeRate(float_fAmplitudeRate,)", "contents": "setAmplitudeRate(${1:float_fAmplitudeRate})" }
,
		{ "trigger": "CCTwirl_getPosition()", "contents": "getPosition()" }
,
		{ "trigger": "CCTwirl_setVertex(const_CCPoint&_pos,const_ccVertex3F&_vertex,)", "contents": "setVertex(${1:const_CCPoint&_pos},${2:const_ccVertex3F&_vertex})" }
,
		{ "trigger": "CCTwirl_getAmplitude()", "contents": "getAmplitude()" }
,
		{ "trigger": "CCTwirl_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTwirl_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCTwirl_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCTwirl_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCTwirl_setPosition(CCPoint_position,)", "contents": "setPosition(${1:CCPoint_position})" }
,
		{ "trigger": "CCTwirl_setAmplitude(float_fAmplitude,)", "contents": "setAmplitude(${1:float_fAmplitude})" }
,
		{ "trigger": "CCTwirl_create(float_duration,CCSize_gridSize,CCPoint_position,unsigned_int_twirls,float_amplitude,)", "contents": "CCTwirl:create(${1:float_duration},${2:CCSize_gridSize},${3:CCPoint_position},${4:unsigned_int_twirls},${5:float_amplitude})" }
,

		{ "trigger": "CCTransitionProgress_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCTransitionProgress_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionProgress_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCTransitionProgress_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCTransitionProgress_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCTransitionProgress_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCTransitionProgress_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionProgress_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCTransitionProgress_transform()", "contents": "transform()" }
,
		{ "trigger": "CCTransitionProgress_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTransitionProgress_visit()", "contents": "visit()" }
,
		{ "trigger": "CCTransitionProgress_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionProgress_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionProgress_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCTransitionProgress_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTransitionProgress_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCTransitionProgress_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCTransitionProgress_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCTransitionProgress_draw()", "contents": "draw()" }
,
		{ "trigger": "CCTransitionProgress_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCTransitionProgress_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCTransitionProgress_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCTransitionProgress_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCTransitionProgress_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCTransitionProgress_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTransitionProgress_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCTransitionProgress_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionProgress_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCTransitionProgress_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCTransitionProgress_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCTransitionProgress_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCTransitionProgress_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCTransitionProgress_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCTransitionProgress_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCTransitionProgress_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCTransitionProgress_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCTransitionProgress_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCTransitionProgress_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCTransitionProgress_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTransitionProgress_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionProgress_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCTransitionProgress_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCTransitionProgress_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCTransitionProgress_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCTransitionProgress_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionProgress_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCTransitionProgress_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCTransitionProgress_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCTransitionProgress_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCTransitionProgress_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCTransitionProgress_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCTransitionProgress_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionProgress_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionProgress_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTransitionProgress_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCTransitionProgress_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionProgress_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCTransitionProgress_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionProgress_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCTransitionProgress_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionProgress_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCTransitionProgress_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionProgress_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCTransitionProgress_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTransitionProgress_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionProgress_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCTransitionProgress_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionProgress_description()", "contents": "description()" }
,
		{ "trigger": "CCTransitionProgress_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionProgress_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionProgress_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCTransitionProgress_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionProgress_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCTransitionProgress_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCTransitionProgress_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionProgress_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCTransitionProgress_release()", "contents": "release()" }
,
		{ "trigger": "CCTransitionProgress_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCTransitionProgress_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCTransitionProgress_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCTransitionProgress_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCTransitionProgress_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionProgress_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionProgress_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTransitionProgress_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCTransitionProgress_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCTransitionProgress_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCTransitionProgress_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTransitionProgress_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCTransitionProgress_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTransitionProgress_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTransitionProgress_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCTransitionProgress_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCTransitionProgress_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCTransitionProgress_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCTransitionProgress_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCTransitionProgress_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCTransitionProgress_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCTransitionProgress_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCTransitionProgress_create(float_t,CCScene*_scene,)", "contents": "CCTransitionProgress:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCCallFunc_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCCallFunc_copy()", "contents": "copy()" }
,
		{ "trigger": "CCCallFunc_retain()", "contents": "retain()" }
,
		{ "trigger": "CCCallFunc_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCCallFunc_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCCallFunc_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCCallFunc_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCCallFunc_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCCallFunc_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCCallFunc_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCCallFunc_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCCallFunc_release()", "contents": "release()" }
,
		{ "trigger": "CCCallFunc_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCCallFunc_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCCallFunc_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCCallFunc_create(LUA_FUNCTION_funcID,)", "contents": "CCCallFunc:create(${1:LUA_FUNCTION_funcID})" }
,

		{ "trigger": "CCTransitionZoomFlipX_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCTransitionZoomFlipX_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionZoomFlipX_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCTransitionZoomFlipX_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCTransitionZoomFlipX_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCTransitionZoomFlipX_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCTransitionZoomFlipX_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionZoomFlipX_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCTransitionZoomFlipX_transform()", "contents": "transform()" }
,
		{ "trigger": "CCTransitionZoomFlipX_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTransitionZoomFlipX_visit()", "contents": "visit()" }
,
		{ "trigger": "CCTransitionZoomFlipX_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionZoomFlipX_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionZoomFlipX_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCTransitionZoomFlipX_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTransitionZoomFlipX_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCTransitionZoomFlipX_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCTransitionZoomFlipX_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCTransitionZoomFlipX_draw()", "contents": "draw()" }
,
		{ "trigger": "CCTransitionZoomFlipX_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCTransitionZoomFlipX_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCTransitionZoomFlipX_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCTransitionZoomFlipX_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCTransitionZoomFlipX_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionZoomFlipX_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCTransitionZoomFlipX_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTransitionZoomFlipX_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCTransitionZoomFlipX_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCTransitionZoomFlipX_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCTransitionZoomFlipX_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCTransitionZoomFlipX_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCTransitionZoomFlipX_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCTransitionZoomFlipX_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCTransitionZoomFlipX_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCTransitionZoomFlipX_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCTransitionZoomFlipX_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCTransitionZoomFlipX_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCTransitionZoomFlipX_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCTransitionZoomFlipX_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCTransitionZoomFlipX_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTransitionZoomFlipX_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionZoomFlipX_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCTransitionZoomFlipX_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCTransitionZoomFlipX_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCTransitionZoomFlipX_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCTransitionZoomFlipX_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionZoomFlipX_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCTransitionZoomFlipX_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCTransitionZoomFlipX_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCTransitionZoomFlipX_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCTransitionZoomFlipX_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCTransitionZoomFlipX_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCTransitionZoomFlipX_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionZoomFlipX_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionZoomFlipX_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTransitionZoomFlipX_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCTransitionZoomFlipX_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionZoomFlipX_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCTransitionZoomFlipX_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionZoomFlipX_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCTransitionZoomFlipX_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionZoomFlipX_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionZoomFlipX_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionZoomFlipX_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCTransitionZoomFlipX_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTransitionZoomFlipX_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionZoomFlipX_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCTransitionZoomFlipX_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionZoomFlipX_description()", "contents": "description()" }
,
		{ "trigger": "CCTransitionZoomFlipX_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionZoomFlipX_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionZoomFlipX_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCTransitionZoomFlipX_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionZoomFlipX_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCTransitionZoomFlipX_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCTransitionZoomFlipX_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTransitionZoomFlipX_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCTransitionZoomFlipX_release()", "contents": "release()" }
,
		{ "trigger": "CCTransitionZoomFlipX_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCTransitionZoomFlipX_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCTransitionZoomFlipX_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCTransitionZoomFlipX_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCTransitionZoomFlipX_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionZoomFlipX_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionZoomFlipX_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCTransitionZoomFlipX_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCTransitionZoomFlipX_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCTransitionZoomFlipX_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTransitionZoomFlipX_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCTransitionZoomFlipX_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTransitionZoomFlipX_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTransitionZoomFlipX_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCTransitionZoomFlipX_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCTransitionZoomFlipX_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCTransitionZoomFlipX_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCTransitionZoomFlipX_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCTransitionZoomFlipX_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCTransitionZoomFlipX_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCTransitionZoomFlipX_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCTransitionZoomFlipX_create(float_t,CCScene*_s,tOrientation_o_=_kCCTransitionOrientationRightOver,)", "contents": "CCTransitionZoomFlipX:create(${1:float_t},${2:CCScene*_s},${3:tOrientation_o_=_kCCTransitionOrientationRightOver})" }
,

		{ "trigger": "CCTransitionZoomFlipY_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCTransitionZoomFlipY_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionZoomFlipY_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCTransitionZoomFlipY_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCTransitionZoomFlipY_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCTransitionZoomFlipY_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCTransitionZoomFlipY_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionZoomFlipY_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCTransitionZoomFlipY_transform()", "contents": "transform()" }
,
		{ "trigger": "CCTransitionZoomFlipY_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTransitionZoomFlipY_visit()", "contents": "visit()" }
,
		{ "trigger": "CCTransitionZoomFlipY_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionZoomFlipY_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionZoomFlipY_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCTransitionZoomFlipY_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTransitionZoomFlipY_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCTransitionZoomFlipY_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCTransitionZoomFlipY_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCTransitionZoomFlipY_draw()", "contents": "draw()" }
,
		{ "trigger": "CCTransitionZoomFlipY_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCTransitionZoomFlipY_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCTransitionZoomFlipY_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCTransitionZoomFlipY_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCTransitionZoomFlipY_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionZoomFlipY_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCTransitionZoomFlipY_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTransitionZoomFlipY_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCTransitionZoomFlipY_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCTransitionZoomFlipY_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCTransitionZoomFlipY_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCTransitionZoomFlipY_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCTransitionZoomFlipY_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCTransitionZoomFlipY_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCTransitionZoomFlipY_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCTransitionZoomFlipY_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCTransitionZoomFlipY_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCTransitionZoomFlipY_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCTransitionZoomFlipY_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCTransitionZoomFlipY_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCTransitionZoomFlipY_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTransitionZoomFlipY_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionZoomFlipY_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCTransitionZoomFlipY_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCTransitionZoomFlipY_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCTransitionZoomFlipY_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCTransitionZoomFlipY_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionZoomFlipY_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCTransitionZoomFlipY_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCTransitionZoomFlipY_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCTransitionZoomFlipY_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCTransitionZoomFlipY_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCTransitionZoomFlipY_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCTransitionZoomFlipY_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionZoomFlipY_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionZoomFlipY_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTransitionZoomFlipY_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCTransitionZoomFlipY_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionZoomFlipY_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCTransitionZoomFlipY_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionZoomFlipY_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCTransitionZoomFlipY_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionZoomFlipY_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionZoomFlipY_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionZoomFlipY_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCTransitionZoomFlipY_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTransitionZoomFlipY_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionZoomFlipY_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCTransitionZoomFlipY_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionZoomFlipY_description()", "contents": "description()" }
,
		{ "trigger": "CCTransitionZoomFlipY_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionZoomFlipY_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionZoomFlipY_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCTransitionZoomFlipY_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionZoomFlipY_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCTransitionZoomFlipY_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCTransitionZoomFlipY_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTransitionZoomFlipY_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCTransitionZoomFlipY_release()", "contents": "release()" }
,
		{ "trigger": "CCTransitionZoomFlipY_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCTransitionZoomFlipY_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCTransitionZoomFlipY_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCTransitionZoomFlipY_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCTransitionZoomFlipY_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionZoomFlipY_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionZoomFlipY_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCTransitionZoomFlipY_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCTransitionZoomFlipY_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCTransitionZoomFlipY_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTransitionZoomFlipY_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCTransitionZoomFlipY_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTransitionZoomFlipY_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTransitionZoomFlipY_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCTransitionZoomFlipY_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCTransitionZoomFlipY_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCTransitionZoomFlipY_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCTransitionZoomFlipY_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCTransitionZoomFlipY_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCTransitionZoomFlipY_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCTransitionZoomFlipY_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCTransitionZoomFlipY_create(float_t,CCScene*_s,tOrientation_o_=_kCCTransitionOrientationUpOver,)", "contents": "CCTransitionZoomFlipY:create(${1:float_t},${2:CCScene*_s},${3:tOrientation_o_=_kCCTransitionOrientationUpOver})" }
,

		{ "trigger": "CCParticleSystem_setEndColor(const_ccColor4F_var,)", "contents": "setEndColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSystem_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleSystem_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCParticleSystem_setRotatePerSecondVar(float_degrees,)", "contents": "setRotatePerSecondVar(${1:float_degrees})" }
,
		{ "trigger": "CCParticleSystem_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCParticleSystem_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCParticleSystem_transform()", "contents": "transform()" }
,
		{ "trigger": "CCParticleSystem_getRotatePerSecond()", "contents": "getRotatePerSecond()" }
,
		{ "trigger": "CCParticleSystem_getAngleVar()", "contents": "getAngleVar()" }
,
		{ "trigger": "CCParticleSystem_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleSystem_isAutoRemoveOnFinish()", "contents": "isAutoRemoveOnFinish()" }
,
		{ "trigger": "CCParticleSystem_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleSystem_getTangentialAccelVar()", "contents": "getTangentialAccelVar()" }
,
		{ "trigger": "CCParticleSystem_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCParticleSystem_setTangentialAccel(float_t,)", "contents": "setTangentialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleSystem_getStartSpin()", "contents": "getStartSpin()" }
,
		{ "trigger": "CCParticleSystem_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCParticleSystem_getStartColor()", "contents": "getStartColor()" }
,
		{ "trigger": "CCParticleSystem_setStartSpinVar(float_var,)", "contents": "setStartSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleSystem_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCParticleSystem_setStartRadius(float_startRadius,)", "contents": "setStartRadius(${1:float_startRadius})" }
,
		{ "trigger": "CCParticleSystem_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCParticleSystem_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCParticleSystem_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCParticleSystem_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCParticleSystem_getPosVar()", "contents": "getPosVar()" }
,
		{ "trigger": "CCParticleSystem_isFull()", "contents": "isFull()" }
,
		{ "trigger": "CCParticleSystem_setStartRadiusVar(float_startRadiusVar,)", "contents": "setStartRadiusVar(${1:float_startRadiusVar})" }
,
		{ "trigger": "CCParticleSystem_getStartSpinVar()", "contents": "getStartSpinVar()" }
,
		{ "trigger": "CCParticleSystem_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCParticleSystem_setBatchNode(CCParticleBatchNode*_node,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_node})" }
,
		{ "trigger": "CCParticleSystem_isBlendAdditive()", "contents": "isBlendAdditive()" }
,
		{ "trigger": "CCParticleSystem_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCParticleSystem_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCParticleSystem_visit()", "contents": "visit()" }
,
		{ "trigger": "CCParticleSystem_getEmissionRate()", "contents": "getEmissionRate()" }
,
		{ "trigger": "CCParticleSystem_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCParticleSystem_setEndRadiusVar(float_endRadiusVar,)", "contents": "setEndRadiusVar(${1:float_endRadiusVar})" }
,
		{ "trigger": "CCParticleSystem_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleSystem_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCParticleSystem_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCParticleSystem_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCParticleSystem_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCParticleSystem_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCParticleSystem_setBlendAdditive(bool_value,)", "contents": "setBlendAdditive(${1:bool_value})" }
,
		{ "trigger": "CCParticleSystem_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleSystem_setEndSpin(float_var,)", "contents": "setEndSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleSystem_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCParticleSystem_getEndRadius()", "contents": "getEndRadius()" }
,
		{ "trigger": "CCParticleSystem_setRadialAccelVar(float_t,)", "contents": "setRadialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleSystem_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCParticleSystem_getEndSpin()", "contents": "getEndSpin()" }
,
		{ "trigger": "CCParticleSystem_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleSystem_setGravity(const_CCPoint&_g,)", "contents": "setGravity(${1:const_CCPoint&_g})" }
,
		{ "trigger": "CCParticleSystem_getSourcePosition()", "contents": "getSourcePosition()" }
,
		{ "trigger": "CCParticleSystem_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleSystem_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCParticleSystem_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCParticleSystem_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleSystem_getEndSpinVar()", "contents": "getEndSpinVar()" }
,
		{ "trigger": "CCParticleSystem_setAutoRemoveOnFinish(bool_var,)", "contents": "setAutoRemoveOnFinish(${1:bool_var})" }
,
		{ "trigger": "CCParticleSystem_setPosVar(CCPoint_pos,)", "contents": "setPosVar(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleSystem_setEmissionRate(float_rate,)", "contents": "setEmissionRate(${1:float_rate})" }
,
		{ "trigger": "CCParticleSystem_getEndColorVar()", "contents": "getEndColorVar()" }
,
		{ "trigger": "CCParticleSystem_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleSystem_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCParticleSystem_getRadialAccelVar()", "contents": "getRadialAccelVar()" }
,
		{ "trigger": "CCParticleSystem_getStartRadius()", "contents": "getStartRadius()" }
,
		{ "trigger": "CCParticleSystem_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleSystem_setStartColorVar(const_ccColor4F_var,)", "contents": "setStartColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSystem_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCParticleSystem_initWithFile(const_char*_plistFile,)", "contents": "initWithFile(${1:const_char*_plistFile})" }
,
		{ "trigger": "CCParticleSystem_initParticle(tCCParticle*_particle,)", "contents": "initParticle(${1:tCCParticle*_particle})" }
,
		{ "trigger": "CCParticleSystem_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCParticleSystem_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCParticleSystem_setStartSizeVar(float_size,)", "contents": "setStartSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleSystem_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCParticleSystem_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCParticleSystem_setStartSpin(float_var,)", "contents": "setStartSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleSystem_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCParticleSystem_getEndSize()", "contents": "getEndSize()" }
,
		{ "trigger": "CCParticleSystem_setSourcePosition(CCPoint_pos,)", "contents": "setSourcePosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleSystem_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCParticleSystem_isActive()", "contents": "isActive()" }
,
		{ "trigger": "CCParticleSystem_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCParticleSystem_updateQuadWithParticle(tCCParticle*_particle,const_CCPoint&_newPosition,)", "contents": "updateQuadWithParticle(${1:tCCParticle*_particle},${2:const_CCPoint&_newPosition})" }
,
		{ "trigger": "CCParticleSystem_setStartColor(const_ccColor4F_var,)", "contents": "setStartColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSystem_getEndColor()", "contents": "getEndColor()" }
,
		{ "trigger": "CCParticleSystem_setEmitterMode(int_mode,)", "contents": "setEmitterMode(${1:int_mode})" }
,
		{ "trigger": "CCParticleSystem_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCParticleSystem_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCParticleSystem_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCParticleSystem_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCParticleSystem_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCParticleSystem_getLife()", "contents": "getLife()" }
,
		{ "trigger": "CCParticleSystem_setBlendFunc(ccBlendFunc_var,)", "contents": "setBlendFunc(${1:ccBlendFunc_var})" }
,
		{ "trigger": "CCParticleSystem_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleSystem_getAngle()", "contents": "getAngle()" }
,
		{ "trigger": "CCParticleSystem_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCParticleSystem_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCParticleSystem_getEmitterMode()", "contents": "getEmitterMode()" }
,
		{ "trigger": "CCParticleSystem_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleSystem_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCParticleSystem_getTangentialAccel()", "contents": "getTangentialAccel()" }
,
		{ "trigger": "CCParticleSystem_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCParticleSystem_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCParticleSystem_setTexture(CCTexture2D*_var,)", "contents": "setTexture(${1:CCTexture2D*_var})" }
,
		{ "trigger": "CCParticleSystem_getGravity()", "contents": "getGravity()" }
,
		{ "trigger": "CCParticleSystem_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "CCParticleSystem_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCParticleSystem_setScale(float_s,)", "contents": "setScale(${1:float_s})" }
,
		{ "trigger": "CCParticleSystem_draw()", "contents": "draw()" }
,
		{ "trigger": "CCParticleSystem_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleSystem_setEndSpinVar(float_var,)", "contents": "setEndSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleSystem_setSpeed(float_speed,)", "contents": "setSpeed(${1:float_speed})" }
,
		{ "trigger": "CCParticleSystem_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCParticleSystem_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCParticleSystem_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCParticleSystem_getRadialAccel()", "contents": "getRadialAccel()" }
,
		{ "trigger": "CCParticleSystem_setStartSize(float_size,)", "contents": "setStartSize(${1:float_size})" }
,
		{ "trigger": "CCParticleSystem_getStartRadiusVar()", "contents": "getStartRadiusVar()" }
,
		{ "trigger": "CCParticleSystem_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCParticleSystem_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCParticleSystem_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCParticleSystem_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCParticleSystem_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCParticleSystem_getSpeed()", "contents": "getSpeed()" }
,
		{ "trigger": "CCParticleSystem_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCParticleSystem_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCParticleSystem_setRotatePerSecond(float_degrees,)", "contents": "setRotatePerSecond(${1:float_degrees})" }
,
		{ "trigger": "CCParticleSystem_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCParticleSystem_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCParticleSystem_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCParticleSystem_getEndRadiusVar()", "contents": "getEndRadiusVar()" }
,
		{ "trigger": "CCParticleSystem_getParticleCount()", "contents": "getParticleCount()" }
,
		{ "trigger": "CCParticleSystem_postStep()", "contents": "postStep()" }
,
		{ "trigger": "CCParticleSystem_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCParticleSystem_getEndSizeVar()", "contents": "getEndSizeVar()" }
,
		{ "trigger": "CCParticleSystem_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleSystem_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCParticleSystem_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCParticleSystem_setTangentialAccelVar(float_t,)", "contents": "setTangentialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleSystem_getSpeedVar()", "contents": "getSpeedVar()" }
,
		{ "trigger": "CCParticleSystem_setSpeedVar(float_speed,)", "contents": "setSpeedVar(${1:float_speed})" }
,
		{ "trigger": "CCParticleSystem_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCParticleSystem_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCParticleSystem_setEndSizeVar(float_size,)", "contents": "setEndSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleSystem_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCParticleSystem_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCParticleSystem_setPositionType(tCCPositionType_type,)", "contents": "setPositionType(${1:tCCPositionType_type})" }
,
		{ "trigger": "CCParticleSystem_setEndRadius(float_endRadius,)", "contents": "setEndRadius(${1:float_endRadius})" }
,
		{ "trigger": "CCParticleSystem_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleSystem_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCParticleSystem_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCParticleSystem_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCParticleSystem_getBatchNode()", "contents": "getBatchNode()" }
,
		{ "trigger": "CCParticleSystem_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleSystem_initWithTotalParticles(unsigned_int_number,)", "contents": "initWithTotalParticles(${1:unsigned_int_number})" }
,
		{ "trigger": "CCParticleSystem_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleSystem_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCParticleSystem_setDuration(float_d,)", "contents": "setDuration(${1:float_d})" }
,
		{ "trigger": "CCParticleSystem_setRadialAccel(float_t,)", "contents": "setRadialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleSystem_resetSystem()", "contents": "resetSystem()" }
,
		{ "trigger": "CCParticleSystem_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleSystem_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCParticleSystem_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCParticleSystem_copy()", "contents": "copy()" }
,
		{ "trigger": "CCParticleSystem_setEndSize(float_size,)", "contents": "setEndSize(${1:float_size})" }
,
		{ "trigger": "CCParticleSystem_setAngleVar(float_angle,)", "contents": "setAngleVar(${1:float_angle})" }
,
		{ "trigger": "CCParticleSystem_getTotalParticles()", "contents": "getTotalParticles()" }
,
		{ "trigger": "CCParticleSystem_description()", "contents": "description()" }
,
		{ "trigger": "CCParticleSystem_addParticle()", "contents": "addParticle()" }
,
		{ "trigger": "CCParticleSystem_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleSystem_getStartSize()", "contents": "getStartSize()" }
,
		{ "trigger": "CCParticleSystem_setLifeVar(float_lifeVar,)", "contents": "setLifeVar(${1:float_lifeVar})" }
,
		{ "trigger": "CCParticleSystem_getStartSizeVar()", "contents": "getStartSizeVar()" }
,
		{ "trigger": "CCParticleSystem_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCParticleSystem_setAngle(float_angle,)", "contents": "setAngle(${1:float_angle})" }
,
		{ "trigger": "CCParticleSystem_retain()", "contents": "retain()" }
,
		{ "trigger": "CCParticleSystem_release()", "contents": "release()" }
,
		{ "trigger": "CCParticleSystem_getRotatePerSecondVar()", "contents": "getRotatePerSecondVar()" }
,
		{ "trigger": "CCParticleSystem_setLife(float_life,)", "contents": "setLife(${1:float_life})" }
,
		{ "trigger": "CCParticleSystem_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleSystem_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCParticleSystem_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCParticleSystem_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCParticleSystem_getLifeVar()", "contents": "getLifeVar()" }
,
		{ "trigger": "CCParticleSystem_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCParticleSystem_setEndColorVar(const_ccColor4F_var,)", "contents": "setEndColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSystem_getStartColorVar()", "contents": "getStartColorVar()" }
,
		{ "trigger": "CCParticleSystem_stopSystem()", "contents": "stopSystem()" }
,
		{ "trigger": "CCParticleSystem_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCParticleSystem_create(const_char_*plistFile,)", "contents": "CCParticleSystem:create(${1:const_char_*plistFile})" }
,

		{ "trigger": "CCFlipY3D_create(float_duration,)", "contents": "CCFlipY3D:create(${1:float_duration})" }
,

		{ "trigger": "CCSize_equals(const_CCSize_&_target,)", "contents": "equals(${1:const_CCSize_&_target})" }
,

		{ "trigger": "CCJumpTo_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCJumpTo_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCJumpTo_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCJumpTo_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCJumpTo_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCJumpTo_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCJumpTo_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCJumpTo_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCJumpTo_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCJumpTo_retain()", "contents": "retain()" }
,
		{ "trigger": "CCJumpTo_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCJumpTo_copy()", "contents": "copy()" }
,
		{ "trigger": "CCJumpTo_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCJumpTo_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCJumpTo_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCJumpTo_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCJumpTo_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCJumpTo_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCJumpTo_release()", "contents": "release()" }
,
		{ "trigger": "CCJumpTo_create(float_duration,CCPoint_position,float_height,int_jumps,)", "contents": "CCJumpTo:create(${1:float_duration},${2:CCPoint_position},${3:float_height},${4:int_jumps})" }
,


		{ "trigger": "CCParticleFire_setEndColor(const_ccColor4F_var,)", "contents": "setEndColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleFire_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleFire_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCParticleFire_setRotatePerSecondVar(float_degrees,)", "contents": "setRotatePerSecondVar(${1:float_degrees})" }
,
		{ "trigger": "CCParticleFire_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCParticleFire_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCParticleFire_transform()", "contents": "transform()" }
,
		{ "trigger": "CCParticleFire_getRotatePerSecond()", "contents": "getRotatePerSecond()" }
,
		{ "trigger": "CCParticleFire_setTextureWithRect(CCTexture2D_*texture,const_CCRect&_rect,)", "contents": "setTextureWithRect(${1:CCTexture2D_*texture},${2:const_CCRect&_rect})" }
,
		{ "trigger": "CCParticleFire_getAngleVar()", "contents": "getAngleVar()" }
,
		{ "trigger": "CCParticleFire_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleFire_isAutoRemoveOnFinish()", "contents": "isAutoRemoveOnFinish()" }
,
		{ "trigger": "CCParticleFire_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleFire_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCParticleFire_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCParticleFire_setTangentialAccel(float_t,)", "contents": "setTangentialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleFire_getStartSpin()", "contents": "getStartSpin()" }
,
		{ "trigger": "CCParticleFire_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCParticleFire_getStartColor()", "contents": "getStartColor()" }
,
		{ "trigger": "CCParticleFire_setStartSpinVar(float_var,)", "contents": "setStartSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleFire_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCParticleFire_setStartRadius(float_startRadius,)", "contents": "setStartRadius(${1:float_startRadius})" }
,
		{ "trigger": "CCParticleFire_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCParticleFire_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCParticleFire_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCParticleFire_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCParticleFire_getPosVar()", "contents": "getPosVar()" }
,
		{ "trigger": "CCParticleFire_setAngleVar(float_angle,)", "contents": "setAngleVar(${1:float_angle})" }
,
		{ "trigger": "CCParticleFire_isFull()", "contents": "isFull()" }
,
		{ "trigger": "CCParticleFire_setStartRadiusVar(float_startRadiusVar,)", "contents": "setStartRadiusVar(${1:float_startRadiusVar})" }
,
		{ "trigger": "CCParticleFire_getStartSpinVar()", "contents": "getStartSpinVar()" }
,
		{ "trigger": "CCParticleFire_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCParticleFire_setDisplayFrame(CCSpriteFrame*_spriteFrame,)", "contents": "setDisplayFrame(${1:CCSpriteFrame*_spriteFrame})" }
,
		{ "trigger": "CCParticleFire_setBatchNode(CCParticleBatchNode*_node,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_node})" }
,
		{ "trigger": "CCParticleFire_isBlendAdditive()", "contents": "isBlendAdditive()" }
,
		{ "trigger": "CCParticleFire_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCParticleFire_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCParticleFire_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCParticleFire_getEmissionRate()", "contents": "getEmissionRate()" }
,
		{ "trigger": "CCParticleFire_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCParticleFire_setEndRadiusVar(float_endRadiusVar,)", "contents": "setEndRadiusVar(${1:float_endRadiusVar})" }
,
		{ "trigger": "CCParticleFire_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleFire_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCParticleFire_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCParticleFire_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCParticleFire_postStep()", "contents": "postStep()" }
,
		{ "trigger": "CCParticleFire_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCParticleFire_setBlendAdditive(bool_value,)", "contents": "setBlendAdditive(${1:bool_value})" }
,
		{ "trigger": "CCParticleFire_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleFire_setEndSpin(float_var,)", "contents": "setEndSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleFire_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCParticleFire_setBatchNode(CCParticleBatchNode*_batchNode,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_batchNode})" }
,
		{ "trigger": "CCParticleFire_getEndRadius()", "contents": "getEndRadius()" }
,
		{ "trigger": "CCParticleFire_getStartSize()", "contents": "getStartSize()" }
,
		{ "trigger": "CCParticleFire_getTotalParticles()", "contents": "getTotalParticles()" }
,
		{ "trigger": "CCParticleFire_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCParticleFire_getStartSizeVar()", "contents": "getStartSizeVar()" }
,
		{ "trigger": "CCParticleFire_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleFire_setGravity(const_CCPoint&_g,)", "contents": "setGravity(${1:const_CCPoint&_g})" }
,
		{ "trigger": "CCParticleFire_getSourcePosition()", "contents": "getSourcePosition()" }
,
		{ "trigger": "CCParticleFire_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleFire_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCParticleFire_getTangentialAccelVar()", "contents": "getTangentialAccelVar()" }
,
		{ "trigger": "CCParticleFire_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleFire_getEndSpinVar()", "contents": "getEndSpinVar()" }
,
		{ "trigger": "CCParticleFire_setAutoRemoveOnFinish(bool_var,)", "contents": "setAutoRemoveOnFinish(${1:bool_var})" }
,
		{ "trigger": "CCParticleFire_setPosVar(CCPoint_pos,)", "contents": "setPosVar(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleFire_setEmissionRate(float_rate,)", "contents": "setEmissionRate(${1:float_rate})" }
,
		{ "trigger": "CCParticleFire_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleFire_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleFire_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCParticleFire_getRadialAccelVar()", "contents": "getRadialAccelVar()" }
,
		{ "trigger": "CCParticleFire_getStartRadius()", "contents": "getStartRadius()" }
,
		{ "trigger": "CCParticleFire_getEndColorVar()", "contents": "getEndColorVar()" }
,
		{ "trigger": "CCParticleFire_setStartColorVar(const_ccColor4F_var,)", "contents": "setStartColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleFire_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCParticleFire_initWithFile(const_char*_plistFile,)", "contents": "initWithFile(${1:const_char*_plistFile})" }
,
		{ "trigger": "CCParticleFire_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCParticleFire_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCParticleFire_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCParticleFire_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCParticleFire_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCParticleFire_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCParticleFire_setStartSpin(float_var,)", "contents": "setStartSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleFire_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCParticleFire_getEndSize()", "contents": "getEndSize()" }
,
		{ "trigger": "CCParticleFire_setSourcePosition(CCPoint_pos,)", "contents": "setSourcePosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleFire_initParticle(tCCParticle*_particle,)", "contents": "initParticle(${1:tCCParticle*_particle})" }
,
		{ "trigger": "CCParticleFire_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCParticleFire_updateQuadWithParticle(tCCParticle*_particle,const_CCPoint&_newPosition,)", "contents": "updateQuadWithParticle(${1:tCCParticle*_particle},${2:const_CCPoint&_newPosition})" }
,
		{ "trigger": "CCParticleFire_setStartColor(const_ccColor4F_var,)", "contents": "setStartColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleFire_getEndColor()", "contents": "getEndColor()" }
,
		{ "trigger": "CCParticleFire_setEmitterMode(int_mode,)", "contents": "setEmitterMode(${1:int_mode})" }
,
		{ "trigger": "CCParticleFire_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCParticleFire_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCParticleFire_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCParticleFire_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCParticleFire_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCParticleFire_setStartSizeVar(float_size,)", "contents": "setStartSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleFire_getLife()", "contents": "getLife()" }
,
		{ "trigger": "CCParticleFire_setBlendFunc(ccBlendFunc_var,)", "contents": "setBlendFunc(${1:ccBlendFunc_var})" }
,
		{ "trigger": "CCParticleFire_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleFire_getAngle()", "contents": "getAngle()" }
,
		{ "trigger": "CCParticleFire_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCParticleFire_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCParticleFire_getEmitterMode()", "contents": "getEmitterMode()" }
,
		{ "trigger": "CCParticleFire_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleFire_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCParticleFire_getTangentialAccel()", "contents": "getTangentialAccel()" }
,
		{ "trigger": "CCParticleFire_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCParticleFire_visit()", "contents": "visit()" }
,
		{ "trigger": "CCParticleFire_setTexture(CCTexture2D*_var,)", "contents": "setTexture(${1:CCTexture2D*_var})" }
,
		{ "trigger": "CCParticleFire_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "CCParticleFire_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCParticleFire_setScale(float_s,)", "contents": "setScale(${1:float_s})" }
,
		{ "trigger": "CCParticleFire_draw()", "contents": "draw()" }
,
		{ "trigger": "CCParticleFire_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleFire_setEndSpinVar(float_var,)", "contents": "setEndSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleFire_setSpeed(float_speed,)", "contents": "setSpeed(${1:float_speed})" }
,
		{ "trigger": "CCParticleFire_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCParticleFire_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCParticleFire_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCParticleFire_setStartSize(float_size,)", "contents": "setStartSize(${1:float_size})" }
,
		{ "trigger": "CCParticleFire_getStartRadiusVar()", "contents": "getStartRadiusVar()" }
,
		{ "trigger": "CCParticleFire_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCParticleFire_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCParticleFire_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCParticleFire_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCParticleFire_getSpeed()", "contents": "getSpeed()" }
,
		{ "trigger": "CCParticleFire_setTotalParticles(unsigned_int_tp,)", "contents": "setTotalParticles(${1:unsigned_int_tp})" }
,
		{ "trigger": "CCParticleFire_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCParticleFire_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCParticleFire_setRotatePerSecond(float_degrees,)", "contents": "setRotatePerSecond(${1:float_degrees})" }
,
		{ "trigger": "CCParticleFire_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCParticleFire_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCParticleFire_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCParticleFire_getEndRadiusVar()", "contents": "getEndRadiusVar()" }
,
		{ "trigger": "CCParticleFire_getParticleCount()", "contents": "getParticleCount()" }
,
		{ "trigger": "CCParticleFire_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCParticleFire_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCParticleFire_getEndSizeVar()", "contents": "getEndSizeVar()" }
,
		{ "trigger": "CCParticleFire_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleFire_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCParticleFire_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCParticleFire_setTangentialAccelVar(float_t,)", "contents": "setTangentialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleFire_getSpeedVar()", "contents": "getSpeedVar()" }
,
		{ "trigger": "CCParticleFire_setSpeedVar(float_speed,)", "contents": "setSpeedVar(${1:float_speed})" }
,
		{ "trigger": "CCParticleFire_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCParticleFire_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCParticleFire_setEndSizeVar(float_size,)", "contents": "setEndSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleFire_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCParticleFire_getLifeVar()", "contents": "getLifeVar()" }
,
		{ "trigger": "CCParticleFire_setPositionType(tCCPositionType_type,)", "contents": "setPositionType(${1:tCCPositionType_type})" }
,
		{ "trigger": "CCParticleFire_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCParticleFire_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleFire_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCParticleFire_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCParticleFire_getBatchNode()", "contents": "getBatchNode()" }
,
		{ "trigger": "CCParticleFire_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleFire_initWithTotalParticles(unsigned_int_number,)", "contents": "initWithTotalParticles(${1:unsigned_int_number})" }
,
		{ "trigger": "CCParticleFire_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleFire_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCParticleFire_setDuration(float_d,)", "contents": "setDuration(${1:float_d})" }
,
		{ "trigger": "CCParticleFire_setRadialAccel(float_t,)", "contents": "setRadialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleFire_resetSystem()", "contents": "resetSystem()" }
,
		{ "trigger": "CCParticleFire_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleFire_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCParticleFire_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCParticleFire_copy()", "contents": "copy()" }
,
		{ "trigger": "CCParticleFire_setEndSize(float_size,)", "contents": "setEndSize(${1:float_size})" }
,
		{ "trigger": "CCParticleFire_getRadialAccel()", "contents": "getRadialAccel()" }
,
		{ "trigger": "CCParticleFire_isActive()", "contents": "isActive()" }
,
		{ "trigger": "CCParticleFire_description()", "contents": "description()" }
,
		{ "trigger": "CCParticleFire_getGravity()", "contents": "getGravity()" }
,
		{ "trigger": "CCParticleFire_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleFire_setRadialAccelVar(float_t,)", "contents": "setRadialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleFire_setLifeVar(float_lifeVar,)", "contents": "setLifeVar(${1:float_lifeVar})" }
,
		{ "trigger": "CCParticleFire_setEndRadius(float_endRadius,)", "contents": "setEndRadius(${1:float_endRadius})" }
,
		{ "trigger": "CCParticleFire_getEndSpin()", "contents": "getEndSpin()" }
,
		{ "trigger": "CCParticleFire_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCParticleFire_setAngle(float_angle,)", "contents": "setAngle(${1:float_angle})" }
,
		{ "trigger": "CCParticleFire_retain()", "contents": "retain()" }
,
		{ "trigger": "CCParticleFire_release()", "contents": "release()" }
,
		{ "trigger": "CCParticleFire_getRotatePerSecondVar()", "contents": "getRotatePerSecondVar()" }
,
		{ "trigger": "CCParticleFire_addParticle()", "contents": "addParticle()" }
,
		{ "trigger": "CCParticleFire_setLife(float_life,)", "contents": "setLife(${1:float_life})" }
,
		{ "trigger": "CCParticleFire_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleFire_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCParticleFire_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCParticleFire_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCParticleFire_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCParticleFire_setTexture(CCTexture2D*_texture,)", "contents": "setTexture(${1:CCTexture2D*_texture})" }
,
		{ "trigger": "CCParticleFire_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCParticleFire_setEndColorVar(const_ccColor4F_var,)", "contents": "setEndColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleFire_getStartColorVar()", "contents": "getStartColorVar()" }
,
		{ "trigger": "CCParticleFire_stopSystem()", "contents": "stopSystem()" }
,
		{ "trigger": "CCParticleFire_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCParticleFire_create()", "contents": "CCParticleFire:create()" }
,

		{ "trigger": "CCTurnOffTiles_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTurnOffTiles_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCTurnOffTiles_tile(CCPoint_pos,)", "contents": "tile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTurnOffTiles_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCTurnOffTiles_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCTurnOffTiles_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCTurnOffTiles_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCTurnOffTiles_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCTurnOffTiles_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTurnOffTiles_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTurnOffTiles_release()", "contents": "release()" }
,
		{ "trigger": "CCTurnOffTiles_turnOffTile(CCPoint_pos,)", "contents": "turnOffTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTurnOffTiles_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTurnOffTiles_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTurnOffTiles_originalTile(CCPoint_pos,)", "contents": "originalTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTurnOffTiles_turnOnTile(CCPoint_pos,)", "contents": "turnOnTile(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTurnOffTiles_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTurnOffTiles_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCTurnOffTiles_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTurnOffTiles_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCTurnOffTiles_shuffle(unsigned_int_*pArray,int_nLen,)", "contents": "shuffle(${1:unsigned_int_*pArray},${2:int_nLen})" }
,
		{ "trigger": "CCTurnOffTiles_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCTurnOffTiles_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTurnOffTiles_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCTurnOffTiles_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCTurnOffTiles_setTile(CCPoint_pos,ccQuad3_coords,)", "contents": "setTile(${1:CCPoint_pos},${2:ccQuad3_coords})" }
,
		{ "trigger": "CCTurnOffTiles_create(float_duration,CCSize_gridSize,unsigned_int_seed,)", "contents": "CCTurnOffTiles:create(${1:float_duration},${2:CCSize_gridSize},${3:unsigned_int_seed})" }
,
		{ "trigger": "CCTurnOffTiles_create(float_duration,CCSize_gridSize,)", "contents": "CCTurnOffTiles:create(${1:float_duration},${2:CCSize_gridSize})" }
,


		{ "trigger": "CCRibbon_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCRibbon_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCRibbon_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCRibbon_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCRibbon_setTexture(CCTexture2D*_val,)", "contents": "setTexture(${1:CCTexture2D*_val})" }
,
		{ "trigger": "CCRibbon_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCRibbon_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCRibbon_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCRibbon_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCRibbon_transform()", "contents": "transform()" }
,
		{ "trigger": "CCRibbon_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCRibbon_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCRibbon_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCRibbon_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCRibbon_setBlendFunc(ccBlendFunc_val,)", "contents": "setBlendFunc(${1:ccBlendFunc_val})" }
,
		{ "trigger": "CCRibbon_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCRibbon_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCRibbon_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCRibbon_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCRibbon_draw()", "contents": "draw()" }
,
		{ "trigger": "CCRibbon_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCRibbon_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCRibbon_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCRibbon_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCRibbon_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCRibbon_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCRibbon_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCRibbon_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCRibbon_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCRibbon_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCRibbon_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCRibbon_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCRibbon_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCRibbon_sideOfLine(CCPoint_p,CCPoint_l1,CCPoint_l2,)", "contents": "sideOfLine(${1:CCPoint_p},${2:CCPoint_l1},${3:CCPoint_l2})" }
,
		{ "trigger": "CCRibbon_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCRibbon_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCRibbon_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCRibbon_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCRibbon_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCRibbon_addPointAt(CCPoint_location,float_width,)", "contents": "addPointAt(${1:CCPoint_location},${2:float_width})" }
,
		{ "trigger": "CCRibbon_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCRibbon_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCRibbon_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCRibbon_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCRibbon_visit()", "contents": "visit()" }
,
		{ "trigger": "CCRibbon_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCRibbon_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCRibbon_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCRibbon_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCRibbon_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCRibbon_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCRibbon_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCRibbon_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCRibbon_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCRibbon_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCRibbon_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCRibbon_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCRibbon_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCRibbon_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCRibbon_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCRibbon_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCRibbon_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCRibbon_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCRibbon_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCRibbon_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCRibbon_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCRibbon_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCRibbon_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCRibbon_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCRibbon_copy()", "contents": "copy()" }
,
		{ "trigger": "CCRibbon_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCRibbon_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCRibbon_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCRibbon_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCRibbon_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCRibbon_getTextureLength()", "contents": "getTextureLength()" }
,
		{ "trigger": "CCRibbon_description()", "contents": "description()" }
,
		{ "trigger": "CCRibbon_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCRibbon_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCRibbon_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCRibbon_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCRibbon_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCRibbon_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCRibbon_retain()", "contents": "retain()" }
,
		{ "trigger": "CCRibbon_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCRibbon_release()", "contents": "release()" }
,
		{ "trigger": "CCRibbon_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCRibbon_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCRibbon_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCRibbon_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCRibbon_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCRibbon_setTextureLength(float_val,)", "contents": "setTextureLength(${1:float_val})" }
,
		{ "trigger": "CCRibbon_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCRibbon_setColor(ccColor4B_val,)", "contents": "setColor(${1:ccColor4B_val})" }
,
		{ "trigger": "CCRibbon_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCRibbon_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCRibbon_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCRibbon_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCRibbon_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCRibbon_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCRibbon_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCRibbon_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCRibbon_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCRibbon_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCRibbon_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCRibbon_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCRibbon_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCRibbon_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCRibbon_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCRibbon_create(float_w,const_char_*path,float_length,ccColor4B_color,float_fade,)", "contents": "CCRibbon:create(${1:float_w},${2:const_char_*path},${3:float_length},${4:ccColor4B_color},${5:float_fade})" }
,

		{ "trigger": "CCRepeatForever_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCRepeatForever_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCRepeatForever_retain()", "contents": "retain()" }
,
		{ "trigger": "CCRepeatForever_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCRepeatForever_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCRepeatForever_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCRepeatForever_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCRepeatForever_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCRepeatForever_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCRepeatForever_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCRepeatForever_copy()", "contents": "copy()" }
,
		{ "trigger": "CCRepeatForever_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCRepeatForever_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCRepeatForever_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCRepeatForever_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCRepeatForever_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCRepeatForever_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCRepeatForever_release()", "contents": "release()" }
,
		{ "trigger": "CCRepeatForever_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCRepeatForever_create(CCActionInterval_*pAction,)", "contents": "CCRepeatForever:create(${1:CCActionInterval_*pAction})" }
,

		{ "trigger": "CCTransitionFadeTR_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCTransitionFadeTR_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionFadeTR_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCTransitionFadeTR_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCTransitionFadeTR_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCTransitionFadeTR_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCTransitionFadeTR_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionFadeTR_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCTransitionFadeTR_transform()", "contents": "transform()" }
,
		{ "trigger": "CCTransitionFadeTR_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTransitionFadeTR_visit()", "contents": "visit()" }
,
		{ "trigger": "CCTransitionFadeTR_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionFadeTR_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionFadeTR_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCTransitionFadeTR_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTransitionFadeTR_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCTransitionFadeTR_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCTransitionFadeTR_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCTransitionFadeTR_draw()", "contents": "draw()" }
,
		{ "trigger": "CCTransitionFadeTR_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCTransitionFadeTR_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCTransitionFadeTR_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCTransitionFadeTR_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCTransitionFadeTR_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionFadeTR_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCTransitionFadeTR_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTransitionFadeTR_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCTransitionFadeTR_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCTransitionFadeTR_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCTransitionFadeTR_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCTransitionFadeTR_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCTransitionFadeTR_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCTransitionFadeTR_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCTransitionFadeTR_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCTransitionFadeTR_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCTransitionFadeTR_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCTransitionFadeTR_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCTransitionFadeTR_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCTransitionFadeTR_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCTransitionFadeTR_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTransitionFadeTR_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTransitionFadeTR_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCTransitionFadeTR_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCTransitionFadeTR_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCTransitionFadeTR_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCTransitionFadeTR_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionFadeTR_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCTransitionFadeTR_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCTransitionFadeTR_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCTransitionFadeTR_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCTransitionFadeTR_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCTransitionFadeTR_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCTransitionFadeTR_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionFadeTR_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionFadeTR_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTransitionFadeTR_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCTransitionFadeTR_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionFadeTR_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCTransitionFadeTR_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionFadeTR_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCTransitionFadeTR_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTransitionFadeTR_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionFadeTR_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCTransitionFadeTR_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCTransitionFadeTR_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTransitionFadeTR_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTransitionFadeTR_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCTransitionFadeTR_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTransitionFadeTR_description()", "contents": "description()" }
,
		{ "trigger": "CCTransitionFadeTR_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCTransitionFadeTR_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTransitionFadeTR_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCTransitionFadeTR_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTransitionFadeTR_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCTransitionFadeTR_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCTransitionFadeTR_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTransitionFadeTR_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCTransitionFadeTR_release()", "contents": "release()" }
,
		{ "trigger": "CCTransitionFadeTR_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCTransitionFadeTR_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCTransitionFadeTR_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCTransitionFadeTR_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCTransitionFadeTR_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTransitionFadeTR_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTransitionFadeTR_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCTransitionFadeTR_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCTransitionFadeTR_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCTransitionFadeTR_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTransitionFadeTR_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCTransitionFadeTR_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTransitionFadeTR_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTransitionFadeTR_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCTransitionFadeTR_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCTransitionFadeTR_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCTransitionFadeTR_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCTransitionFadeTR_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCTransitionFadeTR_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCTransitionFadeTR_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCTransitionFadeTR_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCTransitionFadeTR_create(float_t,CCScene*_scene,)", "contents": "CCTransitionFadeTR:create(${1:float_t},${2:CCScene*_scene})" }
,

		{ "trigger": "CCBezierBy_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCBezierBy_retain()", "contents": "retain()" }
,
		{ "trigger": "CCBezierBy_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCBezierBy_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCBezierBy_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCBezierBy_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCBezierBy_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCBezierBy_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCBezierBy_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCBezierBy_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCBezierBy_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCBezierBy_copy()", "contents": "copy()" }
,
		{ "trigger": "CCBezierBy_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCBezierBy_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCBezierBy_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCBezierBy_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCBezierBy_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCBezierBy_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCBezierBy_release()", "contents": "release()" }
,
		{ "trigger": "CCBezierBy_create(float_t,ccBezierConfig_c,)", "contents": "CCBezierBy:create(${1:float_t},${2:ccBezierConfig_c})" }
,

		{ "trigger": "CCShow_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCShow_copy()", "contents": "copy()" }
,
		{ "trigger": "CCShow_retain()", "contents": "retain()" }
,
		{ "trigger": "CCShow_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCShow_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCShow_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCShow_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCShow_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCShow_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCShow_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCShow_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCShow_release()", "contents": "release()" }
,
		{ "trigger": "CCShow_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCShow_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCShow_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCShow_create()", "contents": "CCShow:create()" }
,

		{ "trigger": "CCTextFieldTTF_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCTextFieldTTF_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTextFieldTTF_setHorizontalAlignment(CCTextAlignment_alignment,)", "contents": "setHorizontalAlignment(${1:CCTextAlignment_alignment})" }
,
		{ "trigger": "CCTextFieldTTF_getPlaceHolder()", "contents": "getPlaceHolder()" }
,
		{ "trigger": "CCTextFieldTTF_addChild(CCNode*_pChild,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode*_pChild},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTextFieldTTF_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCTextFieldTTF_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCTextFieldTTF_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCTextFieldTTF_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCTextFieldTTF_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTextFieldTTF_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCTextFieldTTF_transform()", "contents": "transform()" }
,
		{ "trigger": "CCTextFieldTTF_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCTextFieldTTF_getVerticalAlignment()", "contents": "getVerticalAlignment()" }
,
		{ "trigger": "CCTextFieldTTF_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCTextFieldTTF_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCTextFieldTTF_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCTextFieldTTF_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTextFieldTTF_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCTextFieldTTF_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCTextFieldTTF_setSkewY(float_sy,)", "contents": "setSkewY(${1:float_sy})" }
,
		{ "trigger": "CCTextFieldTTF_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCTextFieldTTF_isTextureRectRotated()", "contents": "isTextureRectRotated()" }
,
		{ "trigger": "CCTextFieldTTF_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCTextFieldTTF_setTextureAtlas(CCTextureAtlas_*pobTextureAtlas,)", "contents": "setTextureAtlas(${1:CCTextureAtlas_*pobTextureAtlas})" }
,
		{ "trigger": "CCTextFieldTTF_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTextFieldTTF_draw()", "contents": "draw()" }
,
		{ "trigger": "CCTextFieldTTF_getAtlasIndex()", "contents": "getAtlasIndex()" }
,
		{ "trigger": "CCTextFieldTTF_addChild(CCNode*_pChild,)", "contents": "addChild(${1:CCNode*_pChild})" }
,
		{ "trigger": "CCTextFieldTTF_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCTextFieldTTF_setOpacityModifyRGB(bool_bValue,)", "contents": "setOpacityModifyRGB(${1:bool_bValue})" }
,
		{ "trigger": "CCTextFieldTTF_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCTextFieldTTF_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCTextFieldTTF_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCTextFieldTTF_setOpacity(GLubyte_opacity,)", "contents": "setOpacity(${1:GLubyte_opacity})" }
,
		{ "trigger": "CCTextFieldTTF_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCTextFieldTTF_setString(const_char_*text,)", "contents": "setString(${1:const_char_*text})" }
,
		{ "trigger": "CCTextFieldTTF_isFrameDisplayed(CCSpriteFrame_*pFrame,)", "contents": "isFrameDisplayed(${1:CCSpriteFrame_*pFrame})" }
,
		{ "trigger": "CCTextFieldTTF_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCTextFieldTTF_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCTextFieldTTF_reorderChild(CCNode*_pChild,int_zOrder,)", "contents": "reorderChild(${1:CCNode*_pChild},${2:int_zOrder})" }
,
		{ "trigger": "CCTextFieldTTF_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCTextFieldTTF_removeChild(CCNode*_pChild,bool_bCleanUp,)", "contents": "removeChild(${1:CCNode*_pChild},${2:bool_bCleanUp})" }
,
		{ "trigger": "CCTextFieldTTF_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCTextFieldTTF_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCTextFieldTTF_addChild(CCNode*_pChild,int_zOrder,)", "contents": "addChild(${1:CCNode*_pChild},${2:int_zOrder})" }
,
		{ "trigger": "CCTextFieldTTF_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCTextFieldTTF_isFlipY()", "contents": "isFlipY()" }
,
		{ "trigger": "CCTextFieldTTF_setVertexRect(CCRect_rect,)", "contents": "setVertexRect(${1:CCRect_rect})" }
,
		{ "trigger": "CCTextFieldTTF_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCTextFieldTTF_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCTextFieldTTF_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCTextFieldTTF_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCTextFieldTTF_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCTextFieldTTF_sortAllChildren()", "contents": "sortAllChildren()" }
,
		{ "trigger": "CCTextFieldTTF_getHorizontalAlignment()", "contents": "getHorizontalAlignment()" }
,
		{ "trigger": "CCTextFieldTTF_getFontSize()", "contents": "getFontSize()" }
,
		{ "trigger": "CCTextFieldTTF_getColor()", "contents": "getColor()" }
,
		{ "trigger": "CCTextFieldTTF_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCTextFieldTTF_getOffsetPosition()", "contents": "getOffsetPosition()" }
,
		{ "trigger": "CCTextFieldTTF_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCTextFieldTTF_setFontSize(float_fontSize,)", "contents": "setFontSize(${1:float_fontSize})" }
,
		{ "trigger": "CCTextFieldTTF_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCTextFieldTTF_isDirty()", "contents": "isDirty()" }
,
		{ "trigger": "CCTextFieldTTF_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCTextFieldTTF_setDisplayFrameWithAnimationName(const_char_*animationName,int_frameIndex,)", "contents": "setDisplayFrameWithAnimationName(${1:const_char_*animationName},${2:int_frameIndex})" }
,
		{ "trigger": "CCTextFieldTTF_updateTransform()", "contents": "updateTransform()" }
,
		{ "trigger": "CCTextFieldTTF_visit()", "contents": "visit()" }
,
		{ "trigger": "CCTextFieldTTF_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCTextFieldTTF_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCTextFieldTTF_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCTextFieldTTF_setColor(ccColor3B_color3,)", "contents": "setColor(${1:ccColor3B_color3})" }
,
		{ "trigger": "CCTextFieldTTF_setRotation(float_rotation,)", "contents": "setRotation(${1:float_rotation})" }
,
		{ "trigger": "CCTextFieldTTF_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCTextFieldTTF_getFontName()", "contents": "getFontName()" }
,
		{ "trigger": "CCTextFieldTTF_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCTextFieldTTF_attachWithIME()", "contents": "attachWithIME()" }
,
		{ "trigger": "CCTextFieldTTF_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTextFieldTTF_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCTextFieldTTF_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCTextFieldTTF_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCTextFieldTTF_getString()", "contents": "getString()" }
,
		{ "trigger": "CCTextFieldTTF_setScale(float_fScale,)", "contents": "setScale(${1:float_fScale})" }
,
		{ "trigger": "CCTextFieldTTF_setFlipX(bool_bFlipX,)", "contents": "setFlipX(${1:bool_bFlipX})" }
,
		{ "trigger": "CCTextFieldTTF_setBatchNode(CCSpriteBatchNode*_pBatchNode,)", "contents": "setBatchNode(${1:CCSpriteBatchNode*_pBatchNode})" }
,
		{ "trigger": "CCTextFieldTTF_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCTextFieldTTF_getDimensions()", "contents": "getDimensions()" }
,
		{ "trigger": "CCTextFieldTTF_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCTextFieldTTF_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCTextFieldTTF_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTextFieldTTF_isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" }
,
		{ "trigger": "CCTextFieldTTF_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCTextFieldTTF_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCTextFieldTTF_setAtlasIndex(unsigned_int_uAtlasIndex,)", "contents": "setAtlasIndex(${1:unsigned_int_uAtlasIndex})" }
,
		{ "trigger": "CCTextFieldTTF_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCTextFieldTTF_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCTextFieldTTF_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCTextFieldTTF_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCTextFieldTTF_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTextFieldTTF_displayFrame()", "contents": "displayFrame()" }
,
		{ "trigger": "CCTextFieldTTF_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCTextFieldTTF_getColorSpaceHolder()", "contents": "getColorSpaceHolder()" }
,
		{ "trigger": "CCTextFieldTTF_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCTextFieldTTF_removeAllChildrenWithCleanup(bool_bCleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_bCleanup})" }
,
		{ "trigger": "CCTextFieldTTF_getQuad()", "contents": "getQuad()" }
,
		{ "trigger": "CCTextFieldTTF_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCTextFieldTTF_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCTextFieldTTF_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCTextFieldTTF_copy()", "contents": "copy()" }
,
		{ "trigger": "CCTextFieldTTF_setTexture(CCTexture2D_*texture,)", "contents": "setTexture(${1:CCTexture2D_*texture})" }
,
		{ "trigger": "CCTextFieldTTF_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCTextFieldTTF_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCTextFieldTTF_setBlendFunc(ccBlendFunc_blendFunc,)", "contents": "setBlendFunc(${1:ccBlendFunc_blendFunc})" }
,
		{ "trigger": "CCTextFieldTTF_setDimensions(CCSize_&dim,)", "contents": "setDimensions(${1:CCSize_&dim})" }
,
		{ "trigger": "CCTextFieldTTF_setScaleY(float_fScaleY,)", "contents": "setScaleY(${1:float_fScaleY})" }
,
		{ "trigger": "CCTextFieldTTF_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCTextFieldTTF_setTextureRect(CCRect_rect,)", "contents": "setTextureRect(${1:CCRect_rect})" }
,
		{ "trigger": "CCTextFieldTTF_getBatchNode()", "contents": "getBatchNode()" }
,
		{ "trigger": "CCTextFieldTTF_description()", "contents": "description()" }
,
		{ "trigger": "CCTextFieldTTF_setVisible(bool_bVisible,)", "contents": "setVisible(${1:bool_bVisible})" }
,
		{ "trigger": "CCTextFieldTTF_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCTextFieldTTF_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTextFieldTTF_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCTextFieldTTF_setFontName(const_char_*fontName,)", "contents": "setFontName(${1:const_char_*fontName})" }
,
		{ "trigger": "CCTextFieldTTF_setDisplayFrame(CCSpriteFrame_*pNewFrame,)", "contents": "setDisplayFrame(${1:CCSpriteFrame_*pNewFrame})" }
,
		{ "trigger": "CCTextFieldTTF_getOpacity()", "contents": "getOpacity()" }
,
		{ "trigger": "CCTextFieldTTF_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCTextFieldTTF_setString(const_char_*label,)", "contents": "setString(${1:const_char_*label})" }
,
		{ "trigger": "CCTextFieldTTF_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCTextFieldTTF_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCTextFieldTTF_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCTextFieldTTF_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCTextFieldTTF_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCTextFieldTTF_release()", "contents": "release()" }
,
		{ "trigger": "CCTextFieldTTF_setScaleX(float_fScaleX,)", "contents": "setScaleX(${1:float_fScaleX})" }
,
		{ "trigger": "CCTextFieldTTF_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCTextFieldTTF_setFlipY(bool_bFlipY,)", "contents": "setFlipY(${1:bool_bFlipY})" }
,
		{ "trigger": "CCTextFieldTTF_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCTextFieldTTF_getTextureRect()", "contents": "getTextureRect()" }
,
		{ "trigger": "CCTextFieldTTF_setColorSpaceHolder(ccColor3B_val,)", "contents": "setColorSpaceHolder(${1:ccColor3B_val})" }
,
		{ "trigger": "CCTextFieldTTF_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCTextFieldTTF_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCTextFieldTTF_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCTextFieldTTF_setVerticalAlignment(CCVerticalTextAlignment_verticalAlignment,)", "contents": "setVerticalAlignment(${1:CCVerticalTextAlignment_verticalAlignment})" }
,
		{ "trigger": "CCTextFieldTTF_retain()", "contents": "retain()" }
,
		{ "trigger": "CCTextFieldTTF_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCTextFieldTTF_isFlipX()", "contents": "isFlipX()" }
,
		{ "trigger": "CCTextFieldTTF_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCTextFieldTTF_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCTextFieldTTF_setVertexZ(float_fVertexZ,)", "contents": "setVertexZ(${1:float_fVertexZ})" }
,
		{ "trigger": "CCTextFieldTTF_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCTextFieldTTF_setAnchorPoint(const_CCPoint_&_anchor,)", "contents": "setAnchorPoint(${1:const_CCPoint_&_anchor})" }
,
		{ "trigger": "CCTextFieldTTF_setDirty(bool_bDirty,)", "contents": "setDirty(${1:bool_bDirty})" }
,
		{ "trigger": "CCTextFieldTTF_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCTextFieldTTF_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCTextFieldTTF_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCTextFieldTTF_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCTextFieldTTF_getTextureAtlas()", "contents": "getTextureAtlas()" }
,
		{ "trigger": "CCTextFieldTTF_setSkewX(float_sx,)", "contents": "setSkewX(${1:float_sx})" }
,
		{ "trigger": "CCTextFieldTTF_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCTextFieldTTF_setPlaceHolder(const_char_*_text,)", "contents": "setPlaceHolder(${1:const_char_*_text})" }
,
		{ "trigger": "CCTextFieldTTF_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCTextFieldTTF_getCharCount()", "contents": "getCharCount()" }
,
		{ "trigger": "CCTextFieldTTF_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCTextFieldTTF_detachWithIME()", "contents": "detachWithIME()" }
,
		{ "trigger": "CCTextFieldTTF_setTextureRect(CCRect_rect,bool_rotated,CCSize_size,)", "contents": "setTextureRect(${1:CCRect_rect},${2:bool_rotated},${3:CCSize_size})" }
,
		{ "trigger": "CCTextFieldTTF_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCTextFieldTTF_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCTextFieldTTF_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCTextFieldTTF_textFieldWithPlaceHolder(const_char_*placeholder,CCSize_dimensions,CCTextAlignment_alignment,const_char_*fontName,float_fontSize,)", "contents": "CCTextFieldTTF:textFieldWithPlaceHolder(${1:const_char_*placeholder},${2:CCSize_dimensions},${3:CCTextAlignment_alignment},${4:const_char_*fontName},${5:float_fontSize})" }
,
		{ "trigger": "CCTextFieldTTF_textFieldWithPlaceHolder(const_char_*placeholder,const_char_*fontName,float_fontSize,)", "contents": "CCTextFieldTTF:textFieldWithPlaceHolder(${1:const_char_*placeholder},${2:const_char_*fontName},${3:float_fontSize})" }
,

		{ "trigger": "CCParticleSmoke_setEndColor(const_ccColor4F_var,)", "contents": "setEndColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSmoke_convertToWorldSpaceAR(CCPoint_nodePoint,)", "contents": "convertToWorldSpaceAR(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleSmoke_setContentSize(const_CCSize_&_size,)", "contents": "setContentSize(${1:const_CCSize_&_size})" }
,
		{ "trigger": "CCParticleSmoke_setRotatePerSecondVar(float_degrees,)", "contents": "setRotatePerSecondVar(${1:float_degrees})" }
,
		{ "trigger": "CCParticleSmoke_isVisible()", "contents": "isVisible()" }
,
		{ "trigger": "CCParticleSmoke_getScheduler()", "contents": "getScheduler()" }
,
		{ "trigger": "CCParticleSmoke_transform()", "contents": "transform()" }
,
		{ "trigger": "CCParticleSmoke_getRotatePerSecond()", "contents": "getRotatePerSecond()" }
,
		{ "trigger": "CCParticleSmoke_setTextureWithRect(CCTexture2D_*texture,const_CCRect&_rect,)", "contents": "setTextureWithRect(${1:CCTexture2D_*texture},${2:const_CCRect&_rect})" }
,
		{ "trigger": "CCParticleSmoke_getAngleVar()", "contents": "getAngleVar()" }
,
		{ "trigger": "CCParticleSmoke_convertToNodeSpace(CCPoint_worldPoint,)", "contents": "convertToNodeSpace(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleSmoke_isAutoRemoveOnFinish()", "contents": "isAutoRemoveOnFinish()" }
,
		{ "trigger": "CCParticleSmoke_removeFromParentAndCleanup(bool_cleanup,)", "contents": "removeFromParentAndCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleSmoke_isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" }
,
		{ "trigger": "CCParticleSmoke_addChild(CCNode_*_child,int_zOrder,int_tag,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder},${3:int_tag})" }
,
		{ "trigger": "CCParticleSmoke_setTangentialAccel(float_t,)", "contents": "setTangentialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleSmoke_getStartSpin()", "contents": "getStartSpin()" }
,
		{ "trigger": "CCParticleSmoke_setPosition(float_x,float_y,)", "contents": "setPosition(${1:float_x},${2:float_y})" }
,
		{ "trigger": "CCParticleSmoke_getStartColor()", "contents": "getStartColor()" }
,
		{ "trigger": "CCParticleSmoke_setStartSpinVar(float_var,)", "contents": "setStartSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleSmoke_getRotation()", "contents": "getRotation()" }
,
		{ "trigger": "CCParticleSmoke_setStartRadius(float_startRadius,)", "contents": "setStartRadius(${1:float_startRadius})" }
,
		{ "trigger": "CCParticleSmoke_setScaleY(float_newScaleY,)", "contents": "setScaleY(${1:float_newScaleY})" }
,
		{ "trigger": "CCParticleSmoke_setParent(CCNode_*_var,)", "contents": "setParent(${1:CCNode_*_var})" }
,
		{ "trigger": "CCParticleSmoke_scheduleUpdateWithPriorityLua(LUA_FUNCTION_nHandler,int_priority,)", "contents": "scheduleUpdateWithPriorityLua(${1:LUA_FUNCTION_nHandler},${2:int_priority})" }
,
		{ "trigger": "CCParticleSmoke_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCParticleSmoke_getPosVar()", "contents": "getPosVar()" }
,
		{ "trigger": "CCParticleSmoke_setAngleVar(float_angle,)", "contents": "setAngleVar(${1:float_angle})" }
,
		{ "trigger": "CCParticleSmoke_isFull()", "contents": "isFull()" }
,
		{ "trigger": "CCParticleSmoke_setStartRadiusVar(float_startRadiusVar,)", "contents": "setStartRadiusVar(${1:float_startRadiusVar})" }
,
		{ "trigger": "CCParticleSmoke_getStartSpinVar()", "contents": "getStartSpinVar()" }
,
		{ "trigger": "CCParticleSmoke_nodeToParentTransform()", "contents": "nodeToParentTransform()" }
,
		{ "trigger": "CCParticleSmoke_setDisplayFrame(CCSpriteFrame*_spriteFrame,)", "contents": "setDisplayFrame(${1:CCSpriteFrame*_spriteFrame})" }
,
		{ "trigger": "CCParticleSmoke_setBatchNode(CCParticleBatchNode*_node,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_node})" }
,
		{ "trigger": "CCParticleSmoke_isBlendAdditive()", "contents": "isBlendAdditive()" }
,
		{ "trigger": "CCParticleSmoke_cleanup()", "contents": "cleanup()" }
,
		{ "trigger": "CCParticleSmoke_setSkewY(float_skewY,)", "contents": "setSkewY(${1:float_skewY})" }
,
		{ "trigger": "CCParticleSmoke_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCParticleSmoke_getEmissionRate()", "contents": "getEmissionRate()" }
,
		{ "trigger": "CCParticleSmoke_setScaleX(float_newScaleX,)", "contents": "setScaleX(${1:float_newScaleX})" }
,
		{ "trigger": "CCParticleSmoke_setEndRadiusVar(float_endRadiusVar,)", "contents": "setEndRadiusVar(${1:float_endRadiusVar})" }
,
		{ "trigger": "CCParticleSmoke_reorderChild(CCNode_*_child,int_zOrder,)", "contents": "reorderChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleSmoke_nodeToWorldTransform()", "contents": "nodeToWorldTransform()" }
,
		{ "trigger": "CCParticleSmoke_getZOrder()", "contents": "getZOrder()" }
,
		{ "trigger": "CCParticleSmoke_getPosition(float*_x_=_0,float*_y_=_0,)", "contents": "getPosition(${1:float*_x_=_0},${2:float*_y_=_0})" }
,
		{ "trigger": "CCParticleSmoke_postStep()", "contents": "postStep()" }
,
		{ "trigger": "CCParticleSmoke_getActionManager()", "contents": "getActionManager()" }
,
		{ "trigger": "CCParticleSmoke_setBlendAdditive(bool_value,)", "contents": "setBlendAdditive(${1:bool_value})" }
,
		{ "trigger": "CCParticleSmoke_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleSmoke_setEndSpin(float_var,)", "contents": "setEndSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleSmoke_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCParticleSmoke_setBatchNode(CCParticleBatchNode*_batchNode,)", "contents": "setBatchNode(${1:CCParticleBatchNode*_batchNode})" }
,
		{ "trigger": "CCParticleSmoke_getEndRadius()", "contents": "getEndRadius()" }
,
		{ "trigger": "CCParticleSmoke_getStartSize()", "contents": "getStartSize()" }
,
		{ "trigger": "CCParticleSmoke_getTotalParticles()", "contents": "getTotalParticles()" }
,
		{ "trigger": "CCParticleSmoke_setTag(int_var,)", "contents": "setTag(${1:int_var})" }
,
		{ "trigger": "CCParticleSmoke_getStartSizeVar()", "contents": "getStartSizeVar()" }
,
		{ "trigger": "CCParticleSmoke_convertToWorldSpace(CCPoint_nodePoint,)", "contents": "convertToWorldSpace(${1:CCPoint_nodePoint})" }
,
		{ "trigger": "CCParticleSmoke_setGravity(const_CCPoint&_g,)", "contents": "setGravity(${1:const_CCPoint&_g})" }
,
		{ "trigger": "CCParticleSmoke_getSourcePosition()", "contents": "getSourcePosition()" }
,
		{ "trigger": "CCParticleSmoke_convertTouchToNodeSpace(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpace(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleSmoke_numberOfRunningActions()", "contents": "numberOfRunningActions()" }
,
		{ "trigger": "CCParticleSmoke_getTangentialAccelVar()", "contents": "getTangentialAccelVar()" }
,
		{ "trigger": "CCParticleSmoke_getActionByTag(int_tag,)", "contents": "getActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleSmoke_getEndSpinVar()", "contents": "getEndSpinVar()" }
,
		{ "trigger": "CCParticleSmoke_setAutoRemoveOnFinish(bool_var,)", "contents": "setAutoRemoveOnFinish(${1:bool_var})" }
,
		{ "trigger": "CCParticleSmoke_setPosVar(CCPoint_pos,)", "contents": "setPosVar(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleSmoke_setEmissionRate(float_rate,)", "contents": "setEmissionRate(${1:float_rate})" }
,
		{ "trigger": "CCParticleSmoke_stopAction(CCAction*_action,)", "contents": "stopAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleSmoke_convertToNodeSpaceAR(CCPoint_worldPoint,)", "contents": "convertToNodeSpaceAR(${1:CCPoint_worldPoint})" }
,
		{ "trigger": "CCParticleSmoke_registerScriptHandler(LUA_FUNCTION_funcID,)", "contents": "registerScriptHandler(${1:LUA_FUNCTION_funcID})" }
,
		{ "trigger": "CCParticleSmoke_getRadialAccelVar()", "contents": "getRadialAccelVar()" }
,
		{ "trigger": "CCParticleSmoke_getStartRadius()", "contents": "getStartRadius()" }
,
		{ "trigger": "CCParticleSmoke_getEndColorVar()", "contents": "getEndColorVar()" }
,
		{ "trigger": "CCParticleSmoke_setStartColorVar(const_ccColor4F_var,)", "contents": "setStartColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSmoke_getParent()", "contents": "getParent()" }
,
		{ "trigger": "CCParticleSmoke_initWithFile(const_char*_plistFile,)", "contents": "initWithFile(${1:const_char*_plistFile})" }
,
		{ "trigger": "CCParticleSmoke_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCParticleSmoke_getBlendFunc()", "contents": "getBlendFunc()" }
,
		{ "trigger": "CCParticleSmoke_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCParticleSmoke_getUserObject()", "contents": "getUserObject()" }
,
		{ "trigger": "CCParticleSmoke_parentToNodeTransform()", "contents": "parentToNodeTransform()" }
,
		{ "trigger": "CCParticleSmoke_setUserData(void_*var,)", "contents": "setUserData(${1:void_*var})" }
,
		{ "trigger": "CCParticleSmoke_setStartSpin(float_var,)", "contents": "setStartSpin(${1:float_var})" }
,
		{ "trigger": "CCParticleSmoke_getShaderProgram()", "contents": "getShaderProgram()" }
,
		{ "trigger": "CCParticleSmoke_getEndSize()", "contents": "getEndSize()" }
,
		{ "trigger": "CCParticleSmoke_setSourcePosition(CCPoint_pos,)", "contents": "setSourcePosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleSmoke_initParticle(tCCParticle*_particle,)", "contents": "initParticle(${1:tCCParticle*_particle})" }
,
		{ "trigger": "CCParticleSmoke_worldToNodeTransform()", "contents": "worldToNodeTransform()" }
,
		{ "trigger": "CCParticleSmoke_updateQuadWithParticle(tCCParticle*_particle,const_CCPoint&_newPosition,)", "contents": "updateQuadWithParticle(${1:tCCParticle*_particle},${2:const_CCPoint&_newPosition})" }
,
		{ "trigger": "CCParticleSmoke_setStartColor(const_ccColor4F_var,)", "contents": "setStartColor(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSmoke_getEndColor()", "contents": "getEndColor()" }
,
		{ "trigger": "CCParticleSmoke_setEmitterMode(int_mode,)", "contents": "setEmitterMode(${1:int_mode})" }
,
		{ "trigger": "CCParticleSmoke_getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" }
,
		{ "trigger": "CCParticleSmoke_stopAllActions()", "contents": "stopAllActions()" }
,
		{ "trigger": "CCParticleSmoke_unscheduleUpdate()", "contents": "unscheduleUpdate()" }
,
		{ "trigger": "CCParticleSmoke_setScheduler(CCScheduler*_pScheduler,)", "contents": "setScheduler(${1:CCScheduler*_pScheduler})" }
,
		{ "trigger": "CCParticleSmoke_setSkewX(float_skewX,)", "contents": "setSkewX(${1:float_skewX})" }
,
		{ "trigger": "CCParticleSmoke_setStartSizeVar(float_size,)", "contents": "setStartSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleSmoke_getLife()", "contents": "getLife()" }
,
		{ "trigger": "CCParticleSmoke_setBlendFunc(ccBlendFunc_var,)", "contents": "setBlendFunc(${1:ccBlendFunc_var})" }
,
		{ "trigger": "CCParticleSmoke_setPosition(CCPoint_pos,)", "contents": "setPosition(${1:CCPoint_pos})" }
,
		{ "trigger": "CCParticleSmoke_getAngle()", "contents": "getAngle()" }
,
		{ "trigger": "CCParticleSmoke_setOrderOfArrival(int_order,)", "contents": "setOrderOfArrival(${1:int_order})" }
,
		{ "trigger": "CCParticleSmoke_getVertexZ()", "contents": "getVertexZ()" }
,
		{ "trigger": "CCParticleSmoke_getEmitterMode()", "contents": "getEmitterMode()" }
,
		{ "trigger": "CCParticleSmoke_runAction(CCAction*_action,)", "contents": "runAction(${1:CCAction*_action})" }
,
		{ "trigger": "CCParticleSmoke_getSkewX()", "contents": "getSkewX()" }
,
		{ "trigger": "CCParticleSmoke_getTangentialAccel()", "contents": "getTangentialAccel()" }
,
		{ "trigger": "CCParticleSmoke_setPositionY(float_y,)", "contents": "setPositionY(${1:float_y})" }
,
		{ "trigger": "CCParticleSmoke_visit()", "contents": "visit()" }
,
		{ "trigger": "CCParticleSmoke_setTexture(CCTexture2D*_var,)", "contents": "setTexture(${1:CCTexture2D*_var})" }
,
		{ "trigger": "CCParticleSmoke_getPositionType()", "contents": "getPositionType()" }
,
		{ "trigger": "CCParticleSmoke_getScaleX()", "contents": "getScaleX()" }
,
		{ "trigger": "CCParticleSmoke_setScale(float_s,)", "contents": "setScale(${1:float_s})" }
,
		{ "trigger": "CCParticleSmoke_draw()", "contents": "draw()" }
,
		{ "trigger": "CCParticleSmoke_addChild(CCNode_*_child,int_zOrder,)", "contents": "addChild(${1:CCNode_*_child},${2:int_zOrder})" }
,
		{ "trigger": "CCParticleSmoke_setEndSpinVar(float_var,)", "contents": "setEndSpinVar(${1:float_var})" }
,
		{ "trigger": "CCParticleSmoke_setSpeed(float_speed,)", "contents": "setSpeed(${1:float_speed})" }
,
		{ "trigger": "CCParticleSmoke_setRotation(float_newRotation,)", "contents": "setRotation(${1:float_newRotation})" }
,
		{ "trigger": "CCParticleSmoke_getContentSize()", "contents": "getContentSize()" }
,
		{ "trigger": "CCParticleSmoke_setShaderProgram(CCGLProgram*_pShaderProgram,)", "contents": "setShaderProgram(${1:CCGLProgram*_pShaderProgram})" }
,
		{ "trigger": "CCParticleSmoke_setStartSize(float_size,)", "contents": "setStartSize(${1:float_size})" }
,
		{ "trigger": "CCParticleSmoke_getStartRadiusVar()", "contents": "getStartRadiusVar()" }
,
		{ "trigger": "CCParticleSmoke_getUserData()", "contents": "getUserData()" }
,
		{ "trigger": "CCParticleSmoke_ignoreAnchorPointForPosition(bool_newValue,)", "contents": "ignoreAnchorPointForPosition(${1:bool_newValue})" }
,
		{ "trigger": "CCParticleSmoke_getSkewY()", "contents": "getSkewY()" }
,
		{ "trigger": "CCParticleSmoke_getChildren()", "contents": "getChildren()" }
,
		{ "trigger": "CCParticleSmoke_getSpeed()", "contents": "getSpeed()" }
,
		{ "trigger": "CCParticleSmoke_setTotalParticles(unsigned_int_tp,)", "contents": "setTotalParticles(${1:unsigned_int_tp})" }
,
		{ "trigger": "CCParticleSmoke_getCamera()", "contents": "getCamera()" }
,
		{ "trigger": "CCParticleSmoke_getTexture()", "contents": "getTexture()" }
,
		{ "trigger": "CCParticleSmoke_setRotatePerSecond(float_degrees,)", "contents": "setRotatePerSecond(${1:float_degrees})" }
,
		{ "trigger": "CCParticleSmoke_setAnchorPoint(CCPoint_point,)", "contents": "setAnchorPoint(${1:CCPoint_point})" }
,
		{ "trigger": "CCParticleSmoke_transformAncestors()", "contents": "transformAncestors()" }
,
		{ "trigger": "CCParticleSmoke_getScaleY()", "contents": "getScaleY()" }
,
		{ "trigger": "CCParticleSmoke_getEndRadiusVar()", "contents": "getEndRadiusVar()" }
,
		{ "trigger": "CCParticleSmoke_getParticleCount()", "contents": "getParticleCount()" }
,
		{ "trigger": "CCParticleSmoke_isRunning()", "contents": "isRunning()" }
,
		{ "trigger": "CCParticleSmoke_getScale()", "contents": "getScale()" }
,
		{ "trigger": "CCParticleSmoke_getEndSizeVar()", "contents": "getEndSizeVar()" }
,
		{ "trigger": "CCParticleSmoke_removeAllChildrenWithCleanup(bool_cleanup,)", "contents": "removeAllChildrenWithCleanup(${1:bool_cleanup})" }
,
		{ "trigger": "CCParticleSmoke_getChildrenCount()", "contents": "getChildrenCount()" }
,
		{ "trigger": "CCParticleSmoke_setPositionX(float_x,)", "contents": "setPositionX(${1:float_x})" }
,
		{ "trigger": "CCParticleSmoke_setTangentialAccelVar(float_t,)", "contents": "setTangentialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleSmoke_getSpeedVar()", "contents": "getSpeedVar()" }
,
		{ "trigger": "CCParticleSmoke_setSpeedVar(float_speed,)", "contents": "setSpeedVar(${1:float_speed})" }
,
		{ "trigger": "CCParticleSmoke_boundingBox()", "contents": "boundingBox()" }
,
		{ "trigger": "CCParticleSmoke_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCParticleSmoke_setEndSizeVar(float_size,)", "contents": "setEndSizeVar(${1:float_size})" }
,
		{ "trigger": "CCParticleSmoke_setGrid(CCGridBase*_pGrid,)", "contents": "setGrid(${1:CCGridBase*_pGrid})" }
,
		{ "trigger": "CCParticleSmoke_getLifeVar()", "contents": "getLifeVar()" }
,
		{ "trigger": "CCParticleSmoke_setPositionType(tCCPositionType_type,)", "contents": "setPositionType(${1:tCCPositionType_type})" }
,
		{ "trigger": "CCParticleSmoke_getPositionY()", "contents": "getPositionY()" }
,
		{ "trigger": "CCParticleSmoke_stopActionByTag(int_tag,)", "contents": "stopActionByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleSmoke_addChild(CCNode_*_child,)", "contents": "addChild(${1:CCNode_*_child})" }
,
		{ "trigger": "CCParticleSmoke_getAnchorPoint()", "contents": "getAnchorPoint()" }
,
		{ "trigger": "CCParticleSmoke_getBatchNode()", "contents": "getBatchNode()" }
,
		{ "trigger": "CCParticleSmoke_getChildByTag(int_tag,)", "contents": "getChildByTag(${1:int_tag})" }
,
		{ "trigger": "CCParticleSmoke_initWithTotalParticles(unsigned_int_number,)", "contents": "initWithTotalParticles(${1:unsigned_int_number})" }
,
		{ "trigger": "CCParticleSmoke_convertTouchToNodeSpaceAR(CCTouch_*_touch,)", "contents": "convertTouchToNodeSpaceAR(${1:CCTouch_*_touch})" }
,
		{ "trigger": "CCParticleSmoke_setScale(float_scale,)", "contents": "setScale(${1:float_scale})" }
,
		{ "trigger": "CCParticleSmoke_setDuration(float_d,)", "contents": "setDuration(${1:float_d})" }
,
		{ "trigger": "CCParticleSmoke_setRadialAccel(float_t,)", "contents": "setRadialAccel(${1:float_t})" }
,
		{ "trigger": "CCParticleSmoke_resetSystem()", "contents": "resetSystem()" }
,
		{ "trigger": "CCParticleSmoke_removeChildByTag(int_tag,bool_cleanup,)", "contents": "removeChildByTag(${1:int_tag},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleSmoke_setUserObject(CCObject*_pObject,)", "contents": "setUserObject(${1:CCObject*_pObject})" }
,
		{ "trigger": "CCParticleSmoke_setActionManager(CCActionManager*_pActionMgr,)", "contents": "setActionManager(${1:CCActionManager*_pActionMgr})" }
,
		{ "trigger": "CCParticleSmoke_copy()", "contents": "copy()" }
,
		{ "trigger": "CCParticleSmoke_setEndSize(float_size,)", "contents": "setEndSize(${1:float_size})" }
,
		{ "trigger": "CCParticleSmoke_getRadialAccel()", "contents": "getRadialAccel()" }
,
		{ "trigger": "CCParticleSmoke_isActive()", "contents": "isActive()" }
,
		{ "trigger": "CCParticleSmoke_description()", "contents": "description()" }
,
		{ "trigger": "CCParticleSmoke_getGravity()", "contents": "getGravity()" }
,
		{ "trigger": "CCParticleSmoke_removeChild(CCNode*_child,bool_cleanup,)", "contents": "removeChild(${1:CCNode*_child},${2:bool_cleanup})" }
,
		{ "trigger": "CCParticleSmoke_setRadialAccelVar(float_t,)", "contents": "setRadialAccelVar(${1:float_t})" }
,
		{ "trigger": "CCParticleSmoke_setLifeVar(float_lifeVar,)", "contents": "setLifeVar(${1:float_lifeVar})" }
,
		{ "trigger": "CCParticleSmoke_setEndRadius(float_endRadius,)", "contents": "setEndRadius(${1:float_endRadius})" }
,
		{ "trigger": "CCParticleSmoke_getEndSpin()", "contents": "getEndSpin()" }
,
		{ "trigger": "CCParticleSmoke_getPositionX()", "contents": "getPositionX()" }
,
		{ "trigger": "CCParticleSmoke_setAngle(float_angle,)", "contents": "setAngle(${1:float_angle})" }
,
		{ "trigger": "CCParticleSmoke_retain()", "contents": "retain()" }
,
		{ "trigger": "CCParticleSmoke_release()", "contents": "release()" }
,
		{ "trigger": "CCParticleSmoke_getRotatePerSecondVar()", "contents": "getRotatePerSecondVar()" }
,
		{ "trigger": "CCParticleSmoke_addParticle()", "contents": "addParticle()" }
,
		{ "trigger": "CCParticleSmoke_setLife(float_life,)", "contents": "setLife(${1:float_life})" }
,
		{ "trigger": "CCParticleSmoke_getGLServerState()", "contents": "getGLServerState()" }
,
		{ "trigger": "CCParticleSmoke_setGLServerState(ccGLServerState_state,)", "contents": "setGLServerState(${1:ccGLServerState_state})" }
,
		{ "trigger": "CCParticleSmoke_setVertexZ(float_var,)", "contents": "setVertexZ(${1:float_var})" }
,
		{ "trigger": "CCParticleSmoke_unregisterScriptHandler()", "contents": "unregisterScriptHandler()" }
,
		{ "trigger": "CCParticleSmoke_getGrid()", "contents": "getGrid()" }
,
		{ "trigger": "CCParticleSmoke_setTexture(CCTexture2D*_texture,)", "contents": "setTexture(${1:CCTexture2D*_texture})" }
,
		{ "trigger": "CCParticleSmoke_setVisible(bool_var,)", "contents": "setVisible(${1:bool_var})" }
,
		{ "trigger": "CCParticleSmoke_setEndColorVar(const_ccColor4F_var,)", "contents": "setEndColorVar(${1:const_ccColor4F_var})" }
,
		{ "trigger": "CCParticleSmoke_getStartColorVar()", "contents": "getStartColorVar()" }
,
		{ "trigger": "CCParticleSmoke_stopSystem()", "contents": "stopSystem()" }
,
		{ "trigger": "CCParticleSmoke_getOrderOfArrival()", "contents": "getOrderOfArrival()" }
,
		{ "trigger": "CCParticleSmoke_create()", "contents": "CCParticleSmoke:create()" }
,

		{ "trigger": "CCTransitionPageTurn_actionWithSize(CCSize_vector,)", "contents": "actionWithSize(${1:CCSize_vector})" }
,
		{ "trigger": "CCTransitionPageTurn_create(float_t,CCScene*_scene,bool_backwards,)", "contents": "CCTransitionPageTurn:create(${1:float_t},${2:CCScene*_scene},${3:bool_backwards})" }
,

		{ "trigger": "CCEaseBackOut_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCEaseBackOut_retain()", "contents": "retain()" }
,
		{ "trigger": "CCEaseBackOut_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCEaseBackOut_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCEaseBackOut_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCEaseBackOut_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCEaseBackOut_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCEaseBackOut_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCEaseBackOut_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCEaseBackOut_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCEaseBackOut_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCEaseBackOut_copy()", "contents": "copy()" }
,
		{ "trigger": "CCEaseBackOut_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCEaseBackOut_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCEaseBackOut_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCEaseBackOut_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCEaseBackOut_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCEaseBackOut_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCEaseBackOut_release()", "contents": "release()" }
,
		{ "trigger": "CCEaseBackOut_create(CCActionInterval*_pAction,)", "contents": "CCEaseBackOut:create(${1:CCActionInterval*_pAction})" }
,

		{ "trigger": "CCProgressFromTo_getAmplitudeRate()", "contents": "getAmplitudeRate()" }
,
		{ "trigger": "CCProgressFromTo_getTag()", "contents": "getTag()" }
,
		{ "trigger": "CCProgressFromTo_getOriginalTarget()", "contents": "getOriginalTarget()" }
,
		{ "trigger": "CCProgressFromTo_isDone()", "contents": "isDone()" }
,
		{ "trigger": "CCProgressFromTo_create(float_d,)", "contents": "create(${1:float_d})" }
,
		{ "trigger": "CCProgressFromTo_setTag(int_nTag,)", "contents": "setTag(${1:int_nTag})" }
,
		{ "trigger": "CCProgressFromTo_reverse()", "contents": "reverse()" }
,
		{ "trigger": "CCProgressFromTo_getDuration()", "contents": "getDuration()" }
,
		{ "trigger": "CCProgressFromTo_setDuration(float_duration,)", "contents": "setDuration(${1:float_duration})" }
,
		{ "trigger": "CCProgressFromTo_retain()", "contents": "retain()" }
,
		{ "trigger": "CCProgressFromTo_isSingleReference()", "contents": "isSingleReference()" }
,
		{ "trigger": "CCProgressFromTo_copy()", "contents": "copy()" }
,
		{ "trigger": "CCProgressFromTo_getElapsed()", "contents": "getElapsed()" }
,
		{ "trigger": "CCProgressFromTo_setAmplitudeRate(float_amp,)", "contents": "setAmplitudeRate(${1:float_amp})" }
,
		{ "trigger": "CCProgressFromTo_isEqual(const_CCObject*_pObject,)", "contents": "isEqual(${1:const_CCObject*_pObject})" }
,
		{ "trigger": "CCProgressFromTo_autorelease()", "contents": "autorelease()" }
,
		{ "trigger": "CCProgressFromTo_retainCount()", "contents": "retainCount()" }
,
		{ "trigger": "CCProgressFromTo_getTarget()", "contents": "getTarget()" }
,
		{ "trigger": "CCProgressFromTo_release()", "contents": "release()" }
,
		{ "trigger": "CCProgressFromTo_create(float_duration,float_fFromPercentage,float_fToPercentage,)", "contents": "CCProgressFromTo:create(${1:float_duration},${2:float_fFromPercentage},${3:float_fToPercentage})" }

	]
}
